
/*
Gaigen 1.0, Copyright (c) 2001-2010, University of Amsterdam

Copying, use and development for education and research purposes 
permitted as long as this license is not removed from the files.

All rights for commercial use reserved; for more information
contact Daniel Fontijne (fontijne@science.uva.nl)

This software is unsupported.
*/
/*
Source file c5ga.cpp, generated by Gaigen 1.0 on Mon Mar 22 19:10:50 2010
*/




#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <math.h>
#include "c5ga.h"
#ifdef WIN32
#pragma warning( disable : 4996)
#endif

int c5gai_expansionTable_gp[] = {
775, 791, 792, 793, 794, 795, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 873, 874, 875, 876, 877, 889, 902, 914, 915, 916, 917, 918, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 996, 997, 998, 999, 1000, 1016, 2311, 2327, 2328, 2329, 2330, 2331, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2362, 2383, 2384, 2385, 2386, 2387, 2388, 2389, 2390, 2391, 2392, 2409, 2410, 2411, 2412, 2413, 2425, 2439, 2455, 2456, 2457, 2458, 2459, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2537, 2538, 2539, 2540, 2541, 2553, 2567, 2583, 2584, 2585, 2586, 2587, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2665, 2666, 2667, 2668, 2669, 2681, 2695, 2711, 2712, 2713, 2714, 2715, 2737, 2738, 2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2793, 2794, 2795, 2796, 2797, 2809, 2823, 2839, 2840, 2841, 2842, 2843, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872, 2873, 2874, 2895, 2896, 2897, 2898, 2899, 2900, 2901, 2902, 2903, 2904, 2921, 2922, 2923, 2924, 2925, 2937, 2950, 2962, 2963, 2964, 2965, 2966, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990, 2991, 2992, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3044, 3045, 3046, 3047, 3048, 3064, 3078, 3090, 3091, 3092, 3093, 3094, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3172, 3173, 3174, 3175, 3176, 3192, 3206, 3218, 3219, 3220, 3221, 3222, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3269, 3270, 3271, 3272, 3273, 3274, 3275, 3276, 3277, 3278, 3300, 3301, 3302, 3303, 3304, 3320, 3334, 3346, 3347, 3348, 3349, 3350, 3367, 3368, 3369, 3370, 3371, 3372, 3373, 3374, 3375, 3376, 3397, 3398, 3399, 3400, 3401, 3402, 3403, 3404, 3405, 3406, 3428, 3429, 3430, 3431, 3432, 3448, 3462, 3474, 3475, 3476, 3477, 3478, 3495, 3496, 3497, 3498, 3499, 3500, 3501, 3502, 3503, 3504, 3525, 3526, 3527, 3528, 3529, 3530, 3531, 3532, 3533, 3534, 3556, 3557, 3558, 3559, 3560, 3576, 4999, 5015, 5016, 5017, 5018, 5019, 5041, 5042, 5043, 5044, 5045, 5046, 5047, 5048, 5049, 5050, 5071, 5072, 5073, 5074, 5075, 5076, 5077, 5078, 5079, 5080, 5097, 5098, 5099, 5100, 5101, 5113, 5127, 5143, 5144, 5145, 5146, 5147, 5169, 5170, 5171, 5172, 5173, 5174, 5175, 5176, 5177, 5178, 5199, 5200, 5201, 5202, 5203, 5204, 5205, 5206, 5207, 5208, 5225, 5226, 5227, 5228, 5229, 5241, 5255, 5271, 5272, 5273, 5274, 5275, 5297, 5298, 5299, 5300, 5301, 5302, 5303, 5304, 5305, 5306, 5327, 5328, 5329, 5330, 5331, 5332, 5333, 5334, 5335, 5336, 5353, 5354, 5355, 5356, 5357, 5369, 5383, 5399, 5400, 5401, 5402, 5403, 5425, 5426, 5427, 5428, 5429, 5430, 5431, 5432, 5433, 5434, 5455, 5456, 5457, 5458, 5459, 5460, 5461, 5462, 5463, 5464, 5481, 5482, 5483, 5484, 5485, 5497, 5511, 5527, 5528, 5529, 5530, 5531, 5553, 5554, 5555, 5556, 5557, 5558, 5559, 5560, 5561, 5562, 5583, 5584, 5585, 5586, 5587, 5588, 5589, 5590, 5591, 5592, 5609, 5610, 5611, 5612, 5613, 5625, 5639, 5655, 5656, 5657, 5658, 5659, 5681, 5682, 5683, 5684, 5685, 5686, 5687, 5688, 5689, 5690, 5711, 5712, 5713, 5714, 5715, 5716, 5717, 5718, 5719, 5720, 5737, 5738, 5739, 5740, 5741, 5753, 5767, 5783, 5784, 5785, 5786, 5787, 5809, 5810, 5811, 5812, 5813, 5814, 5815, 5816, 5817, 5818, 5839, 5840, 5841, 5842, 5843, 5844, 5845, 5846, 5847, 5848, 5865, 5866, 5867, 5868, 5869, 5881, 5895, 5911, 5912, 5913, 5914, 5915, 5937, 5938, 5939, 5940, 5941, 5942, 5943, 5944, 5945, 5946, 5967, 5968, 5969, 5970, 5971, 5972, 5973, 5974, 5975, 5976, 5993, 5994, 5995, 5996, 5997, 6009, 6023, 6039, 6040, 6041, 6042, 6043, 6065, 6066, 6067, 6068, 6069, 6070, 6071, 6072, 6073, 6074, 6095, 6096, 6097, 6098, 6099, 6100, 6101, 6102, 6103, 6104, 6121, 6122, 6123, 6124, 6125, 6137, 6151, 6167, 6168, 6169, 6170, 6171, 6193, 6194, 6195, 6196, 6197, 6198, 6199, 6200, 6201, 6202, 6223, 6224, 6225, 6226, 6227, 6228, 6229, 6230, 6231, 6232, 6249, 6250, 6251, 6252, 6253, 6265, 6278, 6290, 6291, 6292, 6293, 6294, 6311, 6312, 6313, 6314, 6315, 6316, 6317, 6318, 6319, 6320, 6341, 6342, 6343, 6344, 6345, 6346, 6347, 6348, 6349, 6350, 6372, 6373, 6374, 6375, 6376, 6392, 6406, 6418, 6419, 6420, 6421, 6422, 6439, 6440, 6441, 6442, 6443, 6444, 6445, 6446, 6447, 6448, 6469, 6470, 6471, 6472, 6473, 6474, 6475, 6476, 6477, 6478, 6500, 6501, 6502, 6503, 6504, 6520, 6534, 6546, 6547, 6548, 6549, 6550, 6567, 6568, 6569, 6570, 6571, 6572, 6573, 6574, 6575, 6576, 6597, 6598, 6599, 6600, 6601, 6602, 6603, 6604, 6605, 6606, 6628, 6629, 6630, 6631, 6632, 6648, 6662, 6674, 6675, 6676, 6677, 6678, 6695, 6696, 6697, 6698, 6699, 6700, 6701, 6702, 6703, 6704, 6725, 6726, 6727, 6728, 6729, 6730, 6731, 6732, 6733, 6734, 6756, 6757, 6758, 6759, 6760, 6776, 6790, 6802, 6803, 6804, 6805, 6806, 6823, 6824, 6825, 6826, 6827, 6828, 6829, 6830, 6831, 6832, 6853, 6854, 6855, 6856, 6857, 6858, 6859, 6860, 6861, 6862, 6884, 6885, 6886, 6887, 6888, 6904, 6918, 6930, 6931, 6932, 6933, 6934, 6951, 6952, 6953, 6954, 6955, 6956, 6957, 6958, 6959, 6960, 6981, 6982, 6983, 6984, 6985, 6986, 6987, 6988, 6989, 6990, 7012, 7013, 7014, 7015, 7016, 7032, 7046, 7058, 7059, 7060, 7061, 7062, 7079, 7080, 7081, 7082, 7083, 7084, 7085, 7086, 7087, 7088, 7109, 7110, 7111, 7112, 7113, 7114, 7115, 7116, 7117, 7118, 7140, 7141, 7142, 7143, 7144, 7160, 7174, 7186, 7187, 7188, 7189, 7190, 7207, 7208, 7209, 7210, 7211, 7212, 7213, 7214, 7215, 7216, 7237, 7238, 7239, 7240, 7241, 7242, 7243, 7244, 7245, 7246, 7268, 7269, 7270, 7271, 7272, 7288, 7302, 7314, 7315, 7316, 7317, 7318, 7335, 7336, 7337, 7338, 7339, 7340, 7341, 7342, 7343, 7344, 7365, 7366, 7367, 7368, 7369, 7370, 7371, 7372, 7373, 7374, 7396, 7397, 7398, 7399, 7400, 7416, 7430, 7442, 7443, 7444, 7445, 7446, 7463, 7464, 7465, 7466, 7467, 7468, 7469, 7470, 7471, 7472, 7493, 7494, 7495, 7496, 7497, 7498, 7499, 7500, 7501, 7502, 7524, 7525, 7526, 7527, 7528, 7544, 8839, 8855, 8856, 8857, 8858, 8859, 8881, 8882, 8883, 8884, 8885, 8886, 8887, 8888, 8889, 8890, 8911, 8912, 8913, 8914, 8915, 8916, 8917, 8918, 8919, 8920, 8937, 8938, 8939, 8940, 8941, 8953, 8967, 8983, 8984, 8985, 8986, 8987, 9009, 9010, 9011, 9012, 9013, 9014, 9015, 9016, 9017, 9018, 9039, 9040, 9041, 9042, 9043, 9044, 9045, 9046, 9047, 9048, 9065, 9066, 9067, 9068, 9069, 9081, 9095, 9111, 9112, 9113, 9114, 9115, 9137, 9138, 9139, 9140, 9141, 9142, 9143, 9144, 9145, 9146, 9167, 9168, 9169, 9170, 9171, 9172, 9173, 9174, 9175, 9176, 9193, 9194, 9195, 9196, 9197, 9209, 9223, 9239, 9240, 9241, 9242, 9243, 9265, 9266, 9267, 9268, 9269, 9270, 9271, 9272, 9273, 9274, 9295, 9296, 9297, 9298, 9299, 9300, 9301, 9302, 9303, 9304, 9321, 9322, 9323, 9324, 9325, 9337, 9351, 9367, 9368, 9369, 9370, 9371, 9393, 9394, 9395, 9396, 9397, 9398, 9399, 9400, 9401, 9402, 9423, 9424, 9425, 9426, 9427, 9428, 9429, 9430, 9431, 9432, 9449, 9450, 9451, 9452, 9453, 9465, 9479, 9495, 9496, 9497, 9498, 9499, 9521, 9522, 9523, 9524, 9525, 9526, 9527, 9528, 9529, 9530, 9551, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560, 9577, 9578, 9579, 9580, 9581, 9593, 9607, 9623, 9624, 9625, 9626, 9627, 9649, 9650, 9651, 9652, 9653, 9654, 9655, 9656, 9657, 9658, 9679, 9680, 9681, 9682, 9683, 9684, 9685, 9686, 9687, 9688, 9705, 9706, 9707, 9708, 9709, 9721, 9735, 9751, 9752, 9753, 9754, 9755, 9777, 9778, 9779, 9780, 9781, 9782, 9783, 9784, 9785, 9786, 9807, 9808, 9809, 9810, 9811, 9812, 9813, 9814, 9815, 9816, 9833, 9834, 9835, 9836, 9837, 9849, 9863, 9879, 9880, 9881, 9882, 9883, 9905, 9906, 9907, 9908, 9909, 9910, 9911, 9912, 9913, 9914, 9935, 9936, 9937, 9938, 9939, 9940, 9941, 9942, 9943, 9944, 9961, 9962, 9963, 9964, 9965, 9977, 9991, 10007, 10008, 10009, 10010, 10011, 10033, 10034, 10035, 10036, 10037, 10038, 10039, 10040, 10041, 10042, 10063, 10064, 10065, 10066, 10067, 10068, 10069, 10070, 10071, 10072, 10089, 10090, 10091, 10092, 10093, 10105, 10118, 10130, 10131, 10132, 10133, 10134, 10151, 10152, 10153, 10154, 10155, 10156, 10157, 10158, 10159, 10160, 10181, 10182, 10183, 10184, 10185, 10186, 10187, 10188, 10189, 10190, 10212, 10213, 10214, 10215, 10216, 10232, 10246, 10258, 10259, 10260, 10261, 10262, 10279, 10280, 10281, 10282, 10283, 10284, 10285, 10286, 10287, 10288, 10309, 10310, 10311, 10312, 10313, 10314, 10315, 10316, 10317, 10318, 10340, 10341, 10342, 10343, 10344, 10360, 10374, 10386, 10387, 10388, 10389, 10390, 10407, 10408, 10409, 10410, 10411, 10412, 10413, 10414, 10415, 10416, 10437, 10438, 10439, 10440, 10441, 10442, 10443, 10444, 10445, 10446, 10468, 10469, 10470, 10471, 10472, 10488, 10502, 10514, 10515, 10516, 10517, 10518, 10535, 10536, 10537, 10538, 10539, 10540, 10541, 10542, 10543, 10544, 10565, 10566, 10567, 10568, 10569, 10570, 10571, 10572, 10573, 10574, 10596, 10597, 10598, 10599, 10600, 10616, 10630, 10642, 10643, 10644, 10645, 10646, 10663, 10664, 10665, 10666, 10667, 10668, 10669, 10670, 10671, 10672, 10693, 10694, 10695, 10696, 10697, 10698, 10699, 10700, 10701, 10702, 10724, 10725, 10726, 10727, 10728, 10744, 10758, 10770, 10771, 10772, 10773, 10774, 10791, 10792, 10793, 10794, 10795, 10796, 10797, 10798, 10799, 10800, 10821, 10822, 10823, 10824, 10825, 10826, 10827, 10828, 10829, 10830, 10852, 10853, 10854, 10855, 10856, 10872, 10886, 10898, 10899, 10900, 10901, 10902, 10919, 10920, 10921, 10922, 10923, 10924, 10925, 10926, 10927, 10928, 10949, 10950, 10951, 10952, 10953, 10954, 10955, 10956, 10957, 10958, 10980, 10981, 10982, 10983, 10984, 11000, 11014, 11026, 11027, 11028, 11029, 11030, 11047, 11048, 11049, 11050, 11051, 11052, 11053, 11054, 11055, 11056, 11077, 11078, 11079, 11080, 11081, 11082, 11083, 11084, 11085, 11086, 11108, 11109, 11110, 11111, 11112, 11128, 11142, 11154, 11155, 11156, 11157, 11158, 11175, 11176, 11177, 11178, 11179, 11180, 11181, 11182, 11183, 11184, 11205, 11206, 11207, 11208, 11209, 11210, 11211, 11212, 11213, 11214, 11236, 11237, 11238, 11239, 11240, 11256, 11270, 11282, 11283, 11284, 11285, 11286, 11303, 11304, 11305, 11306, 11307, 11308, 11309, 11310, 11311, 11312, 11333, 11334, 11335, 11336, 11337, 11338, 11339, 11340, 11341, 11342, 11364, 11365, 11366, 11367, 11368, 11384, 12807, 12823, 12824, 12825, 12826, 12827, 12849, 12850, 12851, 12852, 12853, 12854, 12855, 12856, 12857, 12858, 12879, 12880, 12881, 12882, 12883, 12884, 12885, 12886, 12887, 12888, 12905, 12906, 12907, 12908, 12909, 12921, 12935, 12951, 12952, 12953, 12954, 12955, 12977, 12978, 12979, 12980, 12981, 12982, 12983, 12984, 12985, 12986, 13007, 13008, 13009, 13010, 13011, 13012, 13013, 13014, 13015, 13016, 13033, 13034, 13035, 13036, 13037, 13049, 13063, 13079, 13080, 13081, 13082, 13083, 13105, 13106, 13107, 13108, 13109, 13110, 13111, 13112, 13113, 13114, 13135, 13136, 13137, 13138, 13139, 13140, 13141, 13142, 13143, 13144, 13161, 13162, 13163, 13164, 13165, 13177, 13191, 13207, 13208, 13209, 13210, 13211, 13233, 13234, 13235, 13236, 13237, 13238, 13239, 13240, 13241, 13242, 13263, 13264, 13265, 13266, 13267, 13268, 13269, 13270, 13271, 13272, 13289, 13290, 13291, 13292, 13293, 13305, 13319, 13335, 13336, 13337, 13338, 13339, 13361, 13362, 13363, 13364, 13365, 13366, 13367, 13368, 13369, 13370, 13391, 13392, 13393, 13394, 13395, 13396, 13397, 13398, 13399, 13400, 13417, 13418, 13419, 13420, 13421, 13433, 13446, 13458, 13459, 13460, 13461, 13462, 13479, 13480, 13481, 13482, 13483, 13484, 13485, 13486, 13487, 13488, 13509, 13510, 13511, 13512, 13513, 13514, 13515, 13516, 13517, 13518, 13540, 13541, 13542, 13543, 13544, 13560, 13574, 13586, 13587, 13588, 13589, 13590, 13607, 13608, 13609, 13610, 13611, 13612, 13613, 13614, 13615, 13616, 13637, 13638, 13639, 13640, 13641, 13642, 13643, 13644, 13645, 13646, 13668, 13669, 13670, 13671, 13672, 13688, 13702, 13714, 13715, 13716, 13717, 13718, 13735, 13736, 13737, 13738, 13739, 13740, 13741, 13742, 13743, 13744, 13765, 13766, 13767, 13768, 13769, 13770, 13771, 13772, 13773, 13774, 13796, 13797, 13798, 13799, 13800, 13816, 13830, 13842, 13843, 13844, 13845, 13846, 13863, 13864, 13865, 13866, 13867, 13868, 13869, 13870, 13871, 13872, 13893, 13894, 13895, 13896, 13897, 13898, 13899, 13900, 13901, 13902, 13924, 13925, 13926, 13927, 13928, 13944, 13958, 13970, 13971, 13972, 13973, 13974, 13991, 13992, 13993, 13994, 13995, 13996, 13997, 13998, 13999, 14000, 14021, 14022, 14023, 14024, 14025, 14026, 14027, 14028, 14029, 14030, 14052, 14053, 14054, 14055, 14056, 14072, 15367, 15383, 15384, 15385, 15386, 15387, 15409, 15410, 15411, 15412, 15413, 15414, 15415, 15416, 15417, 15418, 15439, 15440, 15441, 15442, 15443, 15444, 15445, 15446, 15447, 15448, 15465, 15466, 15467, 15468, 15469, 15481, 15494, 15506, 15507, 15508, 15509, 15510, 15527, 15528, 15529, 15530, 15531, 15532, 15533, 15534, 15535, 15536, 15557, 15558, 15559, 15560, 15561, 15562, 15563, 15564, 15565, 15566, 15588, 15589, 15590, 15591, 15592, 15608, -1,
0, 129, 258, 387, 516, 645, 774, 903, 1032, 1161, 1290, 1419, 1548, 1677, 1806, 1935, 2064, 2193, 2322, 2451, 2580, 2709, 2838, 2967, 3096, 3225, 3354, 3483, 3612, 3741, 3870, 3999, 4128, 4257, 4386, 4515, 4644, 4773, 4902, 5031, 5160, 5289, 5418, 5547, 5676, 5805, 5934, 6063, 6192, 6321, 6450, 6579, 6708, 6837, 6966, 7095, 7224, 7353, 7482, 7611, 7740, 7869, 7998, 8127, 8256, 8385, 8514, 8643, 8772, 8901, 9030, 9159, 9288, 9417, 9546, 9675, 9804, 9933, 10062, 10191, 10320, 10449, 10578, 10707, 10836, 10965, 11094, 11223, 11352, 11481, 11610, 11739, 11868, 11997, 12126, 12255, 12384, 12513, 12642, 12771, 12900, 13029, 13158, 13287, 13416, 13545, 13674, 13803, 13932, 14061, 14190, 14319, 14448, 14577, 14706, 14835, 14964, 15093, 15222, 15351, 15480, 15609, 15738, 15867, 15996, 16125, 16254, 16383, -1,
1, 128, 264, 393, 523, 654, 786, 919, 1026, 1155, 1309, 1412, 1566, 1695, 1797, 1953, 2082, 2212, 2310, 2471, 2600, 2730, 2861, 2951, 3121, 3250, 3380, 3511, 3643, 3722, 3852, 3981, 4160, 4239, 4368, 4545, 4625, 4802, 4931, 5011, 5140, 5317, 5397, 5574, 5703, 5782, 5961, 6090, 6220, 6296, 6425, 6607, 6682, 6864, 6993, 7067, 7251, 7380, 7510, 7580, 7769, 7898, 8028, 8159, 8224, 8355, 8485, 8614, 8803, 8873, 9003, 9132, 9316, 9390, 9519, 9701, 9776, 9958, 10087, 10163, 10293, 10422, 10601, 10680, 10809, 10986, 11066, 11243, 11372, 11452, 11581, 11758, 11838, 12015, 12144, 12223, 12402, 12531, 12661, 12740, 12872, 13003, 13133, 13262, 13432, 13522, 13653, 13783, 13912, 14073, 14171, 14301, 14430, 14586, 14688, 14817, 14971, 15074, 15228, 15357, 15464, 15597, 15729, 15860, 15990, 16119, 16255, 16382, -1,
2, 16520, 256, 394, 524, 655, 787, 920, 17409, 17565, 1283, 17822, 1540, 1696, 18209, 1925, 2083, 2213, 18727, 2438, 2601, 2731, 2862, 19377, 3079, 3251, 3381, 3512, 3644, 20105, 20235, 20416, 4109, 20622, 20801, 4496, 21058, 4753, 4932, 21394, 21573, 5268, 21830, 5525, 5704, 22217, 5910, 6091, 6221, 22679, 22863, 6553, 23120, 6810, 6994, 23507, 7195, 7381, 7511, 24025, 7708, 7899, 8029, 8160, 24607, 24738, 24868, 25059, 8742, 25256, 25386, 25572, 9260, 25773, 25957, 9647, 26214, 9904, 10088, 26546, 26676, 26857, 10550, 27063, 27242, 10937, 27499, 11194, 11373, 27835, 28014, 11709, 28271, 11966, 12145, 28658, 12351, 12532, 12662, 29123, 29255, 29386, 29516, 29688, 13390, 29905, 30036, 30166, 30329, 14040, 30554, 30684, 30842, 14558, 31071, 31227, 14945, 31484, 15202, 15358, 31847, 31980, 32112, 32243, 32373, 32511, 16247, 32765, -1,
3, 16521, 16650, 384, 525, 656, 788, 921, 1053, 17537, 17666, 17823, 17952, 1668, 18210, 18339, 2053, 2214, 18728, 18857, 2566, 2732, 2863, 19378, 19507, 3207, 3382, 3513, 3645, 3720, 3904, 20363, 20492, 4289, 20750, 20879, 21059, 21188, 4881, 5061, 21522, 21651, 21831, 21960, 5653, 22218, 22347, 6038, 6222, 6351, 22807, 22936, 23121, 23250, 6938, 23508, 23637, 7323, 7512, 24026, 24155, 7836, 8030, 8161, 8222, 8353, 8547, 24996, 25125, 8871, 9060, 25514, 25643, 9445, 25901, 26030, 26215, 26344, 10032, 10161, 10345, 26804, 26933, 10730, 27191, 27320, 27500, 27629, 11322, 11502, 27963, 28092, 28272, 28401, 12094, 28659, 28788, 12479, 12663, 12738, 12870, 13001, 13176, 29644, 29773, 13520, 13651, 13817, 30294, 30423, 14169, 14330, 30812, 30941, 14715, 31199, 31328, 31485, 31614, 15330, 15462, 15595, 15727, 15858, 15999, 32501, 32630, 16380, -1,
4, 16523, 16652, 16781, 512, 657, 789, 922, 1054, 1183, 1312, 17793, 17922, 18051, 18212, 18341, 18470, 2181, 18730, 18859, 18988, 2694, 2864, 19380, 19509, 19638, 3335, 3514, 3646, 20160, 3848, 3977, 4106, 4290, 4419, 4548, 21006, 21135, 21264, 5062, 5191, 5320, 21778, 21907, 22036, 22220, 22349, 22478, 6166, 6352, 6481, 6610, 23063, 23192, 23321, 23510, 23639, 23768, 7451, 24028, 24157, 24286, 7964, 8162, 24605, 24803, 8481, 8610, 8739, 25316, 8999, 9128, 9257, 9446, 9575, 9704, 26157, 26286, 26415, 26601, 10289, 10418, 10547, 10731, 10860, 10989, 27447, 27576, 27705, 11503, 11632, 11761, 28219, 28348, 28477, 28661, 28790, 28919, 12607, 29121, 29253, 29432, 13129, 13258, 13387, 29903, 30073, 13779, 13908, 14037, 30586, 14297, 14426, 14555, 14716, 14845, 14974, 31455, 31584, 31713, 31845, 31978, 32110, 32255, 15986, 16115, 16244, 32763, -1,
5, 16526, 16655, 16784, 16913, 640, 790, 923, 1057, 1186, 1315, 1444, 1573, 1702, 18177, 18306, 18435, 18564, 18733, 18862, 18991, 19120, 2822, 19383, 19512, 19641, 19770, 3463, 3647, 20161, 20290, 20419, 20548, 4232, 4361, 4490, 4619, 4748, 4877, 5065, 5194, 5323, 5452, 5581, 5710, 22162, 22291, 22420, 22549, 6355, 6484, 6613, 6742, 6871, 7000, 23447, 23576, 23705, 23834, 24031, 24160, 24289, 24418, 8092, 8291, 24733, 24862, 24991, 25120, 25317, 25446, 25575, 25704, 9383, 9512, 9641, 9770, 9899, 10028, 26602, 26731, 26860, 26989, 10673, 10802, 10931, 11060, 11189, 11318, 11506, 11635, 11764, 11893, 12022, 12151, 28603, 28732, 28861, 28990, 12736, 12920, 29381, 29510, 29639, 29768, 13561, 30031, 30160, 30289, 30418, 30587, 30716, 30845, 30974, 14681, 14810, 14939, 15068, 15197, 15326, 15460, 15593, 15743, 32238, 32367, 32496, 32625, 16378, -1,
16391, 151, 280, 409, 538, 667, 768, 796, 17457, 17586, 17715, 17844, 17973, 18102, 18231, 18360, 18489, 18618, 18689, 18747, 18818, 18876, 18947, 19005, 19076, 19134, 19205, 19263, 3591, 3791, 3920, 4049, 4178, 4307, 4436, 4565, 4694, 4823, 4952, 5000, 5081, 5129, 5210, 5258, 5339, 5387, 5468, 5516, 5597, 5645, 5726, 5774, 5855, 5903, 5984, 6032, 6113, 6161, 6242, 23959, 24088, 24217, 24346, 24475, 24681, 24810, 24939, 25068, 25197, 25245, 25326, 25374, 25455, 25503, 25584, 25632, 25713, 25761, 25842, 25890, 25971, 26019, 26100, 26148, 26229, 26277, 26358, 26406, 26487, 11441, 11570, 11699, 11828, 11957, 12086, 12215, 12344, 12473, 12602, 12793, 12864, 12922, 12993, 13051, 13122, 13180, 13251, 13309, 13380, 13438, 30543, 30672, 30801, 30930, 31059, 31188, 31317, 31446, 31575, 31704, 31843, 31871, 15721, 15850, 15979, 16108, 16237, 32761, -1,
16390, 146, 275, 404, 533, 662, 896, 17308, 17447, 17576, 17705, 17834, 17963, 18092, 18221, 18350, 18479, 18608, 19329, 3003, 19458, 3132, 19587, 3261, 19716, 3390, 19845, 3519, 19974, 3781, 3910, 4039, 4168, 4297, 4426, 4555, 4684, 4813, 4942, 6280, 22745, 6409, 22874, 6538, 23003, 6667, 23132, 6796, 23261, 6925, 23390, 7054, 23519, 7183, 23648, 7312, 23777, 7441, 23906, 7570, 7699, 7828, 7957, 8086, 24676, 24805, 24934, 25063, 25192, 26525, 10222, 26654, 10351, 26783, 10480, 26912, 10609, 27041, 10738, 27170, 10867, 27299, 10996, 27428, 11125, 27557, 11254, 27686, 11383, 27815, 27944, 28073, 28202, 28331, 28460, 28589, 28718, 28847, 28976, 12792, 13504, 29946, 13633, 30075, 13762, 30204, 13891, 30333, 14020, 30462, 14149, 14278, 14407, 14536, 14665, 14794, 14923, 15052, 15181, 15310, 31971, 15615, 32100, 32229, 32358, 32487, 32616, 16376, -1,
16392, 130, 16641, 16797, 16926, 17057, 17191, 17329, 1024, 1162, 17673, 1420, 17931, 18112, 1807, 18318, 18497, 18626, 2323, 18834, 19013, 19142, 19273, 2968, 19479, 19663, 19792, 19923, 20057, 3715, 3844, 4000, 20511, 4229, 4387, 20898, 4645, 21156, 21347, 4998, 5161, 21672, 5419, 21930, 22116, 5806, 22317, 22501, 22630, 6279, 6451, 22962, 6709, 23220, 23401, 7096, 23607, 23786, 23915, 7612, 24123, 24302, 24431, 24562, 8205, 8336, 8465, 8644, 25155, 8852, 8981, 9160, 25671, 9366, 9547, 26058, 9805, 26316, 26488, 10137, 10266, 10450, 26961, 10651, 10837, 27348, 11095, 27606, 27769, 11420, 11611, 28122, 11869, 28380, 28538, 12256, 28767, 28923, 29052, 12710, 12844, 12975, 13104, 13288, 29799, 13494, 13625, 13754, 13933, 30444, 14141, 14270, 14449, 30960, 14655, 14836, 31347, 15094, 31605, 31743, 15438, 15576, 15710, 15841, 15970, 16126, 32637, 16375, -1,
16393, 131, 285, 16769, 16927, 17058, 17192, 17330, 17418, 1152, 1288, 1421, 1600, 18059, 1808, 1985, 18446, 18627, 2324, 2501, 18962, 19143, 19274, 2969, 3151, 19607, 19793, 19924, 20058, 20098, 20256, 3972, 4126, 20643, 4357, 4513, 4646, 4835, 21284, 21417, 5126, 5287, 5420, 5604, 22058, 5807, 5989, 22445, 22631, 22707, 6407, 6577, 6710, 6889, 23348, 7097, 7274, 23735, 23916, 7613, 7790, 24251, 24432, 24563, 24588, 24719, 24900, 8593, 8770, 25235, 25416, 9109, 9286, 25803, 9494, 9673, 9806, 9976, 26444, 26520, 26706, 10394, 10576, 27093, 10779, 10963, 11096, 11257, 27734, 27867, 11548, 11737, 11870, 12026, 28508, 12257, 12411, 28895, 29053, 29093, 29227, 29358, 29544, 13232, 13414, 29877, 30008, 30189, 13882, 14059, 30524, 30705, 14398, 14575, 31092, 14783, 14962, 15095, 15231, 31733, 31821, 31959, 32093, 32224, 32382, 16098, 16252, 32758, -1,
16394, 16541, 259, 16770, 16928, 17059, 17193, 17331, 1033, 17544, 1280, 17856, 1549, 18060, 18241, 1936, 18447, 18628, 18757, 2452, 18963, 19144, 19275, 19407, 3097, 19608, 19794, 19925, 20059, 3713, 3871, 20382, 4100, 4258, 20769, 4485, 21091, 4774, 21285, 5032, 21543, 5254, 21860, 5548, 22059, 22245, 5935, 22446, 22632, 6322, 22833, 6535, 23145, 6838, 23349, 23530, 7225, 23736, 23917, 24046, 7741, 24252, 24433, 24564, 8203, 8334, 8515, 25026, 8721, 8850, 9031, 25542, 9237, 9418, 25929, 9622, 26232, 9934, 26445, 10135, 10321, 26832, 10522, 10708, 27219, 10907, 27513, 11224, 27735, 11482, 27993, 11676, 28282, 11998, 28509, 28667, 12385, 28896, 29054, 12708, 12842, 12973, 13159, 29670, 13360, 13492, 13623, 13804, 30315, 14010, 14139, 14320, 30831, 14526, 14707, 31218, 14911, 31487, 15223, 31734, 15436, 15574, 15708, 15839, 15997, 32508, 16226, 16373, -1,
16395, 132, 286, 415, 16897, 17060, 17194, 17332, 17420, 17549, 17728, 1408, 1544, 1673, 1809, 1986, 2115, 18574, 2325, 2502, 2631, 19090, 19276, 2970, 3152, 3281, 19735, 19926, 20060, 3744, 20226, 20355, 20509, 20645, 20774, 20963, 4613, 4769, 4898, 21419, 21548, 21732, 5382, 5543, 5672, 5808, 5990, 6119, 22573, 22709, 22838, 23017, 6663, 6833, 6962, 7098, 7275, 7404, 23863, 7614, 7791, 7920, 24379, 24565, 8202, 8388, 24847, 24976, 25153, 8904, 25363, 25492, 25669, 25805, 25934, 26104, 9750, 9929, 10058, 10194, 26648, 26777, 26959, 27095, 27224, 27385, 11035, 11219, 11348, 27869, 27998, 28154, 11804, 11993, 12122, 12258, 12412, 12541, 29023, 12707, 12841, 13032, 29486, 29615, 29797, 13491, 13677, 30136, 30265, 30442, 14193, 30652, 30781, 30958, 31094, 31223, 31359, 15039, 15218, 15347, 15435, 15573, 15707, 15870, 32352, 32481, 32635, 16372, -1,
16396, 16542, 260, 416, 16898, 17061, 17195, 17333, 1035, 1216, 17677, 17800, 1536, 1674, 18242, 1937, 2116, 18575, 18758, 2453, 2632, 19091, 19277, 19408, 3098, 3282, 19736, 19927, 20061, 20127, 3841, 3997, 20483, 4260, 4451, 20902, 21025, 4741, 4899, 5034, 5220, 21676, 21799, 5510, 5673, 22246, 5936, 6120, 22574, 6324, 6505, 22966, 23089, 6791, 6963, 23531, 7226, 7405, 23864, 24047, 7742, 7921, 24380, 24566, 24585, 24771, 8462, 8641, 25104, 25287, 8978, 9157, 25620, 9420, 9592, 26062, 26185, 9878, 10059, 26577, 10263, 10447, 26905, 10710, 10873, 27352, 27475, 11163, 11349, 11484, 11642, 28126, 28249, 11932, 12123, 28668, 12386, 12542, 29024, 29090, 29224, 29415, 13101, 13285, 29743, 29874, 30060, 13751, 13930, 30393, 30576, 14267, 14446, 30909, 14709, 14847, 31351, 31474, 15167, 15348, 31818, 31956, 32090, 32253, 15967, 16123, 32609, 32755, -1,
16397, 16543, 16672, 388, 16899, 17062, 17196, 17334, 17472, 1163, 1292, 17801, 17930, 1664, 18243, 18372, 2065, 18576, 18759, 18888, 2581, 19092, 19278, 19409, 19538, 3226, 19737, 19928, 20062, 3742, 20253, 3969, 4098, 20707, 4388, 4517, 21026, 21155, 4869, 21476, 5162, 5291, 21800, 21929, 5638, 22247, 22376, 6064, 22575, 22761, 6452, 6581, 23090, 23219, 6919, 23532, 23661, 7354, 23865, 24048, 24177, 7870, 24381, 24567, 8200, 8386, 24897, 8590, 8719, 8902, 25413, 9106, 9235, 25848, 9548, 9677, 26186, 26315, 10006, 10192, 26703, 10391, 10520, 27129, 10838, 10967, 27476, 27605, 11291, 27898, 11612, 11741, 28250, 28379, 12060, 28669, 28798, 12514, 29025, 12705, 12839, 13030, 29541, 13229, 13358, 13489, 13675, 30186, 13879, 14008, 14191, 30702, 14395, 14524, 31103, 14837, 14966, 31475, 31604, 15295, 15433, 15571, 15705, 15868, 32379, 16095, 16224, 16370, -1,
16398, 133, 289, 418, 548, 17025, 17197, 17335, 17423, 17552, 17729, 17809, 17986, 18115, 1792, 1928, 2057, 2187, 2326, 2505, 2634, 2764, 19218, 2971, 3155, 3284, 3414, 19863, 20063, 3747, 3877, 4006, 4195, 20610, 20739, 20893, 20996, 21150, 21279, 21422, 21551, 21733, 21808, 21990, 22119, 5766, 5927, 6056, 6186, 22712, 22841, 23018, 23098, 23275, 23404, 7047, 7217, 7346, 7476, 7615, 7794, 7923, 8053, 24507, 24644, 8330, 8460, 8589, 8768, 8907, 9037, 9166, 9336, 25747, 25876, 26053, 26133, 26310, 26439, 10197, 10327, 10456, 10617, 27032, 27161, 27343, 27418, 27600, 27729, 27872, 28001, 28155, 28258, 28412, 28541, 12188, 12377, 12506, 12636, 29088, 29288, 12969, 13099, 13228, 13412, 29933, 13619, 13749, 13878, 14057, 14196, 14326, 14455, 14591, 31036, 31165, 31342, 31422, 31599, 31728, 31816, 31954, 32126, 15835, 15965, 16094, 16250, 32753, -1,
16399, 16545, 261, 419, 549, 17026, 17198, 17336, 1038, 1217, 17680, 1474, 17937, 18116, 18184, 1920, 2058, 2188, 18761, 2454, 2635, 2765, 19219, 19411, 3099, 3285, 3415, 19864, 20064, 20130, 20260, 20451, 4134, 4225, 4381, 20867, 4638, 21124, 21280, 5037, 5221, 21679, 5478, 21936, 22120, 22183, 5894, 6057, 6187, 6327, 6506, 22969, 6763, 23226, 23405, 23473, 7175, 7347, 7477, 24050, 7743, 7924, 8054, 24508, 8259, 24713, 24843, 25024, 8717, 25290, 25420, 25592, 9294, 9362, 9541, 26004, 9798, 26261, 26440, 26580, 26710, 26873, 10584, 10647, 10831, 27289, 11088, 27546, 27730, 11487, 11643, 28129, 11900, 28386, 28542, 28633, 12316, 12507, 12637, 12703, 12903, 29352, 29482, 29668, 13356, 13548, 30002, 30132, 30313, 14006, 30579, 30709, 30847, 14583, 14651, 14830, 31293, 15087, 31550, 31729, 15431, 15569, 15741, 32218, 32348, 32506, 16222, 16368, -1,
16400, 16546, 16675, 389, 550, 17027, 17199, 17337, 17473, 1166, 1295, 1475, 1604, 18065, 18185, 18314, 2048, 2189, 18762, 18891, 2582, 2766, 19220, 19412, 19541, 3227, 3416, 19865, 20065, 3745, 3939, 20388, 20517, 20637, 4353, 4482, 4639, 4768, 21252, 21477, 5165, 5294, 5479, 5608, 22064, 22184, 22313, 6022, 6188, 22762, 6455, 6584, 6764, 6893, 23354, 23474, 23603, 7303, 7478, 24051, 24180, 7871, 8055, 24509, 24642, 8328, 8512, 24971, 25100, 8905, 9080, 25548, 25677, 25797, 9490, 9619, 9799, 9928, 26389, 10195, 10361, 26838, 26967, 27087, 10775, 10904, 11089, 11218, 27674, 27899, 11615, 11744, 11901, 12030, 28514, 28634, 28763, 12444, 12638, 29086, 29286, 12967, 13156, 29610, 29739, 29931, 13617, 13801, 30260, 30389, 14194, 14335, 30837, 30966, 31086, 14779, 14908, 15088, 15217, 31678, 31814, 31952, 32124, 15833, 15994, 32476, 32605, 32751, -1,
16401, 16548, 16677, 16806, 517, 17028, 17200, 17338, 17474, 17603, 17732, 1422, 1551, 1680, 18187, 18316, 18445, 2176, 18764, 18893, 19022, 2710, 19221, 19414, 19543, 19672, 3355, 19866, 20066, 20195, 3873, 4002, 4131, 20638, 20767, 20896, 4609, 4738, 4867, 21478, 21607, 21736, 5421, 5550, 5679, 22186, 22315, 22444, 6150, 22763, 22892, 23021, 6711, 6840, 6969, 23476, 23605, 23734, 7431, 24053, 24182, 24311, 7999, 24510, 8257, 24768, 8456, 8585, 8714, 25336, 9033, 9162, 9291, 25798, 25927, 26056, 9746, 9875, 10004, 26617, 10323, 10452, 10581, 27088, 27217, 27346, 11031, 11160, 11289, 27900, 28029, 28158, 11871, 12000, 12129, 28636, 28765, 28894, 12572, 12701, 12901, 29412, 13095, 13224, 13353, 13546, 30057, 13745, 13874, 14003, 30591, 14322, 14451, 14580, 31087, 31216, 31345, 15035, 15164, 15293, 15429, 15567, 15739, 32250, 15961, 16090, 16219, 16366, -1,
23, 16519, 16689, 16818, 16948, 17079, 17153, 17211, 1048, 1177, 1359, 1434, 1616, 1745, 1819, 2003, 2132, 2262, 2304, 2332, 2440, 2521, 2569, 2650, 2699, 2780, 2830, 2911, 19991, 20147, 20277, 20406, 20585, 20664, 20793, 20970, 21050, 21227, 21356, 21378, 21436, 21507, 21565, 21661, 21742, 21764, 21822, 21918, 21999, 22047, 22128, 22149, 22207, 22305, 22386, 22434, 22515, 22564, 22645, 7559, 7729, 7858, 7988, 8119, 8274, 8405, 8535, 8664, 8825, 8842, 8923, 8972, 9053, 9101, 9182, 9280, 9338, 9359, 9440, 9488, 9569, 9665, 9723, 9745, 9826, 9922, 9980, 10051, 10109, 27800, 27929, 28111, 28186, 28368, 28497, 28571, 28755, 28884, 29014, 29165, 29216, 29297, 29347, 29428, 29477, 29558, 29606, 29687, 29795, 29823, 14131, 14261, 14390, 14569, 14648, 14777, 14954, 15034, 15211, 15340, 15428, 15486, 32082, 32213, 32343, 32472, 32633, 16365, -1,
24, 177, 16647, 16819, 16949, 17080, 17154, 17212, 17431, 17615, 1305, 17872, 1562, 1746, 18259, 1947, 2133, 2263, 18696, 18777, 2432, 2460, 2570, 2651, 2700, 2781, 2831, 2912, 19992, 3762, 3892, 4073, 20534, 4279, 4458, 20921, 4715, 21178, 21357, 4993, 5051, 5149, 5230, 21635, 21693, 5406, 5487, 21892, 21950, 22048, 22129, 5793, 5874, 22277, 22335, 22435, 22516, 22565, 22646, 23985, 7687, 7859, 7989, 8120, 24657, 24788, 24918, 25081, 8792, 25225, 25306, 25355, 25436, 25536, 25594, 9229, 9310, 25742, 25823, 25921, 25979, 9616, 9697, 26178, 26236, 9873, 9954, 10052, 10110, 11415, 11599, 28057, 11856, 28314, 28498, 12243, 28699, 28885, 29015, 12780, 12831, 12912, 12962, 13043, 13092, 13173, 13283, 13311, 29734, 29815, 30514, 30644, 30825, 14518, 31031, 31210, 14905, 31467, 15162, 15341, 31811, 31869, 15697, 15828, 15958, 16121, 32600, 32748, -1,
25, 178, 307, 16775, 16950, 17081, 17155, 17213, 1103, 17559, 17688, 17873, 18002, 1690, 18260, 18389, 2075, 2264, 18697, 18778, 18826, 18907, 2560, 2588, 2701, 2782, 2832, 2913, 19993, 20145, 20329, 4020, 4149, 20714, 4407, 4536, 4716, 4845, 21306, 21405, 21486, 5121, 5179, 5250, 5308, 5407, 5488, 5536, 5617, 22020, 22078, 5794, 5875, 5923, 6004, 22405, 22463, 22566, 22647, 23986, 24115, 7815, 7990, 8121, 8272, 8403, 8569, 25046, 25175, 8840, 8921, 9024, 9082, 25483, 25564, 25612, 25693, 9409, 9467, 25870, 25951, 25999, 26080, 26179, 26237, 26308, 26366, 10001, 10082, 27855, 11543, 11672, 11857, 11986, 28442, 12244, 12373, 28827, 29016, 29163, 29214, 29295, 29345, 29426, 29539, 29567, 13220, 13301, 13349, 13430, 14129, 14313, 30772, 30901, 14698, 31159, 31288, 31468, 31597, 15290, 15426, 15484, 32080, 32211, 32377, 16086, 16215, 16363, -1,
26, 180, 309, 438, 16903, 17082, 17156, 17214, 1104, 1233, 1362, 17815, 17944, 18073, 18262, 18391, 18520, 2203, 18699, 18780, 18828, 18909, 18957, 19038, 2688, 2716, 2833, 2914, 19994, 3817, 20273, 20402, 20531, 20715, 20844, 20973, 4663, 4792, 4921, 21406, 21487, 21535, 21616, 21664, 21745, 5377, 5435, 5506, 5564, 5635, 5693, 5796, 5877, 5925, 6006, 6054, 6135, 22533, 22591, 23988, 24117, 24246, 7943, 8122, 24655, 24825, 8531, 8660, 8789, 25280, 25338, 8968, 9049, 9097, 9178, 9226, 9307, 9410, 9468, 9539, 9597, 9668, 9726, 26126, 26207, 26255, 26336, 26384, 26465, 27856, 27985, 28114, 11799, 11928, 12057, 12246, 12375, 12504, 28955, 12778, 12829, 12910, 13027, 13055, 29473, 29554, 29602, 29683, 29731, 29812, 30569, 14257, 14386, 14515, 14699, 14828, 14957, 31415, 31544, 31673, 31809, 31867, 15695, 15865, 32339, 32468, 32597, 32746, -1,
27, 183, 312, 441, 570, 17031, 17157, 17215, 1107, 1236, 1365, 1494, 1623, 1752, 18199, 18328, 18457, 18586, 18702, 18783, 18831, 18912, 18960, 19041, 19089, 19170, 2816, 2844, 19995, 3818, 3947, 4076, 4205, 20657, 20786, 20915, 21044, 21173, 21302, 21409, 21490, 21538, 21619, 21667, 21748, 21796, 21877, 21925, 22006, 22054, 22135, 5761, 5819, 5890, 5948, 6019, 6077, 6148, 6206, 23991, 24120, 24249, 24378, 8071, 8313, 24783, 24912, 25041, 25170, 25281, 25339, 25410, 25468, 25539, 25597, 25668, 25726, 9352, 9433, 9481, 9562, 9610, 9691, 9739, 9820, 9868, 9949, 9997, 10078, 27859, 27988, 28117, 28246, 28375, 28504, 12183, 12312, 12441, 12570, 29161, 29283, 29311, 12957, 13038, 13086, 13167, 13215, 13296, 13344, 13425, 30570, 30699, 30828, 30957, 14641, 14770, 14899, 15028, 15157, 15286, 15424, 15482, 32121, 15823, 15952, 16081, 16210, 16361, -1,
18, 16518, 16679, 16808, 16938, 17069, 17281, 955, 1043, 1172, 1349, 1429, 1606, 1735, 1814, 1993, 2122, 2252, 2944, 19356, 3080, 19545, 3209, 19674, 3339, 19804, 3470, 19935, 3602, 20137, 20267, 20396, 20580, 20654, 20783, 20965, 21040, 21222, 21351, 22658, 6332, 22787, 6461, 22941, 6638, 23044, 6718, 23198, 6895, 23327, 7024, 23429, 7103, 23585, 7282, 23714, 7411, 23844, 7541, 23942, 24103, 24232, 24362, 24493, 8264, 8395, 8525, 8654, 8824, 10122, 26587, 10252, 26717, 10381, 26846, 10560, 27002, 10639, 27104, 10768, 27233, 10945, 27387, 11025, 27490, 11202, 27644, 11331, 27773, 11411, 11540, 11717, 11797, 11974, 12103, 12182, 12361, 12490, 12620, 29160, 29856, 13553, 29987, 13684, 30117, 13814, 30246, 13943, 30435, 14079, 30505, 30635, 30764, 30948, 31022, 31151, 31333, 31408, 31590, 31719, 15556, 31998, 15688, 15819, 15949, 16078, 16248, 32744, -1,
19, 167, 16646, 16809, 16939, 17070, 17282, 956, 17426, 17605, 1300, 17862, 1557, 1736, 18249, 1942, 2123, 2253, 19336, 3033, 3072, 19484, 3210, 19675, 3340, 19805, 3471, 19936, 3603, 3752, 3882, 4068, 20524, 4269, 4453, 20911, 4710, 21168, 21352, 6273, 22715, 6429, 22894, 22915, 6589, 6686, 23151, 23172, 6846, 23328, 7025, 7073, 23538, 23557, 7231, 23715, 7412, 23845, 7542, 7591, 24070, 24233, 24363, 24494, 24647, 24778, 24908, 25080, 8782, 26505, 10202, 26635, 10332, 26816, 10490, 10509, 26974, 27022, 10719, 27201, 10875, 10896, 27361, 27458, 11132, 11153, 27618, 11332, 27774, 27794, 27973, 11668, 28230, 11925, 12104, 28617, 12310, 12491, 12621, 12775, 13471, 29936, 13602, 30067, 13732, 30197, 13923, 30335, 30374, 14071, 14120, 14250, 14436, 30892, 14637, 14821, 31279, 15078, 31536, 31720, 31939, 15613, 32071, 32202, 32332, 32504, 16206, 16359, -1,
20, 168, 297, 16774, 16940, 17071, 17283, 957, 1093, 17554, 17683, 17863, 17992, 1685, 18250, 18379, 2070, 2254, 19337, 3034, 19466, 3163, 3200, 19612, 3341, 19806, 3472, 19937, 3604, 20135, 20324, 4010, 4139, 20709, 4397, 4526, 4711, 4840, 21296, 22685, 6382, 6401, 22843, 6530, 22972, 6687, 23152, 6816, 23281, 23300, 6974, 7074, 23539, 7203, 23668, 23685, 7359, 23846, 7543, 7592, 7721, 24198, 24364, 24495, 8262, 8393, 8568, 25036, 25165, 10120, 26585, 10304, 26746, 26763, 10460, 26892, 10589, 10689, 27131, 27150, 10847, 27279, 10976, 27459, 11133, 27588, 11262, 11281, 27746, 11461, 27922, 28051, 28231, 28360, 12053, 28618, 28747, 12438, 12622, 29158, 29854, 13551, 29985, 13682, 30179, 13823, 13860, 30325, 13989, 30454, 30503, 30692, 14378, 14507, 31077, 14765, 14894, 15079, 15208, 31664, 15554, 31996, 15686, 15817, 15992, 32460, 32589, 32742, -1,
21, 170, 299, 428, 16902, 17072, 17284, 958, 1094, 1223, 1352, 17810, 17939, 18068, 18252, 18381, 18510, 2198, 19339, 3036, 19468, 3165, 19597, 3294, 3328, 19740, 3473, 19938, 3605, 3812, 20263, 20392, 20521, 20710, 20839, 20968, 4653, 4782, 4911, 22686, 6383, 22815, 6512, 22944, 6641, 6657, 23099, 6786, 23228, 6915, 23357, 7076, 23541, 7205, 23670, 7334, 23799, 23813, 7487, 7594, 7723, 7852, 24326, 24496, 24645, 24824, 8521, 8650, 8779, 26560, 10234, 10248, 26713, 10377, 26842, 10506, 26971, 10690, 27132, 10819, 27261, 10948, 27390, 27406, 11103, 27535, 11232, 27664, 11361, 11462, 11591, 11720, 28178, 28307, 28436, 28620, 28749, 28878, 12566, 12773, 13469, 29934, 13667, 30079, 30113, 13810, 30242, 13939, 30371, 14068, 14180, 30631, 30760, 30889, 31078, 31207, 31336, 15021, 15150, 15279, 31937, 15611, 32069, 32248, 15945, 16074, 16203, 16357, -1,
22, 173, 302, 431, 560, 17030, 17285, 959, 1097, 1226, 1355, 1484, 1613, 1742, 18194, 18323, 18452, 18581, 19342, 3039, 19471, 3168, 19600, 3297, 19729, 3426, 3456, 19868, 3606, 3813, 3942, 4071, 4200, 20647, 20776, 20905, 21034, 21163, 21292, 22689, 6386, 22818, 6515, 22947, 6644, 23076, 6773, 23205, 6902, 23334, 7031, 7041, 23483, 7170, 23612, 7299, 23741, 7428, 23870, 7597, 7726, 7855, 7984, 24454, 8312, 24773, 24902, 25031, 25160, 26561, 10235, 26690, 10364, 26819, 10493, 26948, 10622, 10632, 27097, 10761, 27226, 10890, 27355, 11019, 27484, 11148, 27613, 11277, 27742, 11465, 11594, 11723, 11852, 11981, 12110, 28562, 28691, 28820, 28949, 29156, 29923, 13567, 13597, 30062, 13726, 30191, 13855, 30320, 13984, 30449, 14181, 14310, 14439, 14568, 31015, 31144, 31273, 31402, 31531, 31660, 15552, 31994, 15736, 32197, 32326, 32455, 32584, 32740, -1,
28, 187, 316, 445, 574, 703, 49926, 33671, 1113, 1242, 1371, 1500, 1629, 1758, 1887, 2016, 2145, 2274, 51474, 51603, 51732, 51861, 51990, 35735, 35864, 35993, 36122, 36251, 3584, 3822, 3951, 4080, 4209, 4338, 4467, 4596, 4725, 4854, 4983, 54183, 54312, 54441, 54570, 54699, 54828, 54957, 55086, 55215, 55344, 39089, 39218, 39347, 39476, 39605, 39734, 39863, 39992, 40121, 40250, 7553, 7682, 7811, 7940, 8069, 8314, 8443, 8572, 8701, 8830, 58053, 58182, 58311, 58440, 58569, 58698, 58827, 58956, 59085, 59214, 42959, 43088, 43217, 43346, 43475, 43604, 43733, 43862, 43991, 44120, 11400, 11529, 11658, 11787, 11916, 12045, 12174, 12303, 12432, 12561, 12799, 62052, 62181, 62310, 62439, 62568, 46313, 46442, 46571, 46700, 46829, 14109, 14238, 14367, 14496, 14625, 14754, 14883, 15012, 15141, 15270, 64632, 48377, 15680, 15809, 15938, 16067, 16196, 16355, -1,
16413, 16522, 265, 16776, 16960, 17089, 17221, 17359, 1027, 17538, 1281, 17824, 1567, 18078, 18211, 1954, 18465, 18659, 18729, 2472, 18983, 19172, 19301, 19379, 3122, 19633, 19817, 19946, 20078, 3712, 3853, 20364, 4107, 4240, 20751, 4494, 21060, 4803, 21314, 5012, 21523, 5266, 21832, 5575, 22086, 22219, 5962, 22473, 22648, 6297, 22808, 6551, 23122, 6865, 23376, 23509, 7252, 23763, 23929, 24027, 7770, 24281, 24442, 24571, 8196, 8325, 8486, 24997, 8740, 8838, 9004, 25515, 9258, 9391, 25902, 9645, 26216, 9959, 26470, 10119, 10294, 26805, 10548, 10681, 27192, 10935, 27501, 11244, 27755, 11453, 27964, 11707, 28273, 12016, 28527, 28660, 12403, 28914, 29055, 12689, 12821, 12950, 13134, 29645, 13388, 13466, 13595, 13784, 30295, 14038, 14108, 14302, 30813, 14556, 14689, 31200, 14943, 31486, 15229, 31740, 15408, 15546, 15678, 15807, 15991, 32502, 16245, 16354, -1,
16414, 16524, 267, 448, 16904, 17090, 17222, 17360, 1028, 1184, 17695, 17794, 1537, 1693, 18213, 1956, 2147, 18593, 18731, 2474, 2660, 19111, 19302, 19381, 3124, 3305, 19761, 19947, 20079, 20109, 3840, 3978, 20489, 4241, 4420, 20931, 21007, 4750, 4929, 5013, 5192, 21703, 21779, 5522, 5701, 22221, 5964, 6136, 22601, 6298, 6482, 22993, 23064, 6807, 6991, 23511, 7254, 7417, 23891, 24029, 7772, 7930, 24409, 24572, 24579, 24742, 8453, 8611, 25122, 25260, 8966, 9129, 25640, 9392, 9576, 26087, 26158, 9901, 10085, 26550, 10247, 10419, 26930, 10682, 10861, 27372, 27448, 11191, 11370, 11454, 11633, 28144, 28220, 11963, 12142, 28662, 12405, 12543, 29042, 29072, 29204, 29390, 13078, 13259, 29770, 29849, 30040, 13723, 13909, 30420, 30558, 14236, 14427, 30938, 14690, 14846, 31357, 31456, 15199, 15355, 31791, 31929, 32061, 32247, 15935, 16116, 32627, 32737, -1,
16415, 16525, 16704, 395, 16905, 17091, 17223, 17361, 17440, 1156, 1310, 17795, 17949, 1665, 18214, 18403, 2084, 18594, 18732, 18916, 2602, 19112, 19303, 19382, 19561, 3252, 19762, 19948, 20080, 3724, 20234, 3968, 4104, 20676, 4369, 4546, 21008, 21185, 4878, 21448, 5141, 5318, 21780, 21957, 5650, 22222, 22392, 6092, 22602, 22738, 6426, 6608, 23065, 23247, 6935, 23512, 23673, 7382, 23892, 24030, 24186, 7900, 24410, 24573, 8194, 8357, 24867, 8581, 8737, 8875, 25385, 9094, 9255, 25832, 9520, 9702, 26159, 26341, 10029, 10165, 26675, 10375, 10545, 27117, 10810, 10987, 27449, 27626, 11319, 27889, 11582, 11759, 28221, 28398, 12091, 28663, 28799, 12533, 29043, 12687, 12819, 13005, 29515, 13206, 13385, 13464, 13655, 30165, 13851, 14035, 14173, 30683, 14364, 14553, 31102, 14818, 14972, 31457, 31611, 15327, 15406, 15544, 15676, 15862, 32372, 16063, 16242, 16352, -1,
16416, 192, 16653, 396, 16906, 17092, 17224, 17362, 1055, 17566, 1284, 1437, 17923, 1666, 1891, 18342, 2085, 18595, 2404, 18860, 2603, 19113, 19304, 3049, 19510, 3253, 19763, 19949, 20081, 20107, 3849, 20360, 4096, 4291, 20802, 4497, 4673, 21136, 4879, 5063, 21574, 5269, 5445, 21908, 5651, 5880, 22350, 6093, 22603, 6353, 22864, 6554, 6735, 23193, 6936, 7161, 23640, 7383, 23893, 7674, 24158, 7901, 24411, 24574, 24577, 24740, 8482, 24993, 8709, 25258, 9000, 25511, 9222, 9447, 25958, 9648, 9829, 26287, 10030, 26548, 10290, 26801, 10503, 10732, 27243, 10938, 11114, 27577, 11320, 11504, 28015, 11710, 11886, 28349, 12092, 12287, 28791, 12534, 29044, 29070, 29202, 29388, 13130, 29641, 13334, 29847, 30038, 13780, 30291, 13979, 30556, 14298, 30809, 14492, 14717, 31228, 14946, 15099, 31585, 15328, 31789, 31927, 32059, 32245, 15987, 32498, 16191, 32735, -1,
16417, 16527, 270, 449, 578, 17032, 17225, 17363, 1029, 1187, 17698, 1445, 17956, 18147, 18178, 1921, 2077, 2206, 18734, 2477, 2661, 2790, 19239, 19384, 3127, 3306, 3435, 19889, 20082, 20112, 20241, 20420, 4163, 4224, 4362, 20873, 4620, 21131, 21312, 5014, 5195, 21706, 5453, 21964, 22136, 22163, 5906, 6085, 6214, 6299, 6485, 22996, 6743, 23254, 23417, 23448, 7191, 7375, 7504, 24032, 7775, 7931, 8060, 24537, 8230, 24707, 24836, 24992, 8735, 25263, 25392, 25576, 9319, 9350, 9513, 26024, 9771, 26282, 26468, 26553, 26682, 26861, 10604, 10631, 10803, 27314, 11061, 27572, 27753, 11455, 11636, 28147, 11894, 28405, 28543, 28604, 12347, 12526, 12655, 12685, 12878, 29332, 29461, 29640, 13383, 13528, 29977, 30106, 30290, 14033, 30561, 30690, 30846, 14589, 14620, 14811, 31322, 15069, 31580, 31738, 15404, 15542, 15735, 32189, 32318, 32497, 16240, 16350, -1,
16418, 16528, 16705, 398, 579, 17033, 17226, 17364, 17443, 1157, 1313, 1446, 1635, 18084, 18179, 18333, 2049, 2207, 18735, 18917, 2605, 2791, 19240, 19385, 19562, 3255, 3436, 19890, 20083, 3727, 3908, 20369, 20546, 20618, 4352, 4488, 4621, 4800, 21259, 21451, 5142, 5321, 5454, 5624, 22092, 22164, 22341, 6034, 6215, 22741, 6427, 6611, 6744, 6905, 23382, 23449, 23631, 7319, 7505, 24033, 24187, 7903, 8061, 24538, 24613, 8322, 8480, 24964, 25118, 8878, 9064, 25520, 25702, 25769, 9478, 9639, 9772, 9956, 26410, 10168, 10349, 26810, 26987, 27059, 10759, 10929, 11062, 11241, 27700, 27892, 11583, 11762, 11895, 12031, 28533, 28605, 28782, 12475, 12656, 29068, 29261, 12947, 13128, 29589, 29766, 29911, 13592, 13778, 30234, 30416, 14176, 14334, 30818, 30972, 31067, 14748, 14937, 15070, 15226, 31708, 31787, 31925, 32118, 15804, 15985, 32446, 32623, 32733, -1,
16419, 193, 16656, 399, 580, 17034, 17227, 17365, 1058, 17569, 1285, 17891, 1574, 18085, 1821, 18307, 2050, 2208, 2405, 18863, 2606, 2792, 19241, 3050, 19513, 3256, 3437, 19891, 20084, 20110, 20291, 4034, 20497, 4233, 20744, 4480, 21056, 4749, 21260, 5066, 21577, 5270, 21880, 5582, 22093, 5829, 22292, 6035, 6216, 6356, 22867, 6555, 23161, 6872, 23383, 7119, 23577, 7320, 7506, 7675, 24161, 7904, 8062, 24539, 8228, 24705, 24863, 8606, 25092, 25261, 25447, 9190, 25648, 9384, 25895, 9606, 26212, 9900, 26411, 26551, 26732, 10475, 26938, 10674, 27185, 10887, 27497, 11190, 27701, 11507, 28018, 11711, 28287, 12023, 28534, 12270, 28733, 12476, 12657, 12683, 12876, 29330, 29511, 13254, 29717, 13526, 29975, 30161, 13904, 30362, 30559, 30717, 14460, 30946, 14682, 31193, 14876, 31482, 15198, 31709, 15402, 15540, 15733, 32187, 32368, 16111, 32574, 16348, -1,
16420, 16529, 16706, 16835, 526, 17035, 17228, 17366, 17445, 17574, 17763, 1413, 1569, 1698, 18180, 18334, 18463, 2177, 18736, 18918, 19047, 2733, 19242, 19386, 19563, 19692, 3383, 19892, 20085, 20164, 3855, 3984, 4161, 20620, 20749, 20928, 4608, 4744, 4873, 21453, 21582, 21752, 5398, 5577, 5706, 22165, 22342, 22471, 6162, 22743, 22872, 23033, 6683, 6867, 6996, 23450, 23632, 23761, 7447, 24034, 24188, 24317, 8031, 24540, 8227, 24736, 8450, 8579, 8733, 25320, 9006, 9135, 9317, 25771, 25900, 26084, 9734, 9895, 10024, 26605, 10296, 10425, 10602, 27061, 27190, 27369, 11015, 11185, 11314, 27894, 28023, 28159, 11839, 12018, 12147, 28606, 28783, 28912, 12603, 12682, 12875, 29384, 13075, 13204, 13381, 13525, 30034, 13720, 13849, 14031, 30590, 14304, 14433, 14587, 31069, 31198, 31354, 15004, 15193, 15322, 15401, 15539, 15732, 32241, 15932, 16061, 16238, 16347, -1,
16421, 194, 16657, 16836, 527, 17036, 17229, 17367, 1060, 1251, 17702, 17825, 1541, 1699, 1822, 18308, 18464, 2178, 2406, 18864, 19048, 2734, 19243, 3051, 19514, 19693, 3384, 19893, 20086, 3779, 20238, 20417, 4112, 4235, 4416, 20877, 21000, 4736, 4874, 5068, 5240, 21710, 21833, 5526, 5707, 5830, 22293, 22472, 6163, 6358, 6521, 23000, 23123, 6811, 6997, 7120, 23578, 23762, 7448, 7676, 24162, 24318, 8032, 24541, 24610, 8351, 24833, 24989, 8707, 8935, 25389, 25573, 9263, 9386, 9572, 26028, 26151, 9862, 10025, 10220, 26679, 26858, 10553, 10676, 10857, 27318, 27441, 11143, 11315, 11509, 11647, 28151, 28274, 11967, 12148, 12271, 28734, 28913, 12604, 29065, 29258, 12999, 29458, 29637, 13332, 29908, 13649, 30103, 30287, 13977, 14205, 30687, 30843, 14561, 14684, 14842, 31326, 31449, 15132, 15323, 31784, 31922, 32115, 15856, 32315, 32494, 16189, 32730, -1,
16422, 195, 324, 16785, 528, 17037, 17230, 17368, 17507, 1188, 1317, 17826, 17955, 1669, 1823, 1952, 18436, 2179, 2407, 2536, 18992, 2735, 19244, 3052, 3181, 19642, 3385, 19894, 20087, 20162, 3905, 20366, 20495, 20672, 4363, 4492, 21001, 21130, 4864, 21496, 5196, 5325, 21834, 21963, 5654, 5831, 5960, 22421, 6164, 22777, 6486, 6615, 23124, 23253, 6939, 7121, 7250, 23706, 7449, 7677, 7806, 24290, 8033, 24542, 8225, 24734, 8477, 24961, 25090, 25318, 9061, 25517, 25646, 25828, 9514, 9643, 26152, 26281, 9990, 26603, 10346, 26807, 26936, 27113, 10804, 10933, 27442, 27571, 11271, 27903, 11637, 11766, 28275, 28404, 12095, 12272, 12401, 28862, 12605, 12680, 12873, 29382, 13125, 29586, 29715, 13523, 30032, 13775, 30231, 30360, 30588, 14331, 30815, 30944, 31098, 14812, 14941, 31450, 31579, 15260, 15399, 15537, 15730, 32239, 15982, 32443, 32572, 16345, -1,
49, 152, 16663, 16847, 16976, 17107, 17160, 17241, 17415, 17587, 1330, 17845, 1588, 1769, 18232, 1975, 2154, 2283, 18690, 18748, 2433, 2491, 2589, 2670, 2718, 2799, 2849, 2930, 20017, 3737, 3866, 4050, 20561, 4251, 4437, 20948, 4695, 21206, 21369, 4992, 5020, 5130, 5211, 21641, 21722, 5388, 5469, 21899, 21980, 22080, 22138, 5775, 5856, 22286, 22367, 22465, 22523, 22594, 22652, 23960, 7703, 7887, 8016, 8147, 24630, 24761, 24890, 25069, 8812, 25219, 25277, 25348, 25406, 25504, 25585, 9247, 9328, 25733, 25791, 25891, 25972, 9634, 9715, 26149, 26230, 9892, 9973, 10083, 10111, 11399, 11571, 28082, 11829, 28340, 28521, 12216, 28727, 28906, 29035, 12760, 12813, 12894, 12944, 13025, 13073, 13154, 13252, 13310, 29763, 29821, 30489, 30618, 30802, 14545, 31003, 31189, 14932, 31447, 15190, 15353, 31782, 31863, 15670, 15801, 15930, 16109, 32620, 32728, -1,
50, 153, 335, 16791, 16977, 17108, 17161, 17242, 1075, 17543, 17713, 17846, 18025, 1716, 18233, 18410, 2103, 2284, 18691, 18749, 18845, 18926, 2561, 2619, 2719, 2800, 2850, 2931, 20018, 20120, 20306, 3994, 4176, 20693, 4379, 4563, 4696, 4857, 21334, 21386, 21467, 5120, 5148, 5256, 5337, 5389, 5470, 5568, 5626, 22027, 22108, 5776, 5857, 5953, 6011, 22414, 22495, 22595, 22653, 23961, 24143, 7831, 8017, 8148, 8245, 8376, 8557, 25018, 25195, 8834, 8892, 8992, 9073, 25476, 25534, 25630, 25711, 9379, 9460, 25861, 25919, 26017, 26098, 26150, 26231, 26339, 26367, 10020, 10101, 27827, 11527, 11697, 11830, 12009, 28468, 12217, 12394, 28855, 29036, 29143, 29196, 29277, 29327, 29408, 29508, 29566, 13201, 13282, 13378, 13436, 14104, 14290, 30746, 30928, 14677, 31131, 31315, 31448, 31609, 15318, 15397, 15478, 32053, 32184, 32365, 16058, 16235, 16343, -1,
51, 16591, 281, 16792, 16978, 17109, 17162, 17243, 17458, 1201, 17671, 1513, 17974, 1717, 1898, 18361, 2104, 2285, 2333, 2414, 18819, 18877, 2562, 2620, 2720, 2801, 2851, 2932, 20019, 3735, 3921, 20432, 4122, 4308, 20819, 4507, 21113, 4824, 21335, 5001, 5082, 21512, 21593, 5248, 5276, 21824, 21882, 5517, 5598, 22028, 22109, 22209, 22267, 5904, 5985, 22415, 22496, 22596, 22654, 7631, 24089, 7832, 8018, 8149, 24628, 24759, 24940, 8683, 25146, 25217, 25275, 25375, 25456, 9118, 9199, 25604, 25662, 25762, 25843, 9505, 9586, 25989, 26047, 9827, 9855, 26278, 26359, 10021, 10102, 11442, 27953, 11655, 28265, 11958, 28469, 28650, 12345, 28856, 29037, 12758, 12811, 12892, 12942, 13023, 13123, 13181, 29634, 29692, 13329, 13410, 30487, 30673, 14416, 30874, 31060, 14803, 31259, 15097, 31576, 15319, 31780, 31861, 15668, 15799, 15980, 32491, 16186, 32726, -1,
52, 154, 336, 465, 16919, 17110, 17163, 17244, 1077, 1206, 1385, 17799, 17969, 18098, 18234, 18411, 18540, 2231, 18692, 18750, 18846, 18927, 18975, 19056, 2689, 2747, 2852, 2933, 20020, 3794, 20248, 20377, 20559, 20695, 20824, 20985, 4635, 4819, 4948, 21388, 21469, 21517, 21598, 21696, 21754, 5376, 5404, 5512, 5593, 5641, 5722, 5777, 5858, 5954, 6012, 6083, 6141, 22542, 22623, 23962, 24144, 24273, 7959, 8150, 24627, 24813, 8504, 8633, 8810, 25248, 25329, 8962, 9020, 9091, 9149, 9245, 9326, 9381, 9462, 9510, 9591, 9699, 9727, 26117, 26175, 26273, 26354, 26402, 26483, 27829, 27958, 28137, 11783, 11953, 12082, 12218, 12395, 12524, 28983, 12757, 12810, 12891, 12996, 13054, 29455, 29536, 29584, 29665, 29761, 29819, 30546, 14232, 14361, 14543, 14679, 14808, 14969, 31387, 31571, 31700, 31779, 31860, 15667, 15853, 32312, 32441, 32618, 32725, -1,
53, 16592, 282, 466, 16920, 17111, 17164, 17245, 17460, 17641, 1334, 1457, 17927, 18099, 1899, 18362, 18541, 2232, 2334, 2415, 18820, 18878, 18976, 19057, 2690, 2748, 2853, 2934, 20021, 20177, 3863, 4047, 20505, 4310, 4473, 20952, 21075, 4763, 4949, 5003, 5084, 5184, 5242, 21645, 21726, 21768, 21849, 5504, 5532, 5642, 5723, 22210, 22268, 5905, 5986, 6084, 6142, 22543, 22624, 7632, 24090, 24274, 7960, 8151, 8242, 8428, 24887, 25066, 8761, 8863, 8944, 25345, 25403, 25501, 25582, 9219, 9277, 25764, 25845, 25955, 25983, 9638, 9719, 9761, 9842, 26245, 26303, 26403, 26484, 11444, 11625, 28086, 28209, 11911, 12083, 28651, 12346, 12525, 28984, 29140, 29193, 29274, 29379, 29437, 13070, 13151, 13249, 13307, 29712, 29793, 14161, 30615, 30799, 14489, 31062, 31225, 14936, 15059, 31515, 31701, 15394, 15475, 32050, 32236, 15927, 16106, 32569, 16340, -1,
54, 16593, 16722, 410, 16921, 17112, 17165, 17246, 1129, 17588, 17717, 1458, 1587, 18055, 1900, 2029, 18490, 2233, 2335, 2416, 2464, 2545, 18948, 19006, 2691, 2749, 2854, 2935, 20022, 3792, 20303, 3991, 4120, 20729, 4438, 4567, 21076, 21205, 4891, 21440, 21498, 5131, 5212, 5260, 5341, 21769, 21850, 21898, 21979, 5632, 5660, 22211, 22269, 22340, 22398, 6033, 6114, 22544, 22625, 7633, 7762, 24218, 7961, 8152, 24625, 24811, 8554, 25015, 25144, 25246, 25327, 8989, 9070, 25473, 25531, 25602, 25660, 9443, 9471, 25892, 25973, 26021, 26102, 9762, 9843, 9891, 9972, 26373, 26431, 27881, 11572, 11701, 28210, 28339, 12039, 28652, 28781, 12474, 28985, 12755, 12808, 12889, 12994, 13052, 29505, 29563, 13198, 13279, 13327, 13408, 30544, 14287, 30743, 30872, 14713, 31190, 31319, 15060, 15189, 31643, 31777, 31858, 15665, 15851, 32362, 16055, 16184, 32723, -1,
55, 155, 339, 468, 598, 17047, 17166, 17247, 1080, 1209, 1386, 1466, 1643, 1772, 18183, 18353, 18482, 18612, 18693, 18751, 18849, 18930, 18978, 19059, 19108, 19189, 2817, 2875, 20023, 3797, 3927, 4056, 4217, 20632, 20761, 20943, 21018, 21200, 21329, 21391, 21472, 21520, 21601, 21697, 21755, 21777, 21858, 21954, 22012, 22083, 22141, 5760, 5788, 5896, 5977, 6025, 6106, 6155, 6236, 23963, 24147, 24276, 24406, 8087, 8301, 24755, 24885, 25014, 25193, 25251, 25332, 25381, 25462, 25510, 25591, 25699, 25727, 9346, 9404, 9475, 9533, 9629, 9710, 9732, 9790, 9886, 9967, 10015, 10096, 27832, 27961, 28138, 28218, 28395, 28524, 12167, 12337, 12466, 12596, 29138, 29252, 29310, 12938, 13019, 13068, 13149, 13197, 13278, 13376, 13434, 30549, 30679, 30808, 30969, 14616, 14745, 14927, 15002, 15184, 15313, 15392, 15473, 32109, 15795, 15925, 16054, 16233, 16338, -1,
56, 16595, 283, 469, 599, 17048, 17167, 17248, 17463, 17642, 1337, 17899, 1594, 1773, 1841, 18311, 18483, 18613, 2337, 2418, 18821, 18879, 18979, 19060, 19109, 19190, 2818, 2876, 20024, 20180, 20310, 20473, 4184, 4247, 4431, 20889, 4688, 21146, 21330, 5006, 5087, 5185, 5243, 21648, 21729, 5442, 5500, 21905, 21986, 22084, 22142, 22152, 22233, 5888, 5916, 6026, 6107, 6156, 6237, 7635, 24091, 24277, 24407, 8088, 24684, 8370, 8500, 8681, 25142, 8866, 8947, 8996, 9077, 9187, 9215, 25638, 25719, 25729, 25787, 25885, 25966, 9603, 9661, 26142, 26223, 9860, 9918, 10016, 10097, 11447, 11626, 28089, 11883, 28346, 28525, 28593, 12295, 12467, 12597, 12753, 12867, 12925, 29321, 29402, 29451, 29532, 29632, 29690, 13325, 13406, 14164, 14294, 14457, 30936, 30999, 31183, 14873, 31440, 15130, 15314, 31775, 31856, 15724, 32178, 32308, 32489, 16182, 32721, -1,
57, 16596, 16725, 411, 600, 17049, 17168, 17249, 1130, 17591, 17720, 17900, 18029, 1722, 1842, 1971, 18439, 18614, 2338, 2419, 2467, 2548, 18949, 19007, 19110, 19191, 2819, 2877, 20025, 3795, 3961, 20438, 20567, 20687, 4375, 4504, 4689, 4818, 21274, 21441, 21499, 5134, 5215, 5263, 5344, 5443, 5501, 5572, 5630, 22033, 22114, 22153, 22234, 22282, 22363, 6016, 6044, 6157, 6238, 7636, 7765, 24219, 24408, 8089, 8299, 24753, 24937, 8628, 8757, 25249, 25330, 25443, 25471, 9124, 9205, 9253, 9334, 9373, 9454, 25857, 25915, 25986, 26044, 26143, 26224, 26272, 26353, 9988, 10046, 27882, 11575, 11704, 11884, 12013, 28474, 28594, 28723, 12423, 12598, 29136, 29250, 29308, 12936, 13017, 13120, 13178, 29579, 29660, 29708, 29789, 30547, 30713, 14422, 14551, 14671, 31127, 31256, 31441, 31570, 15258, 15390, 15471, 32107, 15793, 15977, 32436, 32565, 16336, -1,
58, 16598, 16727, 16856, 539, 17050, 17169, 17250, 1131, 1260, 1389, 17847, 17976, 18105, 1844, 1973, 2102, 18567, 2340, 2421, 2469, 2550, 2598, 2679, 19077, 19135, 2820, 2878, 20026, 20217, 3923, 4052, 4181, 20688, 20817, 20946, 4631, 4760, 4889, 21442, 21500, 21571, 21629, 21700, 21758, 5390, 5471, 5519, 5600, 5648, 5729, 22155, 22236, 22284, 22365, 22413, 22494, 6144, 6172, 7638, 7767, 7896, 24347, 8090, 24682, 8425, 24881, 25010, 25139, 8931, 8959, 25377, 25458, 25506, 25587, 25635, 25716, 9374, 9455, 9503, 9584, 9632, 9713, 26113, 26171, 26242, 26300, 26371, 26429, 27883, 28012, 28141, 11831, 11960, 12089, 28596, 28725, 28854, 12551, 12751, 12865, 12923, 29376, 29434, 13064, 13145, 13193, 13274, 13322, 13403, 14201, 30675, 30804, 30933, 14672, 14801, 14930, 31383, 31512, 31641, 31773, 31854, 15722, 32233, 15921, 16050, 16179, 32719, -1,
39, 147, 16658, 16837, 16966, 17097, 17288, 985, 17414, 17577, 1320, 17835, 1578, 1764, 18222, 1965, 2149, 2278, 19330, 3004, 3073, 19515, 3229, 19694, 3358, 19823, 3489, 19954, 3623, 3732, 3861, 4040, 20551, 4246, 4427, 20938, 4685, 21196, 21368, 6272, 22684, 6410, 22875, 22921, 6618, 6668, 23133, 23179, 6876, 23360, 7034, 7055, 23520, 23566, 7263, 23745, 7419, 23874, 7548, 7571, 24082, 24261, 24390, 24521, 24620, 24751, 24880, 25064, 8807, 26499, 10173, 26628, 10302, 26784, 10481, 10527, 26992, 27013, 10687, 27171, 10868, 10914, 27379, 27429, 11126, 11172, 27637, 11363, 27775, 27782, 27945, 11688, 28203, 11946, 12132, 28590, 12333, 12517, 12646, 12750, 13453, 29918, 13584, 30049, 13713, 30178, 13892, 30334, 30403, 14077, 14100, 14229, 14408, 30919, 14614, 14795, 31306, 15053, 31564, 31736, 31910, 15607, 32044, 32175, 32304, 32488, 16231, 16334, -1,
40, 148, 325, 16786, 16967, 17098, 17289, 986, 1065, 17542, 17703, 17836, 18020, 1706, 18223, 18405, 2093, 2279, 19331, 3005, 19485, 3182, 3201, 19643, 3359, 19824, 3490, 19955, 3624, 20115, 20296, 3989, 4166, 20683, 4374, 4553, 4686, 4856, 21324, 22666, 6363, 6400, 22812, 6536, 23001, 6669, 23134, 6848, 23290, 23307, 7004, 7056, 23521, 7233, 23675, 23694, 7391, 23875, 7549, 7572, 7749, 24210, 24391, 24522, 8235, 8366, 8552, 25008, 25190, 10114, 26556, 10272, 26737, 26756, 10430, 26910, 10607, 10659, 27124, 27141, 10815, 27297, 10994, 27430, 11127, 27619, 11263, 11300, 27765, 11433, 27910, 28071, 28204, 28388, 12074, 28591, 28773, 12461, 12647, 29133, 29836, 13533, 29967, 13664, 30148, 13822, 13841, 30306, 14018, 30460, 30483, 30664, 14357, 14534, 31051, 14742, 14921, 15054, 15224, 31692, 15525, 31990, 15659, 15790, 15976, 32432, 32614, 32717, -1,
41, 16581, 276, 16787, 16968, 17099, 17290, 987, 17448, 1191, 17670, 1508, 17964, 1707, 1893, 18351, 2094, 2280, 2973, 19438, 19459, 3133, 3202, 19644, 3360, 19825, 3491, 19956, 3625, 3730, 3911, 20422, 4117, 4298, 20809, 4502, 21112, 4814, 21325, 6281, 22746, 22792, 6489, 6528, 22940, 23104, 6778, 6797, 23262, 23308, 7005, 23489, 7163, 7184, 23649, 23695, 7392, 23876, 7550, 24005, 7700, 24211, 24392, 24523, 24618, 24749, 24935, 8678, 25136, 26497, 10171, 26655, 10352, 10398, 26863, 26884, 10558, 27042, 10739, 10785, 27250, 27269, 10943, 11107, 27519, 27558, 11255, 11301, 27766, 27816, 11559, 28038, 11876, 28332, 12075, 12261, 28719, 12462, 12648, 12748, 13451, 29916, 13582, 30047, 13763, 30205, 30274, 13948, 13969, 30434, 14098, 14279, 30790, 14485, 14666, 31177, 14870, 31480, 15182, 31693, 31908, 15605, 32042, 32173, 32359, 16102, 32560, 16332, -1,
42, 149, 326, 455, 16914, 17100, 17291, 988, 1067, 1196, 1380, 17798, 17959, 18088, 18224, 18406, 18535, 2221, 19332, 3006, 19486, 3183, 19615, 3312, 3329, 19771, 3492, 19957, 3626, 3784, 20243, 20372, 20549, 20685, 20814, 20984, 4630, 4809, 4938, 22668, 6365, 22797, 6494, 22976, 6650, 6656, 23068, 6792, 23257, 6921, 23386, 7057, 23522, 7234, 23676, 7363, 23805, 23822, 7519, 7573, 7750, 7879, 24338, 24524, 24617, 24808, 8494, 8623, 8805, 26528, 10225, 10242, 26684, 10371, 26813, 10525, 26990, 10661, 27126, 10790, 27255, 10979, 27391, 27397, 11071, 27553, 11250, 27682, 11379, 11435, 11564, 11748, 28166, 28327, 28456, 28592, 28774, 28903, 12589, 12747, 13450, 29915, 13636, 30078, 30095, 13792, 30224, 13921, 30401, 14075, 14152, 30611, 30740, 30917, 31053, 31182, 31352, 14998, 15177, 15306, 31907, 15604, 32041, 32232, 15918, 16047, 16229, 16331, -1,
43, 16582, 277, 456, 16915, 17101, 17292, 989, 17450, 17636, 1324, 1447, 17926, 18089, 1894, 18352, 18536, 2222, 2974, 19439, 19460, 3134, 19616, 3313, 3330, 19772, 3493, 19958, 3627, 20167, 3858, 4037, 20500, 4300, 4472, 20942, 21065, 4758, 4939, 6283, 22748, 6464, 22906, 22925, 6622, 23048, 6745, 6784, 23196, 6922, 23387, 23490, 7164, 7185, 23650, 7364, 23806, 23823, 7520, 24006, 7701, 7880, 24339, 24525, 8232, 8423, 24877, 25061, 8751, 10143, 26608, 26625, 10299, 26781, 10478, 10499, 26941, 27044, 10741, 27235, 10879, 10918, 27383, 11041, 27506, 27525, 11199, 27683, 11380, 27818, 28004, 11692, 11815, 28294, 28457, 12262, 28720, 28904, 12590, 29130, 29833, 13530, 30019, 13693, 13710, 30175, 13889, 30331, 30352, 14049, 30535, 14226, 14405, 30868, 14668, 14840, 31310, 31433, 15126, 15307, 15522, 31987, 15656, 15847, 32301, 32485, 16175, 32714, -1,
44, 16583, 16712, 405, 16916, 17102, 17293, 990, 1124, 17578, 17707, 1448, 1577, 18054, 1895, 2024, 18480, 2223, 2975, 19440, 3104, 19569, 19588, 3262, 3331, 19773, 3494, 19959, 3628, 3782, 20293, 3986, 4115, 20728, 4428, 4557, 21066, 21195, 4886, 22720, 6394, 6411, 22876, 6540, 23005, 23049, 6746, 23178, 6875, 6912, 23324, 23491, 7165, 23620, 7294, 7313, 23778, 23824, 7521, 24007, 24136, 7829, 24340, 24526, 24615, 24806, 8549, 25005, 25134, 26526, 10223, 10269, 26734, 26753, 10427, 26882, 10556, 10723, 27135, 27172, 10869, 27301, 10998, 11042, 27507, 11171, 27636, 27653, 11327, 11492, 27946, 28075, 11816, 11945, 28422, 12263, 12392, 28848, 12591, 12745, 13448, 29913, 13634, 30076, 30145, 13819, 13838, 30303, 13967, 30432, 14150, 30661, 14354, 14483, 31096, 14796, 14925, 31434, 31563, 15254, 31905, 15602, 32039, 32230, 15973, 32429, 32558, 16329, -1,
45, 150, 329, 458, 588, 17042, 17294, 991, 1070, 1199, 1381, 1456, 1638, 1767, 18182, 18343, 18472, 18602, 19333, 3007, 19489, 3186, 19618, 3315, 19748, 3445, 3457, 19899, 3629, 3787, 3917, 4046, 4216, 20627, 20756, 20933, 21013, 21190, 21319, 22671, 6368, 22800, 6497, 22977, 6651, 23057, 6754, 23234, 6908, 23363, 7037, 7040, 23452, 7176, 23641, 7305, 23770, 7435, 23900, 7574, 7753, 7882, 8012, 24466, 8296, 24745, 24875, 25004, 25188, 26531, 10228, 26661, 10358, 26790, 10487, 26979, 10623, 10626, 27068, 10755, 27197, 10909, 27374, 11012, 27454, 11166, 27631, 11295, 27760, 11438, 11567, 11749, 11824, 12006, 12135, 28550, 28711, 28840, 28970, 29128, 29892, 13566, 13578, 30043, 13708, 30173, 13837, 30302, 14016, 30458, 14155, 14285, 14414, 14584, 30995, 31124, 31301, 31381, 31558, 31687, 15520, 31985, 15720, 32169, 32299, 32428, 32612, 32712, -1,
46, 16585, 278, 459, 589, 17043, 17295, 992, 17453, 17637, 1327, 17894, 1584, 1768, 1831, 18310, 18473, 18603, 2977, 19442, 19461, 3135, 19619, 3316, 19749, 3446, 3458, 19900, 3630, 20170, 20300, 20472, 4174, 4242, 4421, 20884, 4678, 21141, 21320, 6286, 22751, 6465, 22907, 22928, 6625, 6722, 23164, 23185, 6882, 23364, 7038, 23432, 7129, 7168, 23580, 7306, 23771, 7436, 23901, 24009, 7702, 7883, 8013, 24467, 24679, 8360, 8490, 8676, 25132, 10146, 26611, 10276, 26741, 10467, 26879, 26918, 10615, 27009, 10683, 27165, 10862, 10883, 27325, 27422, 11119, 11140, 27582, 11296, 27761, 27821, 28005, 11695, 28262, 11952, 12136, 12199, 28678, 28841, 28971, 12743, 13507, 29949, 29961, 13658, 30091, 13788, 30272, 13946, 13965, 30430, 30538, 30668, 30840, 14542, 14610, 14789, 31252, 15046, 31509, 31688, 31903, 15600, 32103, 15784, 15914, 16100, 32556, 16327, -1,
47, 16586, 16715, 406, 590, 17044, 17296, 993, 1125, 17581, 17710, 17895, 18024, 1712, 1832, 1961, 18438, 18604, 2978, 19443, 3107, 19572, 19589, 3263, 19750, 3447, 3459, 19901, 3631, 3785, 3960, 20428, 20557, 20677, 4370, 4499, 4679, 4808, 21269, 22721, 6395, 6414, 22879, 6543, 23008, 6723, 23165, 6852, 23294, 23313, 7010, 23433, 7130, 23562, 7259, 7296, 23708, 7437, 23902, 24010, 24139, 7830, 8014, 24468, 8294, 24743, 24932, 8618, 8747, 26529, 10226, 26723, 10367, 10404, 26869, 10533, 26998, 10653, 27118, 27137, 10811, 27266, 10940, 27423, 11120, 27552, 11249, 11268, 27710, 11493, 27949, 28078, 28263, 28392, 12080, 12200, 12329, 28806, 28972, 29126, 29890, 13564, 13576, 30041, 13760, 30202, 30219, 13916, 30348, 14045, 14153, 14328, 30796, 30925, 31045, 14738, 14867, 15047, 15176, 31637, 15518, 31983, 15718, 32167, 32356, 16042, 16171, 32710, -1,
48, 16588, 16717, 16846, 534, 17045, 17297, 994, 1126, 1255, 1384, 17837, 17966, 18095, 1834, 1963, 2092, 18566, 2980, 19445, 3109, 19574, 3238, 19703, 19717, 3391, 3460, 19902, 3632, 20216, 3913, 4042, 4171, 20678, 20807, 20936, 4626, 4755, 4884, 22722, 6396, 22851, 6525, 22980, 6654, 6670, 23135, 6799, 23264, 6928, 23393, 23435, 7132, 23564, 7261, 23693, 7390, 7424, 23836, 24012, 24141, 24270, 7958, 24469, 24677, 8420, 24871, 25000, 25129, 10211, 26623, 26657, 10354, 26786, 10483, 26915, 10612, 10654, 27119, 10783, 27248, 10912, 27377, 27393, 11067, 27522, 11196, 27651, 11325, 11494, 11623, 11752, 28205, 28334, 28463, 12202, 12331, 12460, 28934, 12741, 13505, 29947, 30016, 13690, 13704, 30169, 13833, 30298, 13962, 30427, 30584, 14281, 14410, 14539, 31046, 31175, 31304, 14994, 15123, 15252, 31901, 15598, 32101, 15844, 32295, 32424, 32553, 16325, -1,
59, 156, 345, 474, 604, 735, 49938, 33687, 1084, 1213, 1390, 1470, 1647, 1776, 1855, 2034, 2163, 2293, 51462, 51623, 51752, 51882, 52013, 35719, 35889, 36018, 36148, 36279, 3585, 3803, 3933, 4062, 4218, 4320, 4449, 4603, 4706, 4860, 4989, 54163, 54292, 54469, 54549, 54726, 54855, 54934, 55113, 55242, 55372, 39064, 39193, 39375, 39450, 39632, 39761, 39835, 40019, 40148, 40278, 7552, 7688, 7817, 7947, 8078, 8305, 8436, 8566, 8695, 8831, 58025, 58155, 58284, 58468, 58542, 58671, 58853, 58928, 59110, 59239, 42931, 43061, 43190, 43369, 43448, 43577, 43754, 43834, 44011, 44140, 11394, 11523, 11677, 11780, 11934, 12063, 12165, 12321, 12450, 12580, 12798, 62024, 62155, 62285, 62414, 62584, 46290, 46421, 46551, 46680, 46841, 14090, 14220, 14349, 14528, 14607, 14736, 14913, 14993, 15170, 15299, 64616, 48365, 15648, 15779, 15909, 16038, 16227, 16324, -1,
60, 16601, 284, 475, 605, 736, 49939, 33688, 17467, 17646, 1341, 17903, 1598, 1777, 18290, 1983, 2164, 2294, 35111, 51590, 51753, 51883, 52014, 52145, 35847, 36019, 36149, 36280, 3586, 20186, 20316, 20474, 4190, 20703, 20859, 4577, 21116, 4834, 4990, 37778, 37957, 54420, 38214, 54677, 54856, 38601, 55062, 55243, 55373, 55447, 55631, 39321, 55888, 39578, 39762, 56275, 39963, 40149, 40279, 23944, 7680, 7818, 7948, 8079, 24688, 24819, 24949, 25087, 8823, 41640, 41770, 41956, 58412, 42157, 42341, 58799, 42598, 59056, 59240, 59314, 59444, 59625, 43318, 59831, 60010, 43705, 60267, 43962, 44141, 27777, 27933, 11651, 28190, 11908, 12064, 28577, 12293, 12451, 12581, 29181, 45639, 45770, 45900, 46072, 62542, 62673, 62804, 62934, 63097, 46808, 30473, 30603, 30784, 14477, 30990, 31169, 14864, 31426, 15121, 15300, 48231, 64748, 32031, 32162, 32292, 32483, 16166, 32707, -1,
61, 16602, 16731, 412, 606, 737, 49940, 33689, 1134, 17595, 17724, 17904, 18033, 1726, 18291, 18420, 2111, 2295, 35112, 35241, 51718, 51884, 52015, 52146, 52275, 35975, 36150, 36281, 3587, 3801, 3962, 20444, 20573, 4347, 20831, 20960, 21117, 21246, 4962, 54213, 37906, 38035, 38215, 38344, 54805, 38602, 38731, 55190, 55374, 39119, 55575, 55704, 55889, 56018, 39706, 56276, 56405, 40091, 40280, 23945, 24074, 7808, 7949, 8080, 8303, 8434, 8575, 25077, 25206, 58023, 58212, 41898, 42027, 58597, 42285, 42414, 42599, 42728, 59184, 42929, 43113, 59572, 59701, 43498, 59959, 60088, 60268, 60397, 44090, 11421, 27905, 28034, 28191, 28320, 12036, 28578, 28707, 12421, 12582, 12796, 62022, 62153, 62328, 46028, 46157, 46288, 46419, 46585, 63062, 63191, 14088, 14272, 30731, 30860, 14657, 31118, 31247, 31427, 31556, 15249, 64614, 48363, 15646, 15777, 15971, 32420, 32549, 16322, -1,
62, 16604, 16733, 16862, 540, 738, 49941, 33690, 1135, 1264, 1393, 17851, 17980, 18109, 18293, 18422, 18551, 2239, 35114, 35243, 35372, 51846, 52016, 52148, 52277, 52406, 36103, 36282, 3588, 20218, 3929, 4058, 4187, 4348, 4477, 4606, 21087, 21216, 21345, 54214, 54343, 54472, 38162, 38291, 38420, 38604, 38733, 38862, 55318, 39120, 39249, 39378, 55831, 55960, 56089, 56278, 56407, 56536, 40219, 23947, 24076, 24205, 7936, 8081, 24686, 24831, 8562, 8691, 8820, 41700, 58151, 58280, 58409, 58598, 58727, 58856, 42541, 42670, 42799, 59369, 43057, 43186, 43315, 43499, 43628, 43757, 60215, 60344, 60473, 11422, 11551, 11680, 28161, 28290, 28419, 28580, 28709, 28838, 12549, 29179, 45637, 45816, 62281, 62410, 62539, 62671, 62841, 46547, 46676, 46805, 30528, 14216, 14345, 14474, 14658, 14787, 14916, 31374, 31503, 31632, 48229, 64746, 32029, 32227, 15905, 16034, 16163, 32705, -1,
63, 16607, 16736, 16865, 16994, 668, 49942, 33691, 1138, 1267, 1396, 1525, 1654, 1783, 18235, 18364, 18493, 18622, 35117, 35246, 35375, 35504, 51974, 52151, 52280, 52409, 52538, 36231, 3589, 20219, 20348, 20477, 20606, 4313, 4442, 4571, 4700, 4829, 4958, 54217, 54346, 54475, 54604, 54733, 54862, 38546, 38675, 38804, 38933, 39123, 39252, 39381, 39510, 39639, 39768, 56215, 56344, 56473, 56602, 23950, 24079, 24208, 24337, 8064, 8319, 24814, 24943, 25072, 25201, 41701, 41830, 41959, 42088, 58535, 58664, 58793, 58922, 59051, 59180, 59370, 59499, 59628, 59757, 43441, 43570, 43699, 43828, 43957, 44086, 11425, 11554, 11683, 11812, 11941, 12070, 28545, 28674, 28803, 28932, 12794, 62072, 45765, 45894, 46023, 46152, 46329, 62799, 62928, 63057, 63186, 30529, 30658, 30787, 30916, 14600, 14729, 14858, 14987, 15116, 15245, 64612, 48361, 15715, 32157, 32286, 32415, 32544, 16320, -1,
64, 16544, 287, 16798, 541, 739, 868, 1001, 17421, 1164, 17675, 17802, 1545, 18056, 18244, 1987, 18498, 2241, 18760, 2503, 19014, 2757, 2936, 19410, 3153, 19664, 3407, 3577, 3706, 3716, 20227, 3970, 20481, 20646, 4389, 20900, 21027, 4770, 21281, 21420, 5163, 21674, 21801, 5544, 22055, 22248, 5991, 22502, 6245, 22710, 6453, 22964, 23091, 6834, 23345, 23533, 7276, 23787, 7530, 24049, 7792, 24303, 8046, 8191, 8192, 8337, 24848, 8591, 25102, 8853, 25364, 9107, 25618, 25806, 9549, 26060, 26187, 9930, 26441, 10138, 26649, 10392, 26903, 27096, 10839, 27350, 27477, 11220, 27731, 27870, 11613, 28124, 28251, 11994, 28505, 28670, 12413, 28924, 12667, 12677, 12806, 12976, 29487, 13230, 29741, 13447, 13626, 30137, 13880, 30391, 14142, 30653, 14396, 30907, 31095, 14838, 31349, 31476, 15219, 31730, 15382, 15515, 15644, 15842, 32353, 16096, 32607, 16319, -1,
65, 16547, 290, 16801, 16995, 669, 869, 1002, 17424, 1167, 17678, 1476, 17987, 1730, 18186, 1929, 18440, 18624, 18763, 2506, 19017, 19192, 2885, 19413, 3156, 19667, 19833, 3535, 3707, 3717, 3878, 20389, 4132, 20611, 4354, 20865, 4640, 21151, 4894, 21423, 5166, 21677, 5480, 21991, 5734, 22185, 5928, 22439, 22628, 22713, 6456, 22967, 6765, 23276, 7019, 23475, 7218, 23729, 23913, 24052, 7795, 24306, 24447, 8174, 24593, 8320, 8461, 24972, 8715, 8854, 9038, 25549, 9292, 25748, 9491, 26002, 9800, 26311, 10054, 10139, 10328, 26839, 10582, 27033, 10776, 27287, 11090, 27601, 11344, 27873, 11616, 28127, 11902, 28413, 12156, 28635, 12378, 28889, 29050, 29060, 29232, 12934, 13100, 29611, 13354, 29882, 13575, 13750, 30261, 14004, 14143, 14327, 30838, 14581, 31037, 14780, 31291, 15089, 31600, 15343, 31765, 31898, 32098, 15772, 15966, 32477, 16220, 32702, -1,
66, 16549, 292, 483, 16929, 670, 870, 1003, 17425, 17604, 1347, 1423, 17934, 18113, 18188, 1931, 2112, 18568, 18765, 2508, 2680, 19145, 2886, 19415, 3158, 3321, 19795, 3536, 3708, 20134, 3845, 4003, 20514, 20612, 20768, 4511, 4610, 21121, 21277, 21424, 21608, 5351, 5422, 21933, 22117, 22187, 5930, 6116, 22567, 22714, 22893, 6636, 6712, 23223, 23402, 23477, 7220, 7401, 23857, 24054, 7797, 7935, 24434, 8175, 8208, 24717, 8448, 8586, 25097, 25294, 8982, 9163, 25674, 25749, 25928, 9671, 9747, 26258, 26437, 26584, 10267, 10453, 26964, 27034, 27218, 10961, 11032, 27543, 27727, 27874, 28030, 11773, 11872, 28383, 28539, 28637, 12380, 12538, 29017, 12675, 12847, 29356, 13062, 13225, 29736, 13497, 30006, 13703, 13875, 30386, 30583, 14271, 14452, 30963, 31038, 31217, 14960, 15036, 31547, 31726, 15380, 15513, 15713, 32222, 15900, 16091, 32602, 16317, -1,
67, 16550, 16739, 420, 16930, 671, 871, 1004, 1092, 17553, 17730, 1424, 1601, 18062, 18189, 18368, 2059, 18569, 18766, 18936, 2636, 19146, 2887, 19416, 19577, 3286, 19796, 3537, 3709, 3749, 20259, 3973, 4129, 4256, 20740, 20894, 4611, 4765, 21249, 5096, 21552, 21734, 5423, 5605, 22061, 22188, 22372, 6058, 22568, 6381, 22842, 23019, 6713, 6890, 23351, 23478, 23657, 7348, 23858, 24055, 24191, 7925, 24435, 8176, 24591, 8332, 24842, 8576, 8712, 8909, 25419, 9110, 9289, 9416, 25877, 26054, 9748, 9925, 26386, 10199, 26709, 10395, 10579, 10706, 27162, 27344, 11033, 11215, 27671, 11518, 28002, 28156, 11873, 12027, 28511, 28638, 28794, 12508, 29018, 29058, 29230, 12971, 29481, 13190, 13351, 29880, 13621, 30131, 13831, 14001, 14198, 30708, 14399, 14578, 14705, 31166, 31343, 15037, 15214, 31675, 31763, 31896, 32096, 15837, 32347, 16028, 16217, 32700, -1,
68, 227, 16678, 421, 16931, 672, 872, 1005, 17475, 1218, 17681, 17857, 1552, 18063, 1856, 18317, 2060, 18570, 2424, 18894, 2637, 19147, 2888, 3065, 19544, 3287, 19797, 3538, 3710, 20132, 3874, 20385, 4101, 20639, 4382, 20868, 21021, 4739, 21250, 21479, 5222, 21680, 21861, 5551, 22062, 5860, 22316, 6059, 22569, 22764, 6507, 22970, 23146, 6841, 23352, 7145, 23606, 7349, 23859, 7679, 24183, 7926, 24436, 8177, 8206, 24715, 8457, 24968, 8704, 25292, 9034, 25545, 9238, 25799, 9542, 26005, 26181, 9876, 26387, 26582, 10324, 26835, 10523, 27089, 10832, 27290, 27471, 11161, 27672, 27901, 11644, 28130, 28283, 12001, 28512, 12282, 28766, 12509, 29019, 12673, 12845, 29354, 13096, 29607, 13318, 13495, 30004, 13746, 30257, 13959, 30581, 14323, 30834, 14527, 31088, 14831, 31294, 31470, 15165, 31676, 15378, 15511, 15711, 32220, 15962, 32473, 16156, 16315, -1,
16463, 179, 16690, 433, 617, 746, 797, 878, 1049, 17560, 1303, 17874, 1617, 18128, 18261, 2004, 18515, 18681, 18698, 18779, 2441, 2522, 18952, 19033, 19136, 19194, 19265, 19323, 3663, 20103, 20278, 4021, 20532, 20665, 4408, 20919, 4717, 21228, 4971, 21379, 21437, 5122, 5180, 21633, 21691, 5408, 5489, 21919, 22000, 5662, 5743, 5795, 5876, 22306, 22387, 6049, 6130, 6243, 6271, 23987, 7730, 24241, 24425, 24554, 8218, 8347, 8536, 25047, 8790, 8832, 8860, 8973, 9054, 25484, 25565, 9227, 9308, 9360, 9441, 25871, 25952, 9614, 9695, 26180, 26238, 9923, 9981, 26434, 26492, 27801, 11544, 28055, 11858, 28369, 12112, 12245, 28756, 12499, 12665, 29114, 29188, 29246, 29317, 29375, 29478, 29559, 13221, 13302, 29732, 29813, 14087, 14262, 30773, 14516, 14649, 31160, 14903, 31469, 15212, 31723, 15377, 15458, 32026, 32155, 32344, 16087, 32598, 16314, -1,
16464, 181, 16692, 16873, 561, 747, 798, 879, 1050, 1234, 17745, 17816, 1559, 1743, 18263, 2006, 2169, 18643, 18700, 18781, 2443, 2524, 2624, 2682, 19080, 19161, 19266, 19324, 3664, 3766, 20231, 20403, 4146, 20666, 20845, 4588, 4664, 21175, 21354, 21380, 21438, 21536, 21617, 5279, 5360, 5378, 5436, 21889, 21947, 22045, 22126, 5797, 5878, 22308, 22389, 22499, 22527, 6177, 6258, 23989, 7732, 7913, 24369, 24555, 24601, 24792, 8475, 8661, 25172, 25229, 25310, 8960, 8988, 9098, 9179, 25609, 25690, 9361, 9442, 9540, 9598, 26051, 26109, 26127, 26208, 9870, 9951, 10049, 10107, 27802, 27986, 11729, 11800, 28311, 28495, 12247, 28758, 28921, 12627, 12729, 12803, 12861, 12966, 13047, 29445, 29503, 29603, 29684, 13346, 13427, 30518, 14215, 14387, 30898, 14650, 14829, 31340, 31416, 15159, 15338, 31760, 31841, 15641, 15832, 32283, 32469, 16212, 32697, -1,
16465, 182, 361, 16820, 562, 748, 799, 880, 17490, 1178, 1360, 17817, 17999, 1687, 18264, 18425, 2134, 18644, 18701, 18782, 18880, 18938, 2571, 2652, 19081, 19162, 19267, 19325, 3665, 20149, 3891, 20359, 20529, 4333, 20794, 20971, 4665, 4842, 21303, 5024, 5105, 21508, 21566, 21662, 21743, 5379, 5437, 5533, 5614, 22017, 22075, 5798, 5879, 5987, 6015, 22436, 22517, 6178, 6259, 23990, 24169, 7860, 24370, 24556, 8216, 8407, 24917, 8603, 8787, 8844, 8925, 25354, 25435, 9088, 9116, 9224, 9305, 25796, 25854, 9489, 9570, 9666, 9724, 26128, 26209, 26305, 26363, 9998, 10079, 11474, 27930, 28112, 11801, 11983, 28439, 12248, 12409, 28886, 12628, 29112, 29186, 29244, 29349, 29430, 13091, 13172, 29573, 29631, 29729, 29810, 14133, 30643, 14343, 14513, 31085, 14778, 14955, 31417, 31594, 15287, 15375, 15456, 32024, 32215, 15957, 32411, 32595, 16312, -1,
16466, 16617, 310, 16821, 563, 749, 800, 881, 1105, 17616, 1306, 1487, 17945, 1688, 1913, 18392, 2135, 18645, 2368, 2426, 18829, 18910, 2572, 2653, 19082, 19163, 19268, 19326, 3666, 3764, 20274, 4017, 20487, 20716, 4459, 20922, 21098, 4793, 21304, 21407, 21488, 5150, 5231, 21636, 21694, 21789, 21870, 5507, 5565, 22018, 22076, 22243, 22271, 5926, 6007, 22437, 22518, 6179, 6260, 7657, 24118, 7861, 24371, 24557, 24599, 24790, 8532, 25043, 8731, 25227, 25308, 8969, 9050, 25480, 25561, 9216, 9244, 9411, 9469, 25922, 25980, 9617, 9698, 9793, 9851, 26256, 26337, 9999, 10080, 27857, 11600, 28058, 28239, 11929, 28440, 28665, 12376, 28887, 12629, 12727, 12801, 12859, 12964, 13045, 29474, 29555, 13217, 13298, 29701, 29759, 30516, 14258, 30769, 14471, 14700, 31211, 14906, 15082, 31545, 15288, 31758, 31839, 15639, 15830, 32340, 16083, 32539, 32695, -1,
16467, 184, 16695, 16874, 17003, 689, 801, 882, 1051, 1237, 17748, 1495, 18006, 18169, 18200, 1943, 2127, 2256, 18703, 18784, 2446, 2527, 2625, 2683, 2754, 2812, 19208, 19289, 3667, 3769, 3898, 4077, 20588, 20615, 20787, 4530, 21045, 4788, 4969, 21381, 21439, 21539, 21620, 5282, 5363, 21797, 21878, 5540, 5621, 5731, 5759, 5762, 5820, 22273, 22331, 22429, 22510, 22558, 22639, 23992, 7735, 7914, 8043, 24497, 8280, 24729, 24858, 25042, 8785, 25232, 25313, 25361, 25442, 25540, 25598, 9283, 9341, 9344, 9372, 9482, 9563, 25993, 26074, 9740, 9821, 26251, 26332, 26432, 26490, 27803, 27989, 11732, 28247, 11990, 12153, 12184, 28695, 28879, 29008, 29110, 29222, 29303, 12931, 12989, 13060, 13118, 13216, 13297, 29727, 29808, 30521, 30650, 30829, 14572, 14599, 14771, 31282, 15029, 31540, 31721, 15373, 15454, 32088, 15769, 15898, 16082, 32593, 16310, -1,
16468, 185, 362, 16823, 17004, 690, 802, 883, 17493, 1179, 1363, 1496, 1657, 18134, 18201, 18383, 2071, 2257, 18704, 18785, 18881, 18939, 2574, 2655, 2755, 2813, 19209, 19290, 3668, 20152, 20333, 4026, 4203, 4275, 20743, 20913, 21046, 21225, 4916, 5027, 5108, 21509, 21567, 21665, 21746, 21798, 21879, 21987, 22015, 5668, 5749, 5763, 5821, 5917, 5998, 22401, 22459, 22559, 22640, 23993, 24170, 7863, 8044, 24498, 24663, 8344, 8530, 24986, 25168, 8847, 8928, 9028, 9086, 25489, 25570, 25666, 25724, 25738, 25819, 9472, 9500, 9608, 9689, 9741, 9822, 9920, 9978, 26379, 26460, 11477, 27931, 28115, 28248, 28409, 12118, 12185, 12367, 28823, 29009, 12725, 12837, 12918, 29314, 29372, 29472, 29553, 13188, 13246, 13342, 13423, 14136, 14317, 30778, 30955, 31027, 14727, 14897, 15030, 15209, 31668, 31756, 31837, 15703, 32152, 32338, 16026, 16208, 32693, -1,
16469, 16618, 313, 16824, 17005, 691, 803, 884, 1108, 17619, 1307, 17913, 1624, 18135, 1871, 18329, 2072, 2258, 2369, 2427, 18832, 18913, 2575, 2656, 2756, 2814, 19210, 19291, 3669, 3767, 3948, 20459, 4154, 20658, 4401, 20871, 4713, 21174, 4917, 21410, 21491, 5153, 5234, 21637, 21695, 5475, 5503, 21926, 22007, 5669, 5750, 22173, 22254, 5891, 5949, 22402, 22460, 22560, 22641, 7658, 24121, 7864, 8045, 24499, 8278, 24727, 24913, 8656, 25114, 25230, 25311, 25411, 25469, 9154, 9212, 25617, 25698, 9353, 9434, 25864, 25945, 9600, 9628, 26176, 26234, 9869, 9950, 26380, 26461, 27860, 11603, 28059, 11897, 28376, 12119, 28623, 12313, 28824, 29010, 29108, 29220, 29301, 12929, 12987, 13087, 13168, 29598, 29679, 13316, 13374, 30519, 30700, 14443, 30906, 14642, 31153, 14855, 31465, 15158, 31669, 15371, 15452, 32086, 15767, 15953, 32464, 16154, 16308, -1,
16470, 186, 363, 492, 16951, 692, 804, 885, 17495, 17624, 17785, 1435, 1619, 1748, 18202, 18384, 18513, 2199, 18705, 18786, 18882, 18940, 19011, 19069, 2702, 2783, 19211, 19292, 3670, 3821, 20280, 20409, 20586, 4277, 4406, 4585, 20999, 21169, 21298, 5029, 5110, 5158, 5239, 5347, 5375, 21765, 21823, 21921, 22002, 22050, 22131, 5764, 5822, 5918, 5999, 6047, 6128, 22529, 22587, 23994, 24171, 24300, 7991, 24500, 8277, 24786, 8472, 8601, 8783, 25284, 25342, 8975, 9056, 9104, 9185, 9281, 9339, 25740, 25821, 25869, 25950, 26048, 26106, 9728, 9756, 9864, 9945, 9993, 10074, 11479, 11608, 11769, 28187, 28371, 28500, 12186, 12368, 12497, 28951, 29107, 29219, 29300, 12960, 13041, 29442, 29500, 29571, 29629, 29725, 29806, 30573, 14264, 14393, 14570, 31029, 31158, 31337, 14983, 15153, 15282, 15370, 15451, 32085, 15826, 32280, 32409, 32591, 16307, -1,
16471, 16619, 314, 493, 16952, 693, 805, 886, 1110, 1273, 17752, 17875, 1563, 1749, 1872, 18330, 18514, 2200, 2370, 2428, 18833, 18914, 19012, 19070, 2703, 2784, 19212, 19293, 3671, 20204, 3895, 4074, 20537, 20660, 20841, 4534, 4657, 21127, 21299, 21412, 21493, 21603, 21631, 5286, 5367, 5409, 5490, 21893, 21951, 22051, 22132, 22174, 22255, 5892, 5950, 6048, 6129, 22530, 22588, 7659, 24122, 24301, 7992, 24501, 24660, 8401, 24855, 25039, 8729, 8899, 8957, 25358, 25439, 25537, 25595, 9232, 9313, 9355, 9436, 9536, 9594, 25997, 26078, 26120, 26201, 9856, 9884, 9994, 10075, 27862, 28025, 11736, 11859, 28315, 28501, 28624, 12314, 12498, 28952, 12722, 12834, 12915, 29343, 29424, 13057, 13115, 13213, 13294, 29699, 29757, 14188, 30647, 30826, 14521, 14644, 14825, 31286, 31409, 15111, 15283, 31753, 31834, 15700, 32209, 15895, 16079, 32537, 32690, -1,
16472, 16620, 16749, 442, 16953, 694, 806, 887, 17529, 1238, 1367, 17876, 18005, 1691, 1873, 2002, 18458, 2201, 2371, 2429, 2500, 2558, 18961, 19042, 2704, 2785, 19213, 19294, 3672, 3819, 20330, 4023, 4152, 4329, 20788, 20917, 4658, 4787, 21255, 5091, 5119, 21540, 21621, 21669, 21750, 5410, 5491, 5539, 5620, 22021, 22079, 22175, 22256, 22304, 22385, 6020, 6078, 22531, 22589, 7660, 7789, 24250, 7993, 24502, 8275, 24784, 8527, 24983, 25112, 25282, 25340, 9025, 9083, 25486, 25567, 25615, 25696, 25792, 25850, 9483, 9564, 9612, 9693, 26121, 26202, 26250, 26331, 9984, 10012, 11513, 27990, 28119, 11860, 11989, 28443, 28625, 28754, 12442, 28953, 29105, 29217, 29298, 12958, 13039, 29469, 29550, 13185, 13243, 13314, 13372, 30571, 14314, 30775, 30904, 31081, 14772, 14901, 31410, 31539, 15239, 15368, 15449, 32083, 15824, 32335, 16023, 16152, 16305, -1,
16453, 169, 16680, 423, 612, 741, 925, 17390, 1044, 17555, 1298, 17864, 1607, 18118, 18251, 1994, 18505, 18680, 19338, 3035, 3081, 19546, 19592, 3289, 19776, 3450, 19905, 3579, 20037, 20102, 20268, 4011, 20522, 20655, 4398, 20909, 4712, 21223, 4966, 22659, 6333, 6402, 22844, 22913, 6587, 6688, 23153, 23199, 6896, 6942, 23407, 7075, 23540, 23586, 7283, 7329, 23794, 7523, 23935, 7593, 24104, 7847, 8036, 8165, 8213, 8342, 8526, 25037, 8780, 10112, 26524, 10253, 26718, 26764, 10461, 10507, 26972, 10640, 27105, 27151, 10848, 10894, 27359, 27460, 11134, 11203, 27645, 27714, 11388, 11412, 27923, 11666, 28232, 11975, 28486, 28619, 12362, 28873, 29048, 29104, 29828, 13502, 29957, 13631, 30118, 13815, 13861, 30326, 30372, 14069, 30470, 30636, 14379, 30890, 31023, 14766, 31277, 15080, 31591, 15334, 15505, 31970, 15637, 15766, 15950, 32461, 16204, 32688, -1,
16454, 171, 16682, 16868, 551, 742, 926, 17391, 1045, 1224, 17735, 17811, 1554, 1733, 18253, 1996, 2168, 18633, 19340, 3037, 3083, 19548, 3264, 19706, 19720, 3417, 19906, 3580, 20038, 3756, 20230, 20393, 4136, 20656, 20840, 4583, 4654, 21165, 21349, 22660, 6334, 22816, 6513, 6559, 23024, 6658, 23100, 23169, 6843, 23325, 7022, 7077, 23542, 23588, 7285, 23779, 7423, 7457, 23922, 7595, 24106, 24292, 7975, 8166, 24596, 24782, 8470, 8651, 25162, 26509, 10206, 10240, 26652, 10378, 26843, 26889, 10586, 10641, 27106, 10820, 27262, 27331, 11005, 27407, 11104, 11150, 27615, 11329, 27771, 11413, 11592, 28103, 28179, 11922, 12101, 28621, 12364, 12536, 29001, 12719, 13443, 29885, 13606, 30071, 30085, 13759, 30243, 13940, 13986, 30451, 14124, 30598, 30761, 14504, 31024, 31208, 14951, 15022, 31533, 31717, 31888, 15585, 32020, 32206, 15894, 16075, 32586, 16303, -1,
16455, 172, 356, 16810, 552, 743, 927, 17392, 17480, 1173, 1350, 17812, 17989, 1682, 18254, 18424, 2124, 18634, 19341, 3038, 19520, 3194, 3211, 19676, 19721, 3418, 19907, 3581, 20039, 20139, 3881, 20358, 20519, 4328, 20784, 20966, 4655, 4837, 21293, 6304, 22769, 22788, 6462, 22942, 6639, 6659, 23101, 6813, 23278, 23297, 6971, 7078, 23543, 7267, 23679, 23716, 7413, 7458, 23923, 7596, 7780, 24234, 7976, 8167, 8211, 8397, 24907, 8598, 8777, 10124, 26589, 26634, 10331, 10368, 26780, 10504, 26969, 27076, 10750, 10769, 27234, 10946, 27388, 27408, 11105, 27585, 11259, 11278, 27743, 27848, 11541, 11718, 28180, 28357, 12050, 28622, 28792, 12492, 29002, 29102, 29826, 13500, 29989, 13686, 13731, 30196, 30213, 13887, 30369, 14066, 30507, 14249, 30726, 30887, 14696, 31152, 31334, 15023, 15205, 31661, 15503, 31968, 15635, 15821, 32331, 16022, 16201, 32686, -1,
16456, 16612, 300, 16811, 553, 744, 928, 17393, 1095, 17606, 1301, 1477, 17940, 1683, 1912, 18382, 2125, 18635, 3008, 19450, 19469, 3166, 3212, 19677, 19722, 3419, 19908, 3582, 20040, 3754, 20264, 4007, 20486, 20711, 4454, 20912, 21093, 4783, 21294, 22687, 6384, 6430, 22895, 22916, 6590, 23069, 6766, 6787, 23229, 23298, 6972, 23523, 7167, 7206, 23671, 23717, 7414, 7459, 23924, 24036, 7724, 24235, 7977, 8168, 24594, 24780, 8522, 25033, 8726, 26507, 10204, 10249, 26714, 26760, 10457, 10496, 26908, 10691, 27133, 27202, 10876, 10897, 27362, 11073, 27515, 27536, 11233, 11279, 27744, 11463, 27974, 11669, 11845, 28308, 12051, 12280, 28750, 12493, 29003, 12717, 13441, 29883, 13604, 30069, 30114, 13811, 13857, 30322, 30341, 14015, 14122, 30632, 14375, 30854, 31079, 14822, 31280, 31461, 15151, 31662, 31886, 15583, 32018, 32204, 15946, 32457, 16150, 16301, -1,
16457, 174, 16685, 16869, 16998, 679, 929, 17394, 1046, 1227, 17738, 1485, 17996, 18168, 18195, 1938, 2117, 2246, 19343, 3040, 3086, 19551, 3265, 19707, 3394, 19836, 19848, 3545, 20041, 3759, 3888, 4072, 20583, 20614, 20777, 4520, 21035, 4778, 4964, 22661, 6335, 22819, 6516, 6562, 23027, 23077, 6774, 6820, 23285, 7011, 23423, 7042, 23484, 23553, 7227, 23709, 7406, 23838, 7535, 7598, 24109, 24293, 24422, 8103, 8270, 24724, 24853, 25032, 8775, 26512, 10209, 26641, 10338, 26820, 10494, 10563, 27005, 10624, 27036, 10762, 27227, 27273, 10970, 11020, 27485, 27531, 11228, 27712, 11386, 11414, 11595, 28106, 11853, 28364, 28536, 28563, 12306, 12485, 12614, 29100, 29862, 13559, 13571, 30013, 13700, 30142, 13856, 30321, 30367, 14064, 14127, 14256, 14440, 30951, 30982, 31145, 14888, 31403, 15146, 15332, 15501, 31966, 15694, 32148, 32277, 32456, 16199, 32684, -1,
16458, 175, 357, 16813, 16999, 680, 930, 17395, 17483, 1174, 1353, 1486, 1656, 18124, 18196, 18373, 2066, 2247, 19344, 3041, 19521, 3195, 3214, 19679, 3395, 19837, 19849, 3546, 20042, 20142, 20328, 4016, 4198, 4265, 20742, 20903, 21036, 21220, 4906, 6307, 22772, 22789, 6463, 22945, 6642, 23078, 6775, 23267, 6911, 6948, 23413, 7043, 23485, 7197, 23662, 23681, 7355, 23839, 7536, 7599, 7781, 24237, 24423, 8104, 24653, 8339, 8520, 24981, 25158, 10127, 26592, 10308, 26750, 26769, 10466, 26946, 10620, 27018, 10715, 10752, 27164, 10888, 27353, 11021, 27486, 11200, 27642, 27659, 11356, 27851, 11542, 11721, 11854, 12024, 28492, 28564, 28741, 12434, 12615, 12715, 13477, 29942, 29954, 13628, 30112, 13809, 13828, 30270, 13982, 30447, 30510, 30696, 14384, 14566, 14633, 31110, 31271, 31404, 31588, 15274, 31884, 15581, 32077, 15763, 15944, 32405, 32582, 16299, -1,
16459, 16613, 303, 16814, 17000, 681, 931, 17396, 1098, 17609, 1302, 17912, 1614, 18125, 1861, 18324, 2067, 2248, 3009, 19451, 19472, 3169, 3215, 19680, 3396, 19838, 19850, 3547, 20043, 3757, 3943, 20454, 4144, 20648, 4391, 20870, 4708, 21164, 4907, 22690, 6387, 6433, 22898, 22917, 6591, 6755, 23167, 23206, 6903, 6949, 23414, 23453, 7150, 7171, 23613, 23682, 7356, 23840, 7537, 24037, 7727, 24238, 24424, 8105, 8268, 24722, 24903, 8646, 25109, 26510, 10207, 26691, 10365, 10434, 26876, 26897, 10594, 10633, 27098, 27144, 10841, 10880, 27292, 27456, 11130, 11149, 27614, 27660, 11357, 11466, 27977, 11670, 28280, 11982, 28493, 12229, 28692, 12435, 12616, 29098, 29860, 13557, 13569, 30011, 13727, 30192, 30238, 13935, 13956, 30398, 14125, 14311, 30822, 14512, 31016, 14759, 31238, 15076, 31532, 15275, 15499, 31964, 15692, 32146, 32327, 16070, 32533, 32682, -1,
16460, 176, 358, 487, 16941, 682, 932, 17397, 17485, 17614, 17784, 1430, 1609, 1738, 18197, 18374, 18503, 2194, 19345, 3042, 19522, 3196, 19651, 3325, 3342, 19807, 19851, 3548, 20044, 3816, 20270, 20399, 20581, 4267, 4396, 4580, 20998, 21159, 21288, 6309, 22774, 6438, 22903, 6627, 23039, 23045, 6719, 23201, 6898, 23330, 7027, 7044, 23486, 7198, 23663, 7327, 23792, 23809, 7483, 7600, 7782, 7911, 24365, 8106, 8267, 24776, 8467, 8596, 8773, 26564, 10238, 10255, 26720, 10384, 26849, 10561, 27003, 27020, 10717, 27149, 10846, 27328, 11002, 11008, 27420, 11144, 27609, 11273, 27738, 27853, 27982, 28152, 11798, 11977, 12106, 28565, 28742, 28871, 12562, 29097, 29859, 13556, 13600, 30065, 30082, 13756, 30211, 13885, 30365, 14062, 14184, 30638, 30767, 30949, 14635, 14764, 14948, 31366, 31527, 31656, 15498, 31963, 15691, 32200, 15891, 16020, 16197, 32681, -1,
16461, 16614, 304, 488, 16942, 683, 933, 17398, 1100, 1272, 17742, 17865, 1558, 1739, 1862, 18325, 18504, 2195, 3010, 19452, 19473, 3170, 19652, 3326, 3343, 19808, 19852, 3549, 20045, 20199, 3885, 4069, 20527, 20650, 20836, 4524, 4647, 21126, 21289, 22692, 6389, 22883, 6527, 6566, 23031, 6689, 23154, 23173, 6847, 23331, 7028, 23454, 7151, 7172, 23614, 7328, 23793, 23810, 7484, 24038, 7728, 7912, 24366, 8107, 24650, 8391, 24850, 25029, 8724, 10179, 26621, 26638, 10335, 26817, 10491, 10512, 26977, 10635, 27100, 10816, 27258, 27277, 10974, 27400, 11097, 11136, 27548, 11274, 27739, 11468, 11640, 28110, 28233, 11926, 12107, 12230, 28693, 28872, 12563, 12712, 13474, 29939, 29983, 13680, 13697, 30139, 13853, 30318, 30339, 14013, 30567, 14253, 14437, 30895, 31018, 31204, 14892, 15015, 31494, 31657, 31881, 15578, 32074, 15815, 32274, 32453, 16148, 16296, -1,
16462, 16615, 16744, 432, 16943, 684, 934, 17399, 17528, 1228, 1357, 17866, 17995, 1686, 1863, 1992, 18453, 2196, 3011, 19453, 3140, 19582, 19601, 3298, 3344, 19809, 19853, 3550, 20046, 3814, 20325, 4013, 4142, 4324, 20778, 20907, 4648, 4777, 21254, 6371, 22783, 22820, 6517, 22949, 6646, 6690, 23155, 6819, 23284, 23301, 6975, 23455, 7152, 23584, 7281, 7300, 23742, 23811, 7485, 24039, 24168, 7856, 24367, 8108, 8265, 24774, 8517, 24978, 25107, 26562, 10236, 10305, 26747, 26766, 10463, 26895, 10592, 27072, 10746, 10763, 27228, 10892, 27357, 27401, 11098, 27530, 11227, 11264, 27676, 27896, 11596, 11725, 28234, 28363, 12054, 12231, 12360, 28821, 12564, 29095, 29857, 13554, 13598, 30063, 30109, 13806, 13825, 30267, 13954, 30396, 14182, 30693, 14381, 14510, 14692, 31146, 31275, 15016, 15145, 31622, 15496, 31961, 15689, 32198, 15941, 32402, 32531, 32679, -1,
16473, 188, 16699, 16878, 17007, 17138, 33575, 50097, 1052, 1243, 17754, 1501, 18012, 18170, 1888, 18399, 18555, 18684, 51475, 35218, 35397, 35526, 35657, 35736, 52247, 52431, 52560, 52691, 19976, 3773, 3902, 4081, 20592, 4287, 4468, 20979, 4726, 21237, 21375, 54150, 54313, 38056, 54571, 38314, 38500, 54958, 38701, 38885, 39014, 39047, 39219, 55730, 39477, 55988, 56169, 39864, 56375, 56554, 56683, 7554, 24065, 24221, 24350, 24481, 8286, 8417, 8546, 8702, 25213, 58004, 58133, 58312, 42055, 58518, 58699, 42442, 58957, 42700, 42872, 42905, 43034, 43218, 59729, 43419, 43605, 60116, 43863, 60374, 60537, 11392, 11530, 28041, 11788, 28299, 28480, 12175, 28686, 28865, 28994, 12791, 61996, 62127, 62256, 62440, 46183, 46262, 46393, 46522, 46701, 63212, 14083, 14212, 14368, 30879, 14597, 14755, 31266, 15013, 31524, 31715, 64590, 48344, 15629, 15760, 15889, 16068, 32579, 16294, -1,
16474, 189, 366, 16827, 17008, 17139, 33576, 50098, 17499, 1180, 1369, 1502, 1658, 18140, 1889, 2043, 18527, 18685, 51476, 51653, 35346, 35527, 35658, 35737, 35919, 52375, 52561, 52692, 19977, 20156, 20337, 4030, 4207, 20724, 4415, 4594, 4727, 4863, 21365, 37801, 54278, 54439, 54572, 54756, 38442, 54959, 55141, 38829, 39015, 55475, 39175, 39345, 39478, 39657, 56116, 39865, 40042, 56503, 56684, 7555, 7709, 24193, 24351, 24482, 24669, 24800, 24958, 8674, 8828, 41619, 41800, 58261, 58438, 42187, 58646, 58825, 58958, 59128, 42828, 59288, 59474, 43162, 43344, 59861, 43547, 43731, 43864, 44025, 60502, 27786, 11520, 11656, 11789, 11968, 28427, 12176, 12353, 28814, 28995, 29174, 45611, 45742, 45928, 62384, 62566, 62645, 62776, 62957, 46650, 46827, 30466, 30624, 14340, 14494, 31011, 14725, 14881, 15014, 15203, 31652, 48205, 64727, 32012, 32143, 32324, 16017, 16194, 32677, -1,
16475, 16622, 317, 16828, 17009, 17140, 33577, 50099, 1114, 17625, 1308, 17914, 1630, 18141, 18299, 2017, 18528, 18686, 35141, 51604, 35347, 35528, 35659, 52175, 35865, 52376, 52562, 52693, 19978, 3771, 3952, 20463, 4158, 4339, 20850, 4543, 21119, 4855, 21366, 54184, 37927, 54406, 38244, 54700, 38443, 38629, 55087, 38830, 39016, 39090, 55601, 39303, 55913, 39606, 56117, 56298, 39993, 56504, 56685, 23965, 7683, 24194, 24352, 24483, 8284, 8415, 8573, 25084, 8802, 58002, 58183, 41926, 58389, 58570, 42313, 58774, 42616, 59086, 42829, 42903, 43089, 59600, 43290, 43476, 59987, 43675, 60281, 43992, 60503, 11401, 27912, 11648, 28224, 11917, 28428, 28609, 12304, 28815, 28996, 12789, 61994, 62125, 62311, 46054, 62512, 46260, 46391, 46572, 63083, 46778, 14081, 14239, 30750, 14468, 14626, 31137, 14853, 31459, 15142, 31653, 64588, 48342, 15627, 15758, 15939, 32450, 16145, 16292, -1,
16476, 190, 367, 496, 16955, 17141, 33578, 50100, 17501, 17630, 17786, 1436, 1625, 1754, 1890, 2044, 2173, 18655, 51477, 51654, 51783, 35474, 35660, 35738, 35920, 36049, 52503, 52694, 19979, 3825, 20284, 20413, 20590, 20726, 20855, 20991, 4671, 4850, 4979, 37803, 37932, 38116, 54534, 54695, 54824, 54960, 55142, 55271, 38957, 55477, 55606, 55785, 39431, 39601, 39730, 39866, 40043, 40172, 56631, 7556, 7710, 7839, 24321, 24484, 8283, 8446, 24928, 25057, 25211, 58056, 41747, 41876, 42053, 42189, 42318, 42488, 58902, 59081, 59210, 42962, 59416, 59545, 59727, 59863, 59992, 60153, 43803, 43987, 44116, 27788, 27917, 28096, 11776, 11912, 12041, 12177, 12354, 12483, 28942, 12788, 61993, 62184, 45870, 45999, 46181, 46259, 46445, 62904, 63033, 63210, 14112, 30594, 30723, 30877, 31013, 31142, 31331, 14981, 15137, 15266, 64587, 48341, 15626, 15812, 32271, 32400, 32577, 16291, -1,
16477, 16623, 318, 497, 16956, 17142, 33579, 50101, 1116, 1274, 17758, 17881, 1564, 1755, 18300, 2018, 2174, 18656, 35142, 51605, 51784, 35475, 35661, 52176, 35866, 36050, 52504, 52695, 19980, 20208, 3899, 4078, 20541, 4341, 4479, 20983, 21106, 4799, 4980, 54186, 54372, 38060, 38183, 54662, 54825, 38630, 55088, 55272, 38958, 39092, 39273, 55734, 55857, 39559, 39731, 56299, 39994, 40173, 56632, 23966, 7684, 7840, 24322, 24485, 24666, 24829, 8543, 8699, 25185, 41671, 58130, 58309, 42004, 58572, 58744, 42446, 42569, 59030, 59211, 59345, 43031, 43215, 59673, 43478, 43641, 60120, 60243, 43931, 44117, 11403, 11584, 28045, 28168, 11904, 12042, 28610, 12305, 12484, 28943, 29171, 45608, 45799, 62253, 62437, 46127, 62642, 62828, 46519, 46698, 63161, 30495, 14209, 14365, 30851, 14628, 14819, 31270, 31393, 15109, 15267, 48202, 64724, 32009, 32195, 15886, 16065, 32528, 32674, -1,
16478, 16624, 16753, 446, 16957, 17143, 33580, 50102, 17530, 1244, 1373, 17882, 18011, 1692, 18301, 18430, 2146, 18657, 35143, 35272, 51733, 35476, 35662, 52177, 52306, 35994, 52505, 52696, 19981, 3823, 20334, 4027, 4156, 20735, 4469, 4598, 21107, 21236, 4927, 37860, 54314, 54443, 38184, 38313, 54790, 38631, 38760, 55216, 38959, 55529, 39220, 39349, 55858, 55987, 39687, 56300, 56429, 40122, 56633, 23967, 24096, 7812, 24323, 24486, 8281, 8444, 24955, 8671, 8800, 58054, 41797, 58258, 58387, 42232, 58700, 58829, 42570, 42699, 59158, 42960, 59471, 43159, 43288, 59897, 43606, 43735, 60244, 60373, 44059, 27840, 11531, 11660, 28169, 28298, 12032, 28611, 28740, 12433, 28944, 12786, 61991, 62182, 45925, 62381, 62510, 46257, 46443, 62954, 46647, 46776, 14110, 30621, 14337, 14466, 31075, 14756, 14885, 31394, 31523, 15237, 64585, 48339, 15624, 15810, 32321, 16014, 16143, 16289, -1,
16479, 191, 370, 499, 629, 17083, 33581, 50103, 17504, 17633, 17787, 17890, 18044, 18173, 1820, 2009, 2138, 2268, 51478, 51657, 51786, 51916, 35602, 35739, 35923, 36052, 36182, 52631, 19982, 3828, 3958, 4087, 4223, 20668, 20797, 20974, 21054, 21231, 21360, 37806, 37935, 38117, 38192, 38374, 38503, 54918, 55079, 55208, 55338, 55480, 55609, 55786, 55866, 56043, 56172, 39815, 39985, 40114, 40244, 7557, 7713, 7842, 7972, 24449, 24702, 8411, 8541, 8670, 8826, 58059, 58189, 58318, 58488, 42131, 42260, 42437, 42517, 42694, 42823, 42965, 43095, 43224, 43385, 59800, 59929, 60111, 60186, 60368, 60497, 27791, 27920, 28097, 28177, 28354, 28483, 12160, 12296, 12425, 12555, 29169, 45672, 62121, 62251, 62380, 62564, 62701, 46387, 46517, 46646, 46825, 14115, 14245, 14374, 14563, 30978, 31107, 31261, 31364, 31518, 31647, 48200, 64722, 32068, 15754, 15884, 16013, 16192, 32672, -1,
16480, 16626, 319, 500, 630, 17084, 33582, 50104, 1119, 1275, 17761, 1532, 18018, 18174, 18265, 1948, 2139, 2269, 35145, 51606, 51787, 51917, 35603, 52179, 35867, 36053, 36183, 52632, 19983, 20211, 20341, 20479, 4215, 4283, 4462, 20925, 4719, 21182, 21361, 54189, 54373, 38063, 54630, 38320, 38504, 38567, 55046, 55209, 55339, 39095, 39274, 55737, 39531, 55994, 56173, 56241, 39943, 40115, 40245, 23969, 7685, 7843, 7973, 24450, 8317, 24794, 24924, 25082, 8798, 41674, 41804, 41976, 58446, 58514, 58693, 42388, 58950, 42645, 42824, 59348, 59478, 59641, 43352, 43415, 43599, 60057, 43856, 60314, 60498, 11406, 11585, 28048, 11842, 28305, 28484, 28552, 12288, 12426, 12556, 12784, 62055, 45736, 45866, 46052, 62508, 46316, 62770, 62900, 63081, 46774, 30498, 30628, 30819, 14502, 14593, 14749, 31235, 15006, 31492, 31648, 64583, 48337, 15683, 32137, 32267, 32448, 16141, 16287, -1,
16481, 16627, 16756, 447, 631, 17085, 33583, 50105, 17531, 1247, 1376, 1533, 1662, 18146, 18266, 18395, 2076, 2270, 35146, 35275, 51734, 51918, 35604, 52180, 52309, 35995, 36184, 52633, 19984, 3826, 3967, 20469, 20598, 20718, 4411, 4540, 4720, 4849, 21310, 37861, 54317, 54446, 54631, 54760, 38448, 38568, 38697, 55174, 55340, 55530, 39223, 39352, 39532, 39661, 56122, 56242, 56371, 40071, 40246, 23970, 24099, 7813, 7974, 24451, 24700, 8409, 8570, 25052, 25181, 58057, 58232, 41932, 42061, 42181, 58642, 58771, 58951, 59080, 42773, 42963, 43129, 59606, 59735, 59855, 43543, 43672, 43857, 43986, 60442, 27841, 11534, 11663, 11843, 11972, 28433, 28553, 28682, 12416, 12557, 29167, 45670, 62119, 62308, 45994, 46123, 62699, 46385, 46569, 63028, 63157, 14113, 14307, 30756, 30885, 31005, 14721, 14850, 15007, 15136, 31620, 48198, 64720, 32066, 15752, 15936, 32395, 32524, 32670, -1,
16482, 16629, 16758, 16887, 575, 17086, 33584, 50106, 17532, 17661, 17790, 1503, 1632, 1761, 18268, 18397, 18526, 2204, 35148, 35277, 35406, 51862, 35605, 52182, 52311, 52440, 36123, 52634, 19985, 20223, 3954, 4083, 4212, 20719, 20848, 20977, 4667, 4796, 4925, 37862, 37991, 38120, 54573, 54702, 54831, 38570, 38699, 38828, 55302, 55531, 55660, 55789, 39479, 39608, 39737, 56244, 56373, 56502, 40199, 23972, 24101, 24230, 7941, 24452, 8315, 24826, 8537, 8666, 8795, 41720, 58185, 58314, 58443, 42182, 42311, 42440, 58898, 59027, 59156, 59385, 43091, 43220, 43349, 59856, 59985, 60114, 43799, 43928, 44057, 27842, 27971, 28100, 11790, 11919, 12048, 28555, 28684, 28813, 12544, 12782, 62053, 45796, 62247, 62376, 62505, 46314, 62825, 46513, 46642, 46771, 30563, 14241, 14370, 14499, 31006, 31135, 31264, 14977, 15106, 15235, 64581, 48335, 15681, 32192, 15880, 16009, 16138, 16285, -1,
99, 196, 16707, 450, 16961, 704, 888, 1017, 17446, 1189, 17700, 17827, 1570, 18081, 1824, 18335, 2078, 18589, 2408, 18919, 2662, 19173, 2916, 3053, 19564, 3307, 19818, 3561, 3711, 20113, 3856, 20367, 4110, 20621, 4364, 20875, 21002, 4745, 21256, 21454, 5197, 21708, 21835, 5578, 22089, 5832, 22343, 6086, 22597, 22744, 6487, 22998, 23125, 6868, 23379, 7122, 23633, 7376, 23887, 7678, 24189, 7932, 24443, 8186, 8197, 24708, 8451, 24962, 8705, 25264, 9007, 25518, 9261, 25772, 9515, 26026, 26153, 9896, 26407, 26554, 10297, 26808, 10551, 27062, 10805, 27316, 27443, 11186, 27697, 27895, 11638, 28149, 28276, 12019, 28530, 12273, 28784, 12527, 29038, 12672, 12822, 29333, 13076, 29587, 13330, 13467, 29978, 13721, 30232, 13975, 30562, 14305, 30816, 14559, 31070, 14813, 31324, 31451, 15194, 31705, 15366, 15495, 15679, 32190, 15933, 32444, 16187, 16284, -1,
16489, 16594, 337, 16848, 591, 761, 832, 890, 1078, 17589, 1332, 1459, 17970, 1713, 1901, 18412, 2155, 18666, 2336, 2417, 18847, 18928, 2590, 2671, 19101, 19182, 19299, 19327, 3689, 3738, 20249, 3992, 20503, 20696, 4439, 20950, 21077, 4820, 21331, 21389, 21470, 5132, 5213, 21643, 21724, 21770, 21851, 5513, 5594, 22024, 22105, 22212, 22270, 5955, 6013, 22466, 22524, 6209, 6267, 7634, 24145, 7888, 24399, 24569, 24583, 24762, 8505, 25016, 8759, 25220, 25278, 8963, 9021, 25474, 25532, 9217, 9275, 9382, 9463, 25893, 25974, 9636, 9717, 9763, 9844, 26274, 26355, 10017, 10098, 27830, 11573, 28084, 28211, 11954, 28465, 28653, 12396, 28907, 12650, 12699, 12800, 12828, 12945, 13026, 29456, 29537, 13199, 13280, 29710, 29791, 30490, 14233, 30744, 14487, 14680, 31191, 14934, 15061, 31572, 15315, 31749, 31807, 15623, 15802, 32313, 16056, 32567, 32667, -1,
16490, 16597, 340, 16851, 17017, 719, 833, 891, 1081, 17592, 1335, 17901, 1644, 18155, 1843, 18354, 2097, 2281, 2339, 2420, 18850, 18931, 2593, 2674, 2787, 2815, 19229, 19310, 3690, 3739, 3928, 20439, 4182, 20633, 4376, 20887, 4690, 21201, 4944, 21392, 21473, 5135, 5216, 21646, 21727, 5444, 5502, 21955, 22013, 5698, 5756, 22154, 22235, 5897, 5978, 22408, 22489, 22592, 22650, 7637, 24148, 7891, 8057, 24527, 8250, 24711, 24886, 8629, 25140, 25221, 25279, 25382, 25463, 9125, 9206, 25636, 25717, 9347, 9405, 25858, 25916, 9601, 9659, 26144, 26225, 9887, 9968, 26398, 26479, 27833, 11576, 28087, 11885, 28396, 12139, 28595, 12338, 28849, 29033, 29082, 29201, 29282, 12928, 12956, 13069, 13150, 29580, 29661, 13323, 13404, 30491, 30680, 14423, 30934, 14617, 31128, 14871, 31442, 15185, 31696, 15364, 15422, 32058, 15751, 15926, 32437, 16180, 16282, -1,
16491, 16599, 342, 505, 16979, 720, 834, 892, 1082, 1261, 17772, 17848, 1591, 1770, 1845, 18356, 18537, 2225, 2341, 2422, 18852, 18933, 19043, 19071, 2721, 2802, 19230, 19311, 3691, 20184, 3867, 4053, 20564, 20634, 20818, 4561, 4632, 21143, 21327, 21393, 21474, 21572, 21630, 5315, 5373, 5391, 5472, 21902, 21983, 22081, 22139, 22156, 22237, 5899, 5980, 6080, 6138, 22536, 22617, 7639, 24150, 24313, 8019, 24528, 24633, 8374, 24839, 25011, 8754, 8870, 8951, 25349, 25407, 25507, 25588, 9250, 9331, 9348, 9406, 9504, 9585, 26015, 26096, 26114, 26172, 9857, 9915, 10013, 10094, 27834, 28013, 11756, 11832, 28343, 28522, 28597, 12340, 12521, 28977, 12697, 12816, 12897, 29325, 29406, 13056, 13084, 13194, 13275, 29705, 29786, 14168, 30619, 30805, 14548, 14618, 14802, 31313, 31384, 15127, 15311, 31747, 31805, 15673, 32182, 15879, 16051, 32562, 32665, -1,
16492, 16600, 16761, 470, 16980, 721, 835, 893, 17517, 1210, 1387, 17849, 18026, 1719, 1846, 2025, 18484, 2226, 2342, 2423, 2531, 2559, 18980, 19061, 2722, 2803, 19231, 19312, 3692, 3799, 20309, 3995, 4179, 4306, 20762, 20944, 4633, 4815, 21271, 5060, 5118, 21521, 21602, 21698, 21756, 5392, 5473, 5569, 5627, 22030, 22111, 22157, 22238, 22336, 22394, 6027, 6108, 22537, 22618, 7640, 7801, 24278, 8020, 24529, 8248, 24757, 8499, 24967, 25137, 25253, 25334, 8995, 9076, 25477, 25535, 25633, 25714, 25760, 25841, 9476, 9534, 9630, 9711, 26115, 26173, 26269, 26350, 9985, 10043, 11501, 27962, 28139, 11833, 12010, 28471, 28598, 28777, 12468, 28978, 29080, 29199, 29280, 12940, 13021, 29450, 29531, 13184, 13212, 13320, 13401, 30551, 14293, 30747, 30931, 31058, 14746, 14928, 31385, 31567, 15255, 15362, 15420, 32056, 15797, 32307, 16007, 16177, 16280, -1,
16493, 249, 16728, 471, 16981, 722, 836, 894, 1132, 17643, 1338, 1514, 17977, 1720, 18281, 1974, 18485, 2227, 18787, 18815, 2470, 2551, 18981, 19062, 2723, 2804, 19232, 19313, 3693, 20182, 3924, 20435, 4123, 20689, 4432, 20890, 21071, 4761, 21272, 21443, 21501, 5186, 5244, 21649, 21730, 21825, 21883, 5520, 5601, 22031, 22112, 5824, 5882, 22285, 22366, 6028, 6109, 22538, 22619, 24057, 7768, 24279, 8021, 24530, 24631, 8372, 24882, 8625, 25095, 8868, 8949, 25378, 25459, 9121, 9202, 25605, 25663, 9375, 9456, 25886, 25967, 9604, 9662, 9757, 9838, 26243, 26301, 9986, 10044, 27884, 11627, 28090, 28266, 11961, 28472, 12265, 28726, 12469, 28979, 12695, 12814, 12895, 29323, 29404, 13065, 13146, 29576, 29657, 13312, 13340, 14166, 30676, 14419, 30875, 14673, 31184, 14874, 15055, 31513, 15256, 31745, 31803, 15671, 32180, 15922, 32433, 16135, 32663, -1,
16484, 16584, 327, 16838, 581, 760, 960, 17402, 1068, 17579, 1322, 1449, 17960, 1703, 1896, 18407, 2150, 18661, 2976, 19441, 19487, 3184, 3230, 19695, 19741, 3438, 19939, 3583, 20068, 3733, 20244, 3987, 20498, 20686, 4429, 20940, 21067, 4810, 21321, 22669, 6366, 6412, 22877, 22923, 6620, 23050, 6747, 6793, 23258, 23304, 7001, 23492, 7166, 7235, 23677, 23746, 7420, 7489, 23931, 24008, 7751, 24262, 8005, 8184, 24582, 24752, 8495, 25006, 8749, 26500, 10174, 10243, 26685, 26754, 10428, 10497, 26939, 10662, 27127, 27173, 10870, 10916, 27381, 11043, 27508, 27554, 11251, 11297, 27762, 11436, 27947, 11690, 11817, 28328, 12071, 12264, 28775, 12518, 29029, 12694, 13440, 29852, 13585, 30050, 30096, 13793, 13839, 30304, 30350, 14047, 14101, 30612, 14355, 30866, 31054, 14797, 31308, 31435, 15178, 31689, 31877, 15551, 32006, 32176, 15919, 32430, 16173, 16278, -1,
16485, 16587, 330, 16841, 17016, 709, 961, 17403, 1071, 17582, 1325, 17896, 1639, 18150, 1833, 18344, 2087, 2276, 2979, 19444, 19490, 3187, 3233, 19698, 3427, 19839, 19869, 3566, 20069, 3734, 3918, 20429, 4172, 20628, 4371, 20882, 4680, 21191, 4934, 22672, 6369, 6415, 22880, 22926, 6623, 6724, 23166, 23235, 6909, 6978, 23420, 23434, 7131, 7177, 23642, 23688, 7385, 23872, 7546, 24011, 7754, 24265, 24440, 8133, 8240, 24710, 24876, 8619, 25130, 26501, 10175, 26662, 10359, 10405, 26870, 26916, 10613, 10627, 27069, 27138, 10812, 10881, 27323, 27424, 11121, 11167, 27632, 27678, 11375, 11439, 27950, 11693, 28264, 12007, 28518, 12201, 28712, 12455, 12644, 29077, 29841, 13538, 13568, 29980, 13709, 30174, 30220, 13917, 13963, 30428, 14102, 14286, 30797, 14540, 30996, 14739, 31250, 15048, 31559, 15302, 15492, 31934, 15664, 32134, 32300, 16043, 32554, 32661, -1,
16486, 16589, 332, 504, 16969, 710, 962, 17404, 1072, 1256, 17767, 17838, 1581, 1765, 1835, 18346, 18532, 2215, 2981, 19446, 19492, 3189, 19683, 3327, 3361, 19826, 19870, 3567, 20070, 20174, 3862, 4043, 20554, 20629, 20808, 4551, 4627, 21138, 21317, 22673, 6370, 22852, 6526, 6595, 23037, 6671, 23136, 23182, 6879, 23361, 7035, 23436, 7133, 7179, 23644, 7360, 23802, 23816, 7513, 24013, 7756, 7928, 24393, 8134, 24623, 8364, 24838, 25001, 8744, 10150, 26615, 26629, 10303, 26787, 10484, 10530, 26995, 10628, 27070, 10784, 27249, 27295, 10992, 27394, 11068, 11137, 27579, 11293, 27758, 11440, 11624, 28135, 28206, 11949, 12133, 12203, 28714, 28900, 12583, 12692, 13456, 29921, 29965, 13662, 13696, 30108, 13834, 30299, 30345, 14042, 30542, 14230, 14411, 30922, 30997, 31176, 14919, 14995, 31506, 31685, 31875, 15549, 32047, 15788, 32262, 32425, 16168, 16276, -1,
16487, 16590, 16760, 460, 16970, 711, 963, 17405, 17512, 1200, 1382, 17839, 18021, 1709, 1836, 2020, 18474, 2216, 2982, 19447, 3171, 19583, 19620, 3317, 3362, 19827, 19871, 3568, 20071, 3789, 20299, 3990, 4169, 4296, 20757, 20934, 4628, 4805, 21266, 6340, 22782, 22801, 6498, 22978, 6652, 6672, 23137, 6849, 23291, 23310, 7007, 23437, 7134, 23616, 7290, 7307, 23772, 23817, 7514, 24014, 24184, 7884, 24394, 8135, 8238, 24747, 8489, 24966, 25127, 26533, 10230, 10275, 26740, 26757, 10431, 26913, 10610, 27040, 10737, 10756, 27198, 10910, 27375, 27395, 11069, 27549, 11246, 11265, 27707, 27880, 11568, 11750, 28207, 28389, 12077, 12204, 12388, 28842, 12584, 29075, 29839, 13536, 13580, 30045, 30090, 13787, 13824, 30236, 13960, 30425, 14157, 30667, 14358, 14537, 14664, 31125, 31302, 14996, 15173, 31634, 15490, 31932, 15662, 32171, 15913, 32390, 32551, 32659, -1,
16488, 248, 16718, 461, 16971, 712, 964, 17406, 1127, 17638, 1328, 1509, 17967, 1710, 18276, 1964, 18475, 2217, 19427, 3071, 3110, 19575, 19621, 3318, 3363, 19828, 19872, 3569, 20072, 20172, 3914, 20425, 4118, 20679, 4422, 20885, 21061, 4756, 21267, 22723, 6397, 6466, 22908, 22929, 6626, 23105, 6779, 6800, 23265, 23311, 7008, 7104, 23546, 23565, 7262, 7308, 23773, 23818, 7515, 7672, 24142, 7885, 24395, 8136, 24621, 8362, 24872, 8615, 25094, 10148, 26613, 26658, 10355, 10401, 26866, 26885, 10559, 10655, 27120, 27166, 10863, 10884, 27326, 11037, 27502, 27523, 11197, 11266, 27708, 11495, 28006, 11696, 11877, 28335, 12078, 28644, 12332, 28843, 12585, 12690, 13454, 29919, 29963, 13660, 13705, 30170, 30216, 13913, 13952, 30364, 30540, 14282, 30793, 14486, 31047, 14790, 31253, 31429, 15124, 31635, 31873, 15547, 32045, 15786, 32296, 16039, 32518, 16274, -1,
16494, 16603, 346, 16857, 17018, 17147, 33605, 50127, 1085, 17596, 1339, 17905, 1648, 18159, 18292, 2035, 18546, 18687, 35113, 51624, 35367, 35556, 35685, 52147, 35890, 52401, 52585, 52714, 19997, 3740, 3934, 20445, 4188, 4321, 20832, 4575, 21118, 4861, 21372, 54164, 37907, 54418, 38216, 54727, 38470, 38603, 55114, 38857, 39032, 39065, 55576, 39319, 55890, 39633, 56144, 56277, 40020, 56531, 56697, 23946, 7689, 24200, 24384, 24513, 8254, 8383, 8567, 25078, 8821, 57990, 58156, 41899, 58410, 58543, 42286, 58797, 42600, 59111, 42854, 42887, 43062, 59573, 43316, 43449, 59960, 43703, 60269, 44012, 60523, 11395, 27906, 11649, 28192, 11935, 28446, 28579, 12322, 28833, 29027, 12770, 61973, 62102, 62286, 46029, 62540, 46234, 46363, 46552, 63063, 46806, 14080, 14221, 30732, 14475, 14608, 31119, 14862, 31428, 15171, 31682, 64560, 48314, 15620, 15749, 15910, 32421, 16164, 16273, -1,
16495, 16605, 348, 506, 16985, 17148, 33606, 50128, 1086, 1265, 17776, 17852, 1595, 1774, 18294, 2037, 2175, 18674, 35115, 51626, 51812, 35495, 35686, 52149, 35892, 36073, 52529, 52715, 19998, 20190, 3868, 4059, 20570, 4322, 4478, 20989, 21088, 4831, 4987, 54165, 54344, 38087, 38163, 54674, 54853, 38605, 55116, 55288, 38985, 39066, 39250, 55761, 55832, 39575, 39759, 56279, 40022, 40185, 56659, 23948, 7691, 7872, 24328, 24514, 24637, 24823, 8511, 8692, 25203, 41644, 58118, 58281, 42024, 58544, 58728, 42471, 42542, 59053, 59237, 59318, 43015, 43187, 59698, 43450, 43629, 60140, 60216, 43959, 44138, 11396, 11552, 28063, 28162, 11905, 12061, 28581, 12324, 12515, 28961, 29153, 45588, 45774, 62230, 62411, 46154, 62617, 62808, 46491, 46677, 63188, 30477, 14208, 14346, 30857, 14609, 14788, 31299, 31375, 15118, 15297, 48175, 64697, 32003, 32166, 15877, 16035, 32546, 32656, -1,
16496, 16606, 16762, 476, 16986, 17149, 33607, 50129, 17521, 1214, 1391, 17853, 18030, 1723, 18295, 18431, 2165, 18675, 35116, 35300, 51754, 35496, 35687, 52150, 52329, 36020, 52530, 52716, 19999, 3805, 20315, 3996, 4185, 20734, 4450, 4604, 21089, 21243, 4959, 37832, 54293, 54470, 38164, 38341, 54802, 38606, 38776, 55244, 38986, 55506, 39194, 39376, 55833, 56015, 39703, 56280, 56441, 40150, 56660, 23949, 24128, 7819, 24329, 24515, 8252, 8438, 24948, 8639, 8818, 58027, 41769, 58246, 58407, 42216, 58672, 58854, 42543, 42725, 59181, 42933, 59443, 43143, 43313, 59885, 43578, 43755, 60217, 60394, 44087, 27808, 11524, 11678, 28163, 28317, 12033, 28582, 28771, 12452, 28962, 12768, 61971, 62157, 45899, 62358, 62537, 46232, 46423, 62933, 46619, 46803, 14092, 30602, 14336, 14472, 31044, 14737, 14914, 31376, 31553, 15246, 64558, 48312, 15618, 15781, 32291, 16005, 16161, 16271, -1,
16497, 250, 16734, 477, 16987, 17150, 33608, 50130, 1136, 17647, 1342, 1518, 17981, 1724, 1919, 18423, 2166, 18676, 51556, 35244, 51755, 35497, 35688, 35817, 52278, 36021, 52531, 52717, 20000, 20188, 3930, 20441, 4124, 4349, 20860, 4578, 4731, 21217, 4960, 54215, 37958, 54421, 54597, 38292, 54803, 55032, 38734, 55245, 38987, 39121, 55632, 39322, 39503, 55961, 39704, 39929, 56408, 40151, 56661, 7616, 24077, 7820, 24330, 24516, 24635, 24821, 8563, 25074, 8767, 41642, 58152, 41895, 58374, 58599, 42342, 58800, 58981, 42671, 59182, 59316, 43058, 59569, 43271, 43500, 60011, 43706, 43882, 60345, 44088, 11423, 27934, 11652, 11805, 28291, 12034, 12259, 28710, 12453, 28963, 29151, 45586, 45772, 62282, 46025, 62486, 62615, 62806, 46548, 63059, 46747, 30475, 14217, 30728, 14464, 14659, 31170, 14865, 15041, 31504, 15247, 48173, 64695, 32001, 32164, 15906, 32417, 16133, 32654, -1,
16498, 16608, 351, 507, 636, 17113, 33609, 50131, 1087, 1268, 17779, 1526, 18037, 18175, 18236, 1979, 2158, 2287, 35118, 51629, 51813, 51942, 35623, 52152, 35895, 36074, 36203, 52657, 20001, 20193, 20322, 20478, 4221, 4252, 4443, 20954, 4701, 21212, 21370, 54166, 54347, 38090, 54605, 38348, 38520, 38547, 55058, 55237, 55366, 39067, 39253, 55764, 39511, 56022, 56185, 56216, 39959, 40143, 40272, 23951, 7694, 7873, 8002, 24456, 8311, 24765, 24894, 25073, 8816, 41647, 41776, 41960, 58471, 58502, 58665, 42408, 58923, 42666, 42852, 59321, 59450, 59629, 43372, 43399, 43571, 60082, 43829, 60340, 60521, 11397, 11555, 28066, 11813, 28324, 28515, 28546, 12289, 12445, 12574, 12766, 62030, 45716, 45845, 46024, 62535, 46296, 62745, 62874, 63058, 46801, 30480, 30609, 30788, 14531, 14592, 14730, 31241, 14988, 31499, 31680, 64556, 48310, 15654, 32131, 32260, 32416, 16159, 16269, -1,
16499, 16609, 16763, 479, 637, 17114, 33610, 50132, 17524, 1215, 1394, 1527, 1663, 18165, 18237, 18414, 2107, 2288, 35119, 35301, 51757, 51943, 35624, 52153, 52330, 36023, 36204, 52658, 20002, 3808, 3966, 20450, 20604, 20699, 4380, 4569, 4702, 4858, 21340, 37835, 54294, 54473, 54606, 54776, 38476, 38548, 38725, 55186, 55367, 55509, 39195, 39379, 39512, 39673, 56150, 56217, 56399, 40087, 40273, 23952, 24129, 7822, 8003, 24457, 24694, 8380, 8561, 25022, 25199, 58030, 58216, 41904, 42086, 42153, 58630, 58791, 58924, 59108, 42794, 42936, 43117, 59578, 59755, 59827, 43527, 43697, 43830, 44009, 60468, 27811, 11525, 11681, 11814, 12003, 28452, 28547, 28701, 12417, 12575, 29149, 45645, 62099, 62280, 45973, 46150, 62679, 46360, 46546, 63002, 63184, 14095, 14276, 30737, 30914, 30986, 14720, 14856, 14989, 15168, 31627, 48171, 64693, 32037, 15746, 15904, 32388, 32542, 32652, -1,
16500, 251, 16737, 480, 638, 17115, 33611, 50133, 1139, 17650, 1343, 17919, 1655, 18166, 1902, 18365, 2108, 2289, 51557, 35247, 51758, 51944, 35625, 35818, 52281, 36024, 36205, 52659, 20003, 20191, 20349, 4092, 20578, 4314, 20825, 4508, 21114, 4830, 21341, 54218, 37961, 54422, 38264, 54734, 38477, 54981, 38676, 55187, 55368, 39124, 55635, 39323, 55929, 39640, 56151, 39887, 56345, 40088, 40274, 7617, 24080, 7823, 8004, 24458, 8309, 24763, 24944, 8687, 25150, 41645, 41831, 58342, 42032, 58536, 42279, 58758, 42596, 59052, 42795, 59319, 59500, 43243, 59706, 43442, 59953, 43655, 60265, 43958, 60469, 11426, 27937, 11653, 28259, 11942, 28453, 12189, 28675, 12418, 12576, 12764, 62028, 45714, 45895, 62406, 46101, 46294, 62743, 62929, 46672, 63130, 30478, 30659, 14402, 30865, 14601, 31112, 14848, 31424, 15117, 31628, 64554, 48308, 15652, 32129, 32287, 16030, 32516, 16267, -1,
16501, 16610, 16764, 16893, 607, 17116, 33612, 50134, 17526, 17655, 17791, 1471, 1650, 1779, 18238, 18415, 18544, 2235, 35120, 35302, 35431, 51885, 35626, 52154, 52331, 52460, 36151, 52660, 20004, 20222, 3936, 4065, 4219, 20701, 20830, 20986, 4636, 4825, 4954, 37837, 37966, 38136, 54550, 54729, 54858, 38549, 38726, 38855, 55314, 55511, 55640, 55801, 39451, 39635, 39764, 56218, 56400, 56529, 40215, 23953, 24130, 24259, 7950, 24459, 8308, 24817, 8508, 8637, 8814, 41704, 58158, 58287, 58469, 42155, 42284, 42468, 58886, 59047, 59176, 59373, 43064, 43193, 43370, 59829, 59958, 60137, 43783, 43953, 44082, 27813, 27942, 28131, 11781, 11937, 12066, 28548, 28702, 28831, 12545, 12763, 62027, 45768, 62227, 62356, 62533, 46293, 62802, 46488, 46617, 46799, 30532, 14223, 14352, 14529, 30988, 31117, 31296, 14976, 15112, 15241, 64553, 48307, 15651, 32160, 15874, 16003, 16157, 16266, -1,
16502, 252, 16738, 16894, 608, 17117, 33613, 50135, 1141, 1279, 17783, 17906, 1599, 1780, 1903, 18366, 18545, 2236, 51558, 35248, 35432, 51886, 35627, 35819, 52282, 52461, 36152, 52661, 20005, 3837, 20319, 20475, 4193, 4316, 4474, 20958, 21081, 4764, 4955, 54220, 54392, 38094, 38217, 54678, 54859, 54982, 38677, 38856, 55315, 39126, 39289, 55768, 55891, 39579, 39765, 39888, 56346, 56530, 40216, 7618, 24081, 24260, 7951, 24460, 24691, 8432, 24891, 25070, 8765, 58087, 41773, 41957, 58415, 58538, 58724, 42412, 42535, 59014, 59177, 42988, 59447, 59626, 43321, 43444, 43625, 60086, 60209, 43911, 44083, 11428, 11619, 28070, 28193, 11909, 12067, 12190, 28676, 28832, 12546, 29146, 45642, 62151, 45842, 46021, 62484, 62676, 46417, 62871, 63055, 46745, 14147, 30606, 30785, 14480, 14603, 14784, 31245, 31368, 15104, 15242, 48168, 64690, 32034, 15775, 32257, 32413, 16131, 32649, -1,
16503, 253, 382, 16866, 609, 17118, 33614, 50136, 17535, 1269, 1398, 17907, 18036, 1727, 1904, 2033, 18494, 2237, 51559, 51688, 35376, 51887, 35628, 35820, 35949, 52410, 36153, 52662, 20006, 20220, 3963, 20447, 20576, 20730, 4444, 4573, 21082, 21211, 4892, 37880, 54348, 54477, 38218, 38347, 54806, 54983, 55112, 38805, 55316, 55545, 39254, 39383, 55892, 56021, 39707, 39889, 40018, 56474, 40217, 7619, 7748, 24209, 7952, 24461, 8306, 24815, 8558, 25019, 25148, 41702, 58213, 41901, 42030, 42212, 58666, 58795, 42536, 42665, 59142, 59371, 43114, 59575, 59704, 59881, 43572, 43701, 60210, 60339, 44039, 27875, 11556, 11685, 28194, 28323, 12037, 12191, 12320, 28804, 12547, 12761, 62025, 45766, 62277, 45970, 46099, 46291, 62800, 46543, 62999, 63128, 30530, 14273, 30734, 30863, 31040, 14731, 14860, 31369, 31498, 15232, 64551, 48305, 15649, 32158, 15901, 32385, 32514, 16264, -1,
121, 16621, 364, 16875, 618, 17129, 17251, 17279, 17496, 1239, 17750, 17877, 1620, 18131, 1874, 18385, 2128, 18639, 2372, 2430, 18883, 18941, 2626, 2684, 19137, 19195, 2880, 2938, 20089, 3770, 20281, 4024, 20535, 4278, 20789, 4532, 4659, 21170, 4913, 5030, 5111, 21541, 21622, 5284, 5365, 5411, 5492, 21922, 22003, 5665, 5746, 22176, 22257, 5919, 6000, 22430, 22511, 6173, 6254, 7661, 24172, 7915, 24426, 8169, 8219, 24730, 8473, 24984, 8727, 25233, 25314, 8976, 9057, 25487, 25568, 9230, 9311, 25741, 25822, 9484, 9565, 25995, 26076, 26122, 26203, 9865, 9946, 26376, 26457, 11480, 27991, 11734, 11861, 28372, 12115, 28626, 12369, 28880, 12623, 29063, 29189, 29247, 12932, 12990, 29443, 29501, 13186, 13244, 29697, 29755, 30522, 14265, 30776, 14519, 31030, 14773, 31284, 31411, 15154, 31665, 15360, 15388, 32027, 15770, 32281, 16024, 32535, 16263, -1,
120, 16616, 359, 16870, 613, 17124, 17379, 1023, 17486, 1229, 17740, 17867, 1610, 18121, 1864, 18375, 2118, 18629, 3012, 19454, 19523, 3197, 3266, 19708, 19777, 3451, 3520, 19962, 3704, 3760, 20271, 4014, 20525, 4268, 20779, 4522, 4649, 21160, 4903, 6310, 22775, 22821, 6518, 6564, 23029, 6691, 23156, 23202, 6899, 6945, 23410, 23456, 7153, 7199, 23664, 23710, 7407, 7453, 23918, 24040, 7783, 24294, 8037, 24548, 8214, 24725, 8468, 24979, 8722, 26513, 10210, 10256, 26721, 26767, 10464, 10510, 26975, 27021, 10718, 10764, 27229, 27275, 10972, 27402, 11099, 11145, 27610, 27656, 11353, 27854, 11597, 28108, 28235, 11978, 28489, 12232, 28743, 12486, 28997, 29062, 29829, 13503, 13572, 30014, 30083, 13757, 13826, 30268, 30337, 14011, 14128, 30639, 14382, 30893, 14636, 31147, 14890, 15017, 31528, 15271, 15488, 31900, 15638, 32149, 15892, 32403, 16146, 32646, -1,
122, 16625, 368, 16879, 622, 767, 50020, 33769, 17502, 1245, 17756, 17883, 1626, 18137, 18302, 2045, 18556, 2299, 35144, 51655, 35398, 51909, 52088, 52178, 35921, 52432, 36175, 36345, 3648, 3774, 20285, 4028, 20539, 20727, 4470, 20981, 21108, 4851, 21362, 37804, 54315, 38058, 38185, 54696, 38439, 38632, 55143, 38886, 55397, 55478, 39221, 55732, 55859, 39602, 56113, 56301, 40044, 56555, 40298, 23968, 7711, 24222, 7965, 8163, 8220, 8418, 24929, 8672, 25183, 58005, 41748, 58259, 42002, 42190, 58701, 42444, 42571, 59082, 42825, 42906, 59417, 43160, 59671, 59864, 43607, 60118, 60245, 43988, 60499, 27789, 11532, 28043, 28170, 11913, 28424, 28612, 12355, 28866, 12609, 12735, 61958, 62128, 45871, 62382, 46125, 46215, 46394, 62905, 46648, 63159, 14084, 30595, 14338, 30849, 31014, 14757, 31268, 31395, 15138, 31649, 64534, 48283, 15616, 15761, 32272, 16015, 32526, 16261, -1,
123, 16628, 371, 16882, 17023, 750, 50021, 33770, 17505, 1248, 17759, 1534, 18045, 1788, 18267, 2010, 18521, 18682, 35147, 51658, 35401, 35576, 52037, 52181, 35924, 52435, 52601, 36303, 3649, 3775, 3959, 20470, 4213, 20669, 4412, 20923, 4721, 21232, 4975, 37807, 54318, 38061, 54632, 38375, 54886, 38569, 55080, 38823, 39012, 55481, 39224, 55735, 39533, 56044, 39787, 56243, 39986, 56497, 56681, 23971, 7714, 24225, 24419, 8093, 24674, 8348, 8542, 25053, 8796, 58006, 58190, 41933, 58444, 42132, 58643, 42386, 58952, 42695, 59206, 42907, 43096, 59607, 43350, 59801, 43544, 60055, 43858, 60369, 44112, 27792, 11535, 28046, 11844, 28355, 12098, 28554, 12297, 28808, 28992, 29118, 45616, 62086, 62252, 45995, 62506, 62650, 46343, 46518, 63029, 46772, 14085, 14246, 30757, 14500, 30979, 14722, 31233, 15008, 31519, 15262, 48149, 64666, 32017, 15744, 15885, 32396, 16139, 32644, -1,
124, 16630, 373, 511, 17010, 751, 50022, 33771, 17506, 17662, 1405, 1504, 18015, 18171, 18269, 2012, 2170, 18649, 35149, 51660, 51832, 35529, 52038, 52183, 35926, 36089, 52563, 36304, 3650, 20215, 3903, 4084, 20595, 20670, 20849, 4592, 4668, 21179, 21358, 37808, 37992, 54503, 54574, 38317, 38501, 38571, 55082, 55268, 38951, 55482, 55661, 39404, 39480, 55991, 56170, 56245, 39988, 40169, 56625, 23973, 7716, 7907, 24353, 8094, 8289, 24798, 8476, 8667, 25178, 41678, 58134, 58315, 42058, 42133, 42312, 58823, 58899, 42642, 42821, 59352, 43035, 43221, 59732, 59802, 59986, 43729, 43800, 60311, 60495, 27793, 27972, 11715, 11791, 28302, 28481, 28556, 12299, 12480, 28936, 12733, 61999, 45740, 62214, 62377, 46120, 46265, 62774, 46471, 46643, 63154, 30502, 14213, 14371, 30882, 30980, 31136, 14879, 14978, 31489, 31645, 64532, 48281, 15632, 32141, 15872, 16010, 32521, 16259, -1,
125, 16631, 16767, 501, 17011, 752, 50023, 33772, 1150, 17634, 17788, 1505, 1659, 18143, 18270, 18426, 2140, 18650, 35150, 35320, 51788, 35530, 52039, 52184, 52345, 36054, 52564, 36305, 3651, 3830, 20340, 4031, 4210, 4337, 20798, 20975, 4669, 4846, 21307, 54248, 37936, 38118, 54575, 54757, 38445, 38572, 38756, 55210, 38952, 39149, 55610, 55787, 39481, 39658, 56119, 56246, 56425, 40116, 56626, 23974, 24163, 7844, 24354, 8095, 24672, 8413, 24923, 8604, 8793, 58061, 41803, 58262, 58441, 58568, 42261, 42438, 58900, 59077, 42770, 42967, 59477, 43163, 43347, 43474, 59930, 60112, 43801, 43983, 60439, 11460, 27921, 28098, 11792, 11969, 28430, 28557, 28736, 12427, 28937, 29116, 45614, 62123, 45865, 62342, 62503, 62648, 46389, 62899, 46599, 46769, 14117, 30627, 14341, 14497, 14624, 31108, 31262, 14979, 15133, 31617, 48147, 64664, 32015, 15756, 32266, 16000, 16136, 32642, -1,
126, 255, 16759, 502, 17012, 753, 50024, 33773, 17533, 1276, 17762, 17915, 1633, 18144, 1914, 18398, 2141, 18651, 51576, 35278, 51789, 35531, 52040, 35833, 52312, 36055, 52565, 36306, 3652, 20213, 3955, 20466, 4159, 20720, 4463, 20926, 21102, 4797, 21308, 37863, 54374, 38064, 38245, 54703, 38446, 55012, 38700, 55211, 38953, 55532, 39275, 55738, 55914, 39609, 56120, 39913, 56374, 40117, 56627, 7651, 24102, 7845, 24355, 8096, 8287, 24796, 8538, 25049, 8732, 41676, 58186, 41929, 58390, 42183, 58694, 42389, 42565, 59028, 42771, 59350, 43092, 59603, 43291, 59857, 43600, 60058, 60239, 43929, 60440, 27843, 11586, 28049, 28225, 11920, 28431, 12224, 28685, 12428, 28938, 12731, 61997, 45738, 62248, 45991, 62470, 46263, 62772, 46514, 63025, 46727, 30500, 14242, 30753, 14469, 31007, 14750, 31236, 31389, 15107, 31618, 64530, 48279, 15630, 32139, 15881, 32392, 16128, 16257, -1,
127, 254, 16765, 508, 17019, 762, 50040, 33785, 17527, 1270, 17781, 17908, 1651, 18162, 1905, 18416, 2159, 18670, 51560, 35303, 51814, 35557, 52068, 35821, 52332, 36075, 52586, 36329, 3683, 20194, 3937, 20448, 4191, 20702, 4445, 20956, 21083, 4826, 21337, 37838, 54349, 38092, 38219, 54730, 38473, 54984, 38727, 55238, 38981, 55512, 39255, 55766, 55893, 39636, 56147, 39890, 56401, 40144, 56655, 7620, 24131, 7874, 24385, 8128, 8255, 24766, 8509, 25020, 8763, 41648, 58159, 41902, 58413, 42156, 58667, 42410, 42537, 59048, 42791, 59322, 43065, 59576, 43319, 59830, 43573, 60084, 60211, 43954, 60465, 27814, 11557, 28068, 28195, 11938, 28449, 12192, 28703, 12446, 28957, 12700, 61974, 45717, 62228, 45971, 62482, 46235, 62746, 46489, 63000, 46743, 30481, 14224, 30735, 14478, 30989, 14732, 31243, 31370, 15113, 31624, 64518, 48263, 15621, 32132, 15875, 32386, 16129, 16256, -1
};

const char *c5gai_typeNames[4] = {
	"undefined",
	"blade",
	"versor",
	"multivector"
};
// layer 0 functions are always pure C, unless custom float class if used
extern "C" {

char *c5gai_basisElementNames[128] = {
(char*)"1",
(char*)"e1",
(char*)"e2",
(char*)"e3",
(char*)"e4",
(char*)"e5",
(char*)"no",
(char*)"ni",
(char*)"e1^e2",
(char*)"e1^e3",
(char*)"e2^e3",
(char*)"e1^e4",
(char*)"e2^e4",
(char*)"e3^e4",
(char*)"e1^e5",
(char*)"e2^e5",
(char*)"e3^e5",
(char*)"e4^e5",
(char*)"e1^no",
(char*)"e2^no",
(char*)"e3^no",
(char*)"e4^no",
(char*)"e5^no",
(char*)"e1^ni",
(char*)"e2^ni",
(char*)"e3^ni",
(char*)"e4^ni",
(char*)"e5^ni",
(char*)"no^ni",
(char*)"e1^e2^e3",
(char*)"e1^e2^e4",
(char*)"e1^e3^e4",
(char*)"e2^e3^e4",
(char*)"e1^e2^e5",
(char*)"e1^e3^e5",
(char*)"e2^e3^e5",
(char*)"e1^e4^e5",
(char*)"e2^e4^e5",
(char*)"e3^e4^e5",
(char*)"e1^e2^no",
(char*)"e1^e3^no",
(char*)"e2^e3^no",
(char*)"e1^e4^no",
(char*)"e2^e4^no",
(char*)"e3^e4^no",
(char*)"e1^e5^no",
(char*)"e2^e5^no",
(char*)"e3^e5^no",
(char*)"e4^e5^no",
(char*)"e1^e2^ni",
(char*)"e1^e3^ni",
(char*)"e2^e3^ni",
(char*)"e1^e4^ni",
(char*)"e2^e4^ni",
(char*)"e3^e4^ni",
(char*)"e1^e5^ni",
(char*)"e2^e5^ni",
(char*)"e3^e5^ni",
(char*)"e4^e5^ni",
(char*)"e1^no^ni",
(char*)"e2^no^ni",
(char*)"e3^no^ni",
(char*)"e4^no^ni",
(char*)"e5^no^ni",
(char*)"e1^e2^e3^e4",
(char*)"e1^e2^e3^e5",
(char*)"e1^e2^e4^e5",
(char*)"e1^e3^e4^e5",
(char*)"e2^e3^e4^e5",
(char*)"e1^e2^e3^no",
(char*)"e1^e2^e4^no",
(char*)"e1^e3^e4^no",
(char*)"e2^e3^e4^no",
(char*)"e1^e2^e5^no",
(char*)"e1^e3^e5^no",
(char*)"e2^e3^e5^no",
(char*)"e1^e4^e5^no",
(char*)"e2^e4^e5^no",
(char*)"e3^e4^e5^no",
(char*)"e1^e2^e3^ni",
(char*)"e1^e2^e4^ni",
(char*)"e1^e3^e4^ni",
(char*)"e2^e3^e4^ni",
(char*)"e1^e2^e5^ni",
(char*)"e1^e3^e5^ni",
(char*)"e2^e3^e5^ni",
(char*)"e1^e4^e5^ni",
(char*)"e2^e4^e5^ni",
(char*)"e3^e4^e5^ni",
(char*)"e1^e2^no^ni",
(char*)"e1^e3^no^ni",
(char*)"e2^e3^no^ni",
(char*)"e1^e4^no^ni",
(char*)"e2^e4^no^ni",
(char*)"e3^e4^no^ni",
(char*)"e1^e5^no^ni",
(char*)"e2^e5^no^ni",
(char*)"e3^e5^no^ni",
(char*)"e4^e5^no^ni",
(char*)"e1^e2^e3^e4^e5",
(char*)"e1^e2^e3^e4^no",
(char*)"e1^e2^e3^e5^no",
(char*)"e1^e2^e4^e5^no",
(char*)"e1^e3^e4^e5^no",
(char*)"e2^e3^e4^e5^no",
(char*)"e1^e2^e3^e4^ni",
(char*)"e1^e2^e3^e5^ni",
(char*)"e1^e2^e4^e5^ni",
(char*)"e1^e3^e4^e5^ni",
(char*)"e2^e3^e4^e5^ni",
(char*)"e1^e2^e3^no^ni",
(char*)"e1^e2^e4^no^ni",
(char*)"e1^e3^e4^no^ni",
(char*)"e2^e3^e4^no^ni",
(char*)"e1^e2^e5^no^ni",
(char*)"e1^e3^e5^no^ni",
(char*)"e2^e3^e5^no^ni",
(char*)"e1^e4^e5^no^ni",
(char*)"e2^e4^e5^no^ni",
(char*)"e3^e4^e5^no^ni",
(char*)"e1^e2^e3^e4^e5^no",
(char*)"e1^e2^e3^e4^e5^ni",
(char*)"e1^e2^e3^e4^no^ni",
(char*)"e1^e2^e3^e5^no^ni",
(char*)"e1^e2^e4^e5^no^ni",
(char*)"e1^e3^e4^e5^no^ni",
(char*)"e2^e3^e4^e5^no^ni",
(char*)"e1^e2^e3^e4^e5^no^ni"
};

bool c5gai_basisElementNamesAllocated[128] = {
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false
};

int c5gai_gradeSize[8] = {1, 7, 21, 35, 35, 21, 7, 1};
int c5gai_mvSize[256] = {0, 1, 7, 8, 21, 22, 28, 29, 35, 36, 42, 43, 56, 57, 63, 64, 35, 36, 42, 43, 56, 57, 63, 64, 70, 71, 77, 78, 91, 92, 98, 99, 21, 22, 28, 29, 42, 43, 49, 50, 56, 57, 63, 64, 77, 78, 84, 85, 56, 57, 63, 64, 77, 78, 84, 85, 91, 92, 98, 99, 112, 113, 119, 120, 7, 8, 14, 15, 28, 29, 35, 36, 42, 43, 49, 50, 63, 64, 70, 71, 42, 43, 49, 50, 63, 64, 70, 71, 77, 78, 84, 85, 98, 99, 105, 106, 28, 29, 35, 36, 49, 50, 56, 57, 63, 64, 70, 71, 84, 85, 91, 92, 63, 64, 70, 71, 84, 85, 91, 92, 98, 99, 105, 106, 119, 120, 126, 127, 1, 2, 8, 9, 22, 23, 29, 30, 36, 37, 43, 44, 57, 58, 64, 65, 36, 37, 43, 44, 57, 58, 64, 65, 71, 72, 78, 79, 92, 93, 99, 100, 22, 23, 29, 30, 43, 44, 50, 51, 57, 58, 64, 65, 78, 79, 85, 86, 57, 58, 64, 65, 78, 79, 85, 86, 92, 93, 99, 100, 113, 114, 120, 121, 8, 9, 15, 16, 29, 30, 36, 37, 43, 44, 50, 51, 64, 65, 71, 72, 43, 44, 50, 51, 64, 65, 71, 72, 78, 79, 85, 86, 99, 100, 106, 107, 29, 30, 36, 37, 50, 51, 57, 58, 64, 65, 71, 72, 85, 86, 92, 93, 64, 65, 71, 72, 85, 86, 92, 93, 99, 100, 106, 107, 120, 121, 127, 128};

const int c5gai_bevt0[1] = {-1};
const int c5gai_bevt1[7] = {0, 1, 2, 3, 4, 5, 6};
const int c5gai_bevt2[21] = {0, 0, 1, 0, 1, 2, 0, 1, 2, 3, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5};
const int c5gai_bevt3[35] = {0, 0, 0, 1, 0, 0, 1, 0, 1, 2, 0, 0, 1, 0, 1, 2, 0, 1, 2, 3, 0, 0, 1, 0, 1, 2, 0, 1, 2, 3, 0, 1, 2, 3, 4};
const int c5gai_bevt4[35] = {0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 2, 0, 0, 0, 1, 0, 0, 1, 0, 1, 2, 0, 0, 1, 0, 1, 2, 0, 1, 2, 3};
const int c5gai_bevt5[21] = {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 2};
const int c5gai_bevt6[7] = {0, 0, 0, 0, 0, 0, 1};
const int c5gai_bevt7[1] = {0};
const int *c5gai_bevt[8] = { // bevt = basis element vector table
	c5gai_bevt0,
	c5gai_bevt1,
	c5gai_bevt2,
	c5gai_bevt3,
	c5gai_bevt4,
	c5gai_bevt5,
	c5gai_bevt6,
	c5gai_bevt7
};
const int c5gai_newBevt[128] = { // bevt = basis element vector table
	0, 1, 2, 4, 8, 16, 32, 64, 3, 5, 6, 9, 10, 12, 17, 18, 20, 24, 33, 34, 36, 40, 48, 65, 66, 68, 72, 80, 96, 7, 11, 13, 14, 19, 21, 22, 25, 26, 28, 35, 37, 38, 41, 42, 44, 49, 50, 52, 56, 67, 69, 70, 73, 74, 76, 81, 82, 84, 88, 97, 98, 100, 104, 112, 15, 23, 27, 29, 30, 39, 43, 45, 46, 51, 53, 54, 57, 58, 60, 71, 75, 77, 78, 83, 85, 86, 89, 90, 92, 99, 101, 102, 105, 106, 108, 113, 114, 116, 120, 31, 47, 55, 59, 61, 62, 79, 87, 91, 93, 94, 103, 107, 109, 110, 115, 117, 118, 121, 122, 124, 63, 95, 111, 119, 123, 125, 126, 127
};

const int c5gai_omct[384] = { // omct = Outer Morphism Construction Table
	-1, -1, 0,
	1, -1, 1,
	2, -1, 1,
	3, -1, 1,
	4, -1, 1,
	5, -1, 1,
	6, -1, 1,
	7, -1, 1,
	1, 2, 1,
	1, 3, 1,
	2, 3, 1,
	1, 4, 1,
	2, 4, 1,
	3, 4, 1,
	1, 5, 1,
	2, 5, 1,
	3, 5, 1,
	4, 5, 1,
	1, 6, 1,
	2, 6, 1,
	3, 6, 1,
	4, 6, 1,
	5, 6, 1,
	1, 7, 1,
	2, 7, 1,
	3, 7, 1,
	4, 7, 1,
	5, 7, 1,
	6, 7, 1,
	8, 3, 1,
	8, 4, 1,
	9, 4, 1,
	10, 4, 1,
	8, 5, 1,
	9, 5, 1,
	10, 5, 1,
	11, 5, 1,
	12, 5, 1,
	13, 5, 1,
	8, 6, 1,
	9, 6, 1,
	10, 6, 1,
	11, 6, 1,
	12, 6, 1,
	13, 6, 1,
	14, 6, 1,
	15, 6, 1,
	16, 6, 1,
	17, 6, 1,
	8, 7, 1,
	9, 7, 1,
	10, 7, 1,
	11, 7, 1,
	12, 7, 1,
	13, 7, 1,
	14, 7, 1,
	15, 7, 1,
	16, 7, 1,
	17, 7, 1,
	18, 7, 1,
	19, 7, 1,
	20, 7, 1,
	21, 7, 1,
	22, 7, 1,
	29, 4, 1,
	29, 5, 1,
	30, 5, 1,
	31, 5, 1,
	32, 5, 1,
	29, 6, 1,
	30, 6, 1,
	31, 6, 1,
	32, 6, 1,
	33, 6, 1,
	34, 6, 1,
	35, 6, 1,
	36, 6, 1,
	37, 6, 1,
	38, 6, 1,
	29, 7, 1,
	30, 7, 1,
	31, 7, 1,
	32, 7, 1,
	33, 7, 1,
	34, 7, 1,
	35, 7, 1,
	36, 7, 1,
	37, 7, 1,
	38, 7, 1,
	39, 7, 1,
	40, 7, 1,
	41, 7, 1,
	42, 7, 1,
	43, 7, 1,
	44, 7, 1,
	45, 7, 1,
	46, 7, 1,
	47, 7, 1,
	48, 7, 1,
	64, 5, 1,
	64, 6, 1,
	65, 6, 1,
	66, 6, 1,
	67, 6, 1,
	68, 6, 1,
	64, 7, 1,
	65, 7, 1,
	66, 7, 1,
	67, 7, 1,
	68, 7, 1,
	69, 7, 1,
	70, 7, 1,
	71, 7, 1,
	72, 7, 1,
	73, 7, 1,
	74, 7, 1,
	75, 7, 1,
	76, 7, 1,
	77, 7, 1,
	78, 7, 1,
	99, 6, 1,
	99, 7, 1,
	100, 7, 1,
	101, 7, 1,
	102, 7, 1,
	103, 7, 1,
	104, 7, 1,
	120, 7, 1
};
// end of the layer 0 functions
} /* end of 'extern "C"' */



c5gai c5gai::e1(GRADE1, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
c5gai c5gai::e2(GRADE1, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0);
c5gai c5gai::e3(GRADE1, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0);
c5gai c5gai::e4(GRADE1, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0);
c5gai c5gai::e5(GRADE1, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0);
c5gai c5gai::no(GRADE1, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
c5gai c5gai::ni(GRADE1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0);
c5gai *c5gai::bv[7] = {&c5gai::e1, &c5gai::e2, &c5gai::e3, &c5gai::e4, &c5gai::e5, &c5gai::no, &c5gai::ni};
c5gai c5gai::I(GRADE7, 1.0);
c5gai c5gai::Ii(GRADE7, 1.0);

const int c5gai::dim = 7;
const int c5gai::nbCoor = 128;

c5gai::c5gai() {
	usage = 0;
	c = NULL;
}

c5gai::c5gai(const c5gai &a) {
	usage = 0;
	copy(a);
}

c5gai::c5gai(int gradeUsage, const double *coordinates) {
	usage = 0;
	set(gradeUsage, coordinates);
}

c5gai::~c5gai() {
	setUsage(0);
}

c5gai::c5gai(int grade, double c0) {
	usage = 0;
	set(grade, c0);
}

c5gai::c5gai(int grade, double c0, double c1, double c2, double c3, double c4, double c5, double c6) {
	usage = 0;
	set(grade, c0, c1, c2, c3, c4, c5, c6);
}

c5gai::c5gai(int grade, double c0, double c1, double c2, double c3, double c4, double c5, double c6, double c7, double c8, double c9, double c10, double c11, double c12, double c13, double c14, double c15, double c16, double c17, double c18, double c19, double c20) {
	usage = 0;
	set(grade, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20);
}

c5gai::c5gai(int grade, double c0, double c1, double c2, double c3, double c4, double c5, double c6, double c7, double c8, double c9, double c10, double c11, double c12, double c13, double c14, double c15, double c16, double c17, double c18, double c19, double c20, double c21, double c22, double c23, double c24, double c25, double c26, double c27, double c28, double c29, double c30, double c31, double c32, double c33, double c34) {
	usage = 0;
	set(grade, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34);
}

void c5gai::null() {
	setUsage(0);
}

void c5gai::set(int gradeUsage, const double *coordinates) {
	setUsage((c5gai_mvSize[gradeUsage] << 8) | gradeUsage);
	c5gai_copy(c, coordinates, c5gai_mvSize[gradeUsage]);
}

void c5gai::setScalar(const double coordinates[1]) {
	setUsage(257);
	c5gai_copy(c, coordinates, 1);
}

void c5gai::setVector(const double coordinates[7]) {
	setUsage(1794);
	c5gai_copy(c, coordinates, 7);
}

void c5gai::set2Vector(const double coordinates[21]) {
	setUsage(5380);
	c5gai_copy(c, coordinates, 21);
}

void c5gai::set3Vector(const double coordinates[35]) {
	setUsage(8968);
	c5gai_copy(c, coordinates, 35);
}

void c5gai::set4Vector(const double coordinates[35]) {
	setUsage(8976);
	c5gai_copy(c, coordinates, 35);
}

void c5gai::set5Vector(const double coordinates[21]) {
	setUsage(5408);
	c5gai_copy(c, coordinates, 21);
}

void c5gai::set6Vector(const double coordinates[7]) {
	setUsage(1856);
	c5gai_copy(c, coordinates, 7);
}

void c5gai::set7Vector(const double coordinates[1]) {
	setUsage(384);
	c5gai_copy(c, coordinates, 1);
}

int c5gai::set(int grade, double c0) {
	setUsage(grade | (c5gai_mvSize[grade] << 8));
	c[0] = c0;
	return 0;
}

int c5gai::set(int grade, double c0, double c1, double c2, double c3, double c4, double c5, double c6) {
	setUsage(grade | (c5gai_mvSize[grade] << 8));
	c[0] = c0;
	c[1] = c1;
	c[2] = c2;
	c[3] = c3;
	c[4] = c4;
	c[5] = c5;
	c[6] = c6;
	return 0;
}

int c5gai::set(int grade, double c0, double c1, double c2, double c3, double c4, double c5, double c6, double c7, double c8, double c9, double c10, double c11, double c12, double c13, double c14, double c15, double c16, double c17, double c18, double c19, double c20) {
	setUsage(grade | (c5gai_mvSize[grade] << 8));
	c[0] = c0;
	c[1] = c1;
	c[2] = c2;
	c[3] = c3;
	c[4] = c4;
	c[5] = c5;
	c[6] = c6;
	c[7] = c7;
	c[8] = c8;
	c[9] = c9;
	c[10] = c10;
	c[11] = c11;
	c[12] = c12;
	c[13] = c13;
	c[14] = c14;
	c[15] = c15;
	c[16] = c16;
	c[17] = c17;
	c[18] = c18;
	c[19] = c19;
	c[20] = c20;
	return 0;
}

int c5gai::set(int grade, double c0, double c1, double c2, double c3, double c4, double c5, double c6, double c7, double c8, double c9, double c10, double c11, double c12, double c13, double c14, double c15, double c16, double c17, double c18, double c19, double c20, double c21, double c22, double c23, double c24, double c25, double c26, double c27, double c28, double c29, double c30, double c31, double c32, double c33, double c34) {
	setUsage(grade | (c5gai_mvSize[grade] << 8));
	c[0] = c0;
	c[1] = c1;
	c[2] = c2;
	c[3] = c3;
	c[4] = c4;
	c[5] = c5;
	c[6] = c6;
	c[7] = c7;
	c[8] = c8;
	c[9] = c9;
	c[10] = c10;
	c[11] = c11;
	c[12] = c12;
	c[13] = c13;
	c[14] = c14;
	c[15] = c15;
	c[16] = c16;
	c[17] = c17;
	c[18] = c18;
	c[19] = c19;
	c[20] = c20;
	c[21] = c21;
	c[22] = c22;
	c[23] = c23;
	c[24] = c24;
	c[25] = c25;
	c[26] = c26;
	c[27] = c27;
	c[28] = c28;
	c[29] = c29;
	c[30] = c30;
	c[31] = c31;
	c[32] = c32;
	c[33] = c33;
	c[34] = c34;
	return 0;
}

const char *c5gai::fpPrecision = "%2.2f";
const char *c5gai::stringStartDelimiter = "";
const char *c5gai::stringEndDelimiter = "";

int c5gai::setFPPrecision(const char *prec) {
	if (prec == NULL) return -1;
	fpPrecision = prec;
	return 0;
}

int c5gai::setStringDelimiters(char start, char end) {
	if ((start < 0) || (end < 0)) return -1;
	static char startStr[2], endStr[2];

	startStr[0] = start; startStr[1] = 0;
	stringStartDelimiter = startStr;

	endStr[0] = end; endStr[1] = 0;
	stringEndDelimiter = endStr;
	return 0;
}

const char *c5gai::string(const char *prec /*= NULL*/) const {
	// todo: this whole function is not very (mt-)safe
	static char tmpResult[1024]; 
	tmpResult[0] = 0;

	const int maxResult = 16; 
	static char *result[maxResult];
	static int currentResult = 0;

	char *rBuf = tmpResult;
	int i, j, k = 0, ia = 0, gu = gradeUsage(), s = c5gai_mvSize[gu], p = 0, cnt = 0;
	char buf[32];	

	if (prec == NULL) prec = fpPrecision;
	sprintf(buf, "%cs%s%cs%cs", '%', prec, '%', '%');
	rBuf += sprintf(rBuf, "%s", stringStartDelimiter);
	for (i = 0; i <= 7; i++)
		if (gu & (1 << i)) {
			for (j = 0; j < c5gai_gradeSize[i]; j++) {
				if (fabs(c[k]) > 1e-14) {
					cnt++;
					rBuf += sprintf(rBuf, buf, (p) ? " + " : "", float(c[k]), (i) ? "*" : "", (i) ? c5gai_basisElementNames[ia] : "");
					p = 1;
				}
				k++; ia++;
			}
		}
		else ia += c5gai_gradeSize[i];

	if (cnt == 0) rBuf += sprintf(rBuf, "0");
	rBuf += sprintf(rBuf, "%s", stringEndDelimiter);

	k = (int)(strlen(tmpResult) + 1);
	rBuf = result[currentResult] = (char*)realloc(result[currentResult], k);
	currentResult = (currentResult + 1) % maxResult;

	if (rBuf == NULL) {
		printf("Memory allocation failure for %d bytes\n", k);
		return tmpResult; // at least return something...
	}
	else {
		memcpy(rBuf, tmpResult, k);
		return rBuf;
	}
}

void c5gai::print(const char *text /*= NULL*/, const char *prec /*= NULL*/) const {
	fprint(stdout, text, prec);
}

void c5gai::fprint(FILE *F, const char *text /*= NULL*/, const char *prec /*= NULL*/) const {
	if (text) fprintf(F, text);
	fprintf(F, "%s\n", string(prec));
}

int c5gai::renameBasisVector(const char *oldName, const char *newName) {
    unsigned int totalNb = 0;
    for (unsigned int j = 0; j < 128;j++) {
        // count number of occurances of oldName:
        char *ptr = c5gai_basisElementNames[j];
        int nb = 0;
        do {
            ptr = strstr(ptr, oldName);
            
            if (ptr != NULL) {
                nb ++;
                ptr += strlen(oldName);
            }
        } while (ptr);
        totalNb += nb;
        
        // if oldName occured:
        if (nb) {
            // allocate mem for new name
            char *buf = (char*)malloc(
                strlen(c5gai_basisElementNames[j]) + 1 + 
                nb * (strlen(newName) - strlen(oldName)));
            if (buf == NULL) return -1;

            // form new name
            ptr = c5gai_basisElementNames[j];
            char *buf2 = buf, *ptr2 = ptr;
            do {
                ptr = strstr(ptr, oldName);
                if (ptr != NULL) {
                    memcpy(buf2, ptr2, ptr - ptr2);
                    buf2 += ptr - ptr2;
                    
                    strcpy(buf2, newName);
                    buf2 += strlen(newName);
                    
                    ptr += strlen(oldName);        
                    ptr2 = ptr;
                }
                else {
                    strcpy(buf2, ptr2);
                }
            } while (ptr);
            
            // set result:
            if (c5gai_basisElementNamesAllocated[j])
                free(c5gai_basisElementNames[j]);
            c5gai_basisElementNames[j] = buf;
            c5gai_basisElementNamesAllocated[j] = true;
        }
    }
    return (totalNb == 0) ? -1 : 0;
}



int c5gai::nbBlocksAvailable[128 + 1];
int c5gai::maxBlocksAvailable[128 + 1];
double **c5gai::blocks[128 + 1];

void c5gai::doubleMaxBlocks(int n) {
	maxBlocksAvailable[n] = (maxBlocksAvailable[n]) ? maxBlocksAvailable[n] * 2 : 2;
	blocks[n] = (double**)realloc(blocks[n], sizeof(double*) * maxBlocksAvailable[n]);  // todo: check mem alloc
}

void c5gai::addBlocks(int n) {
	const int nb = 128; // nb = just a constant
	int i;
	double *newBlocks = (double*)calloc(sizeof(double) * n, nb);	// todo: check mem alloc
	while (maxBlocksAvailable[n] < nbBlocksAvailable[n] + nb) doubleMaxBlocks(n);
	for (i = 0; i < nb; i++)
		blocks[n][nbBlocksAvailable[n]++] = newBlocks + i * n;
}

void c5gai::setUsage(int u) {
	int n1, n2;

	n1 = memUsage();
	n2 = u >> (7 + 1);
	usage = u;
	if (n1 == n2) return;
	if (n1) {	// free old mem
		if (maxBlocksAvailable[n1] == nbBlocksAvailable[n1]) doubleMaxBlocks(n1);
		blocks[n1][nbBlocksAvailable[n1]] = c;
		nbBlocksAvailable[n1]++;
	}
	if (n2) {	// alloc new mem
		if (!nbBlocksAvailable[n2]) addBlocks(n2);
		nbBlocksAvailable[n2]--;
		c = blocks[n2][nbBlocksAvailable[n2]];
	}
}

void c5gai::copy(const c5gai &a) {
	setUsage(a.usage);
	c5gai_copy(c, a.c, c5gai_mvSize[a.gradeUsage()]);
}

void c5gai::compress(double epsilon /* = 1e-14 */ ) {
	double cc[128];
	int i, j, ia = 0, ib = 0, gu = gradeUsage(), gu2 = 0, f, s;
	for (i = 0; i < 6; i++) {
		if (!(gu & (1 << i))) continue;

		s = c5gai_gradeSize[i];
		j = ia + s;
		f = 0;
		for (; ia < j; ia++)
			if ((c[ia] > epsilon) || (c[ia] < -epsilon)) {f = 1; break;}
		ia = j;
		if (f) {
			c5gai_copy(cc + ib, c + ia - s, s);
			ib += s;
			gu2 |= (1 << i);
		}
	}
	if (gu2 != gu) set(gu2, cc);
}

void c5gai::reverse(const c5gai &a) {
	double *pc[8];
	copy(a);
	if (!(a.gradeUsage() & 204)) return;
	expand( (const double**) pc);
	c5gai_reverse(pc);
}

void c5gai::cliffordConjugate(const c5gai &a) {
	double *pc[8];
	copy(a);
	if (!(a.gradeUsage() & 102)) return;
	expand( (const double**) pc);
	c5gai_cliffordConjugate(pc);
}

void c5gai::gradeInvolution(const c5gai &a) {
	double *pc[8];
	copy(a);
	if (!(a.gradeUsage() & 170)) return;
	expand( (const double**) pc);
	c5gai_involution(pc);
}

void c5gai::negate(const c5gai &a) {
	setUsage(a.usage);
	c5gai_negate(c, a.c, c5gai_mvSize[a.gradeUsage()]);
}

void c5gai::add(const c5gai &a, const c5gai &b) {
	double const *pa[8], *pb[8];
	double *pc[8];
	int gu = a.gradeUsage() | b.gradeUsage();
	setUsage(gu | (c5gai_mvSize[gu] << 8));
	if (a.gradeUsage() == b.gradeUsage()) c5gai_addSameGradeUsage(c, a.c, b.c, memUsage());
	else {
		a.expand(b, pa, pb);
		expand( (const double**) pc);
		c5gai_add(pa, pb, pc);
	}
}

void c5gai::add(double scalar, const c5gai &b) {
	double const *pa[8], *pb[8];
	double *pc[8];
	int gu = GRADE0 | b.gradeUsage();
	setUsage(gu | (c5gai_mvSize[gu] << 8));
	if (GRADE0 == b.gradeUsage()) c5gai_addSameGradeUsage(c, &scalar, b.c, memUsage());
	else {
		memset(pa + 1, 0, sizeof(double*) * 7);
		pa[0] = &scalar;
		b.expand(pb);
		expand( (const double**) pc);
		c5gai_add(pa, pb, pc);
	}
}

void c5gai::sub(const c5gai &a, const c5gai &b) {
	double const *pa[8], *pb[8];
	double *pc[8];
	int gu = a.gradeUsage() | b.gradeUsage();
	setUsage(gu | (c5gai_mvSize[gu] << 8));
	if (a.gradeUsage() == b.gradeUsage()) c5gai_subSameGradeUsage(c, a.c, b.c, memUsage());
	else {
		a.expand(b, pa, pb);
		expand( (const double**) pc);
		c5gai_sub(pa, pb, pc);
	}
}

void c5gai::sub(double scalar, const c5gai &b) {
	double const *pa[8], *pb[8];
	double *pc[8];
	int gu = GRADE0 | b.gradeUsage();
	setUsage(gu | (c5gai_mvSize[gu] << 8));
	if (GRADE0 == b.gradeUsage()) c5gai_subSameGradeUsage(c, &scalar, b.c, memUsage());
	else {
		memset(pa + 1, 0, sizeof(double*) * 7);
		pa[0] = &scalar;
		b.expand(pb);
		expand( (const double**) pc);
		c5gai_sub(pa, pb, pc);
	}
}

// take grade introduced 20020710
void c5gai::takeGrade(const c5gai &a, int gu) {
	int i, gua, s;
	double *bc; 
	const double *ac; 

	// determine what the grage usage 'gu' of the result should be:
	if (gu = ((gua = a.gradeUsage()) & gu)) { // only execute if any grade will be present in the result
		// set the grade usage of the result + allocate memory
		setUsage(gu | (c5gai_mvSize[gu] << 8)); 

		bc = c; ac = a.c; // pointers to the coordinates of source (ac) and result (bc)
		for (i = 1; i <= gu; i = i << 1) { // for each grade that is possibly in the result
			if (gua & i) { // determine if grade is present in source
				s = c5gai_mvSize[i]; // get the size of grade
				if (gu & i) { // determine if grade is present in result
					c5gai_copy(bc, ac, s); // copy coordinates
					bc += s; // increment pointer to result
				}
				ac += s; // increment pointer to source
			}
		}
	}
	else setUsage(0);
}

// added an epsilon value on 2002 07 28
int c5gai::highestGrade(const c5gai &a, double epsilon /* = 1e-14 */) {
	int g = 7, gu = a.gradeUsage(), ia = c5gai_mvSize[gu], size, i;
	const double *cptr;
	do {
		if (gu & (1 << g)) {
			size = c5gai_gradeSize[g];
			ia -= size;
			cptr = a.c + ia;
			for (i = 0; i < size; i++) 
				if (fabs(cptr[i]) > epsilon) {
					set(1 << g, a.c + ia);
					return g;
				}
		}
	} while ((--g)>= 0); // bug fix on 2003 11 16, used to be while ((--g) _>_ 0)
//return -1; // modification on 20020828

	setUsage(0);
	return 0;
}

int c5gai::grade() const {
	int g = 7, gu = gradeUsage(), idx = c5gai_mvSize[gu], size, i;
	const double *cptr;
	do {
		if (gu & (1 << g)) {
			size = c5gai_gradeSize[g];
			idx -= size;
			cptr = c + idx;
			for (i = 0; i < size; i++) if (cptr[i] != (double)0.0) return (gu ^ (1 << g)) ? -1 : g;
		}
	} while ((--g)>0);
	return 0;
}

int c5gai::maxGrade() const { 
	int g = 7, gu = gradeUsage(), idx = c5gai_mvSize[gu], size, i;
	const double *cptr;
	do {
		if (gu & (1 << g)) {
			size = c5gai_gradeSize[g];
			idx -= size;
			cptr = c + idx;
			for (i = 0; i < size; i++) if (cptr[i] != (double)0.0) return g;
		}
	} while ((--g)>0);
	return -1;
}

int c5gai::largestGrade() const {
	int g = 0, gu = gradeUsage(), size;
	double largest = -1.0, tmp;
	int lg = 0;
	const double *cptr = c;
	do {
		if (gu & (1 << g)) {
			size = c5gai_gradeSize[g];
			if ( (tmp = c5gai_norm_a(cptr, size)) > largest) {
				largest = tmp;
				lg = g;
			}
			gu ^= (1 << g);
			
			cptr += size;
		}
	} while (gu && ((++g)<=7));
	return lg;
}




int c5gai::versorInverse(const c5gai &a) {
	c5gai reverse, scalar;
	reverse.reverse(a);
	scalar.scp(a, reverse);
	if ((scalar.c == NULL) || (scalar.c[0] == 0.0f)) {null(); return -1;}
	scalar.c[0] = 1.0f / scalar.c[0];
	op(scalar, reverse);
	return 0;
}

void c5gai::expand(double matrix[], const int table[]) const {
	double val;
	int i, j = 0, t, g = -1, gi = 0, gu = gradeUsage(), ci = 0;
	for (i = -1; i < 128; i++) {
		if (i == -1) val = 0.0f;
		else {
			if (gi == 0) gi = c5gai_gradeSize[++g];
			if (gu & (1 << g)) val = c[ci++];
			else val = 0.0f;
			gi--;
		}
		while ((t = table[j++]) >= 0) {
			if (t & 32768) matrix[t & 16383] += (t & 16384) ? (double)-val : (double)val;
			else matrix[t & 16383] = (t & 16384) ? (double)-val : (double)val;
		}
	}
}

int c5gai::generalInverse(const c5gai &a) {
	static double matrix[16384];
	double *m[128] = {
		matrix + 0,
		matrix + 128,
		matrix + 256,
		matrix + 384,
		matrix + 512,
		matrix + 640,
		matrix + 768,
		matrix + 896,
		matrix + 1024,
		matrix + 1152,
		matrix + 1280,
		matrix + 1408,
		matrix + 1536,
		matrix + 1664,
		matrix + 1792,
		matrix + 1920,
		matrix + 2048,
		matrix + 2176,
		matrix + 2304,
		matrix + 2432,
		matrix + 2560,
		matrix + 2688,
		matrix + 2816,
		matrix + 2944,
		matrix + 3072,
		matrix + 3200,
		matrix + 3328,
		matrix + 3456,
		matrix + 3584,
		matrix + 3712,
		matrix + 3840,
		matrix + 3968,
		matrix + 4096,
		matrix + 4224,
		matrix + 4352,
		matrix + 4480,
		matrix + 4608,
		matrix + 4736,
		matrix + 4864,
		matrix + 4992,
		matrix + 5120,
		matrix + 5248,
		matrix + 5376,
		matrix + 5504,
		matrix + 5632,
		matrix + 5760,
		matrix + 5888,
		matrix + 6016,
		matrix + 6144,
		matrix + 6272,
		matrix + 6400,
		matrix + 6528,
		matrix + 6656,
		matrix + 6784,
		matrix + 6912,
		matrix + 7040,
		matrix + 7168,
		matrix + 7296,
		matrix + 7424,
		matrix + 7552,
		matrix + 7680,
		matrix + 7808,
		matrix + 7936,
		matrix + 8064,
		matrix + 8192,
		matrix + 8320,
		matrix + 8448,
		matrix + 8576,
		matrix + 8704,
		matrix + 8832,
		matrix + 8960,
		matrix + 9088,
		matrix + 9216,
		matrix + 9344,
		matrix + 9472,
		matrix + 9600,
		matrix + 9728,
		matrix + 9856,
		matrix + 9984,
		matrix + 10112,
		matrix + 10240,
		matrix + 10368,
		matrix + 10496,
		matrix + 10624,
		matrix + 10752,
		matrix + 10880,
		matrix + 11008,
		matrix + 11136,
		matrix + 11264,
		matrix + 11392,
		matrix + 11520,
		matrix + 11648,
		matrix + 11776,
		matrix + 11904,
		matrix + 12032,
		matrix + 12160,
		matrix + 12288,
		matrix + 12416,
		matrix + 12544,
		matrix + 12672,
		matrix + 12800,
		matrix + 12928,
		matrix + 13056,
		matrix + 13184,
		matrix + 13312,
		matrix + 13440,
		matrix + 13568,
		matrix + 13696,
		matrix + 13824,
		matrix + 13952,
		matrix + 14080,
		matrix + 14208,
		matrix + 14336,
		matrix + 14464,
		matrix + 14592,
		matrix + 14720,
		matrix + 14848,
		matrix + 14976,
		matrix + 15104,
		matrix + 15232,
		matrix + 15360,
		matrix + 15488,
		matrix + 15616,
		matrix + 15744,
		matrix + 15872,
		matrix + 16000,
		matrix + 16128,
		matrix + 16256

	};
	double maxp, *tmp, mult;
	int pi, i, j, k;
	double inverse[128];
	inverse[0] = 1.0f;

	// modification for custom float (december 9 2002)
	c5gai_null(inverse + 1, 128-1);

	int it = 0;

	a.expand(matrix, c5gai_expansionTable_gp);

	for (i = 0; i < 128; i++) {	// sweep all columns
		pi = i;
		maxp = (double)fabs(m[i][i]);

		for (j = i + 1; j < 128; j++) // find the max pivot
			if ((double)fabs(m[j][i]) > maxp)
				maxp = (double)fabs(m[pi = j][i]);
		if (inverse[pi] != 0.0f) it = 1;
		if (pi != i) { // swap rows
			if (inverse[i] != 0.0f) it = 1;
			tmp = m[pi]; m[pi] = m[i]; m[i] = tmp;
			if (it) maxp = inverse[pi]; inverse[pi] = inverse[i]; inverse[i] = maxp;
		}

		maxp = m[i][i];
		if (maxp == 0.0f) {	// singular matrix
			setUsage(0);
			return -1;
		}

		for (k = 0; k < 128; k++) { // sweep all other rows
			if (k == i) continue;
			mult = -m[k][i] / maxp;
			for (j = i + 1; j < 128; j++) m[k][j] += m[i][j] * mult;
			if (it) inverse[k] += inverse[i] * mult;
		}

		for (j = i+1; j < 128; j++) m[i][j] /= maxp; // divide the pivot row
		if (it) inverse[i] /= maxp;
	}
	set((1 << 8) - 1, inverse);
	return 0;
}

double c5gai::norm_a() const {
	return c5gai_norm_a(c, c5gai_mvSize[gradeUsage()]);
}

double c5gai::norm_b() const {
	c5gai r, s;
	r.reverse(*this);
	s.scp(*this, r);
	return s.scalar();
}

double c5gai::largestCoordinate() const {
	int nc = c5gai_mvSize[gradeUsage()], i;
	double maxC = 0.0, C;
	
	for (i = 0; i < nc; i++) {
		C = fabs(c[i]);
		if (C > maxC) maxC = C;
	}
	
	return maxC;
}

void c5gai::normalize(const c5gai &a, int norm) {
	double tmpC;
	switch(norm) {
	case 1:
		tmpC = 1.0f / (double)sqrt(a.norm_a());
		break;
	case 2:
		tmpC = 1.0f / (double)sqrt(fabs(a.norm_b()));
		break;
	}
	c5gai scalar(GRADE0, tmpC);
	op(a, scalar);
}

int c5gai::project(const c5gai &blade, const c5gai &a) {
	c5gai tmp, bladeInverse;
	bladeInverse.versorInverse(blade);
	tmp.lcont(a, blade);
	lcont(tmp, bladeInverse);
	return 0;
}

int c5gai::projectOntoVersor(const c5gai &versor, const c5gai &a) {
	c5gai tmp, versorInverse;
	versorInverse.versorInverse(versor);
	tmp.lcont(a, versor);
	gp(tmp, versorInverse);
	return 0;
}

int c5gai::reject(const c5gai &blade, const c5gai &a) {
	c5gai tmp, bladeInverse;
	// todo: check if this code is correct
	bladeInverse.versorInverse(blade);
	tmp.op(blade, a);
	lcont(bladeInverse, tmp);
	return 0;
}

int c5gai::versorInverseEM(const c5gai &a) {
	c5gai reverse, scalar;
	reverse.reverse(a);
	scalar.scpem(a, reverse);
	if (scalar.c[0] == 0.0f) return -1;
	scalar.c[0] = 1.0f / scalar.c[0];
	op(scalar, reverse);
	return 0;
}

int c5gai::projectEM(const c5gai &blade, const c5gai &a) {
	c5gai tmp, bladeInverse;
	bladeInverse.versorInverseEM(blade);
	tmp.lcem(a, blade);
	lcem(tmp, bladeInverse);
	return 0;
}

// todo: ensure everything is euclidean...
int c5gai::factor(c5gai factors[], int versor /* = 0 */) const {
	c5gai ca[2], tmp, fi, tmpbv;
	int ga = (versor) ? maxGrade() : grade(), n = 0, i, idx, cca = 0, gu = gradeUsage(), bev;
	double maxC, tmpC, mul, *c2;
	const double *tmpc;
	static double bvc[7] = {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};

	if (ga <= 0) return 0;

	// compute the multiplication factor require to make every factor of the same order of magnitude
	mul = (double)pow((double)sqrt((double)norm_a()), 1.0 / (double)ga);

	// setup current 'a'
	ca[0].copy(*this);

	// get the coordinate array for grade 'ga'
	tmpc = coordinates(1 << ga);

	// find out the maximum coordinate
	maxC = (double)fabs(tmpc[idx = 0]);
	for (i = 1; i < c5gai_gradeSize[ga]; i++) 
		if ( (tmpC = (double)fabs(ca[cca].c[i])) > maxC) {maxC = tmpC;idx = i;}

	// find out which basis vectors we have to project onto the blade
	idx += c5gai_mvSize[0xff >> (8 - ga)];
	bev = c5gai_newBevt[idx];

	// setup a basis vector
	tmpbv.setVector(bvc);
	c2 = tmpbv.c;
	idx = 0;

	i = 1;
	for (; ga > 1; ga--) {
		// find the next coordinate
		do { // note: the first coordinate is always skipped; this is note a bug 
			c2[idx++] = 0.0; // direct manipulation of 'bv'; hack
			c2[idx] = 1.0; // direct manipulation of 'bv'; hack
			i <<= 1;
		} while (!(bev & i));

		tmp.projectEM(ca[cca], tmpbv);
		factors[n].op(mul, tmp); // make all factors approximatelly the same size

		// remove the factor from the blade
		fi.versorInverseEM(factors[n++]); 
		if (versor) ca[cca ^ 1].gpem(fi, ca[cca]);
		else ca[cca ^ 1].lcem(fi, ca[cca]);
		cca ^= 1;
	}

	factors[n++].takeGrade(ca[cca], GRADE1);	// the last factor is equal to the remaining vector

	return n;
}


int c5gai::deltaProduct(const c5gai &a, const c5gai &b) {
	c5gai mv1;
	mv1.gpem(a, b);
	return this->highestGrade(mv1);
}

int c5gai::join(const c5gai &a, const c5gai &b, int algorithm /*= 1*/) {
	c5gai d, factors[7];
	int gj, ga = a.grade(), gb = b.grade(), gd;
	c5gai ca, cb;

	// if we are not handed homogeneous multivectors, take the grade parts with the largest norm
	if (ga < 0) {
		ga = a.largestGrade();
		ca.takeGrade(a, 1 << ga);
	}
	else ca.copy(a);

	if (gb < 0) {
		gb = b.largestGrade();
		cb.takeGrade(b, 1 << gb);
	}
	else cb.copy(b);

	// determine the grade of the join
	if (ga == 0) { // then the join is equal to b
		op(ca, cb); return gb;
	}
	else if (gb == 0) { // then the join is equal to a
		op(cb, ca); return ga;
	}
	else { // the join must be computed
		gd = d.deltaProduct(ca, cb);
		gj = (ga + gb + gd) >> 1;
		return (algorithm == 1) 
			? joinAlg1(ca, cb, ga, gb, gj)
			: joinAlg2(ca, cb, ga, gb, gj);
	}
}

int c5gai::meet(const c5gai &a, const c5gai &b, int algorithm /*= 1*/) {
	c5gai d, factors[7], j, jinv;
	int ga = a.grade(), gb = b.grade(), gd;

	c5gai ca, cb;

	// if we are not handed homogeneous multivectors, take the grade parts with the largest norm
	if (ga < 0) {
		ga = a.largestGrade();
		ca.takeGrade(a, 1 << ga);
	}
	else ca.copy(a);

	if (gb < 0) {
		gb = b.largestGrade();
		cb.takeGrade(b, 1 << gb);
	}
	else cb.copy(b);

	// compute delta product, join, ->meet
	gd = d.deltaProduct(ca, cb);
	j.join(ca, cb, algorithm);
	if (jinv.versorInverse(j)) {
		null();
		return 0;
	}
	lcem(d, jinv);
	return (ga + gb - gd) >> 1;
}

// todo: ensure everything is euclidean...
int c5gai::joinAlg2(const c5gai &a, const c5gai &b, int ga, int gb, int gj) {
	c5gai mv1, factors[7];
	int cg, lg, nf; // gj = grade join, gd = grade delta product

	// check for pseudoscalar case:
	if (gj == 7) {
		copy(I);
		return gj;
	}
	
	/*
	we pick the highest-dimension blade to start with,
	and factor the other blade
	*/
	c5gai res[8];
	int factorsTried[8];
	double largestNorm = -1.0f, nm;
	if (ga > gb) {
		if ( (nf = b.factor(factors)) != gb) return -1;	// should never happen
		lg = cg = ga;
		res[cg].copy(a);
	}
	else {
		if ( (nf = a.factor(factors)) != ga) return -1;	// should never happen
		lg = cg = gb;
		res[cg].copy(b);
	}

	// modification for bug of type 'join(e1, e1) = 0' (instead of e1) // 2003 10 28
	if (cg == gj) {	// if we have arrived at the grade of the join:
		copy(res[cg]);
		return gj;
	}

	/*
	Wegde as much factors as we need to get the right grade 
	*/
	factorsTried[cg] = 0;
	while (1) {
		// should we lower the current grade, and try the next factor?
		while (factorsTried[cg] >= nf) cg--;
		if (cg < lg) break;

		// wegde a factor to the result
		res[cg + 1].op(res[cg], factors[factorsTried[cg]]);
		factorsTried[cg + 1] = ++(factorsTried[cg]);
		cg++;

		if (cg == gj) {	// if we have arrived at the grade of the join:
			if ( (nm = res[cg].norm_a()) > largestNorm) {
				largestNorm = nm;
				copy(res[cg]);
			}
			cg--;
		}
	}

	return gj;
}

int c5gai::joinAlg1(const c5gai &a, const c5gai &b, int ga, int gb, int gj) {
	c5gai mv1, b1, b2, factors[7];
	int i, rg, gs; // gj = grade join, gd = grade delta product, rg = required grade, gs = grade size

	// check for pseudoscalar case:
	if (gj == 7) {
		copy(I);
		return gj;
	}

	/* we pick the highest-dimension blade (b1) to start with */
	c5gai be, pbe, tmp; // be = basis element, pbe = projected basis element
	double v1[35];
	double largestNorm = -1.0f, nm;
	if (ga > gb) {
		b1.copy(a);
		rg = gj - ga;
		b2.copy(b);
	}
	else {
		b1.copy(b);
		rg = gj - gb;
		b2.copy(a);
	}

	// project all possible basis elements of grade 'rg' onto blade b2; wegde them with b1
	gs = c5gai_gradeSize[rg];

	// modification for bug of type 'join(e1, e1) = 0' (instead of e1) // 2003 10 28
	if (gs == 0) { // nothing to do, since 'b1' already has the require grade
		copy(b1);
		return gj;
	}
	
	// modification for custom float (december 9 2002)
	c5gai_null(v1, gs);

	be.set(1 << rg, v1);
	for (i = 0; i < gs; i++) {
		be.c[i] = 1.0f;	// hack
		if (i) be.c[i-1] = 0.0f; // hack
		pbe.projectEM(b2, be);
		tmp.op(b1, pbe);
		if ( (nm = tmp.norm_a()) > largestNorm) {
			largestNorm = nm;
			copy(tmp);
		}
	}

	return gj;
}


int c5gai::random(int grade, double scale, int versor) {

	scale *= (double)2.0;

	// compute how many vector we have to multiply/wegd
	int nb = -1;
	while (grade) {
		grade >>= 1;
		nb++;
	}
	if (nb < 0) return -1;
	else if (nb == 0) {
		setScalar(scale * ((double)rand() / (double)2147483647 - (double)0.5));
	}
	else {
		int i, j, ct = 0;
		c5gai rv, tmp[2];
		double v[7], scalar = (double)1.0;

		tmp[0].setScalar(&scalar);
		for (i = 0; i < nb; i++) {
			// create a random vector
			for (j = 0; j < 7; j++)
				v[j] = scale * ((double)rand() / (double)2147483647 - (double)0.5);
			rv.setVector(v);

			// multiply/wegde it to the result
			if (versor) tmp[ct ^ 1].gp(tmp[ct], rv);
			else tmp[ct ^ 1].op(tmp[ct], rv);

			ct ^= 1;
		}

		copy(tmp[ct]);
	}

	return 0;
}

int c5gai::reciprocalFrame(c5gai f[], const c5gai e[], int nbVectors) {
	int cb = 0, i, err, ca, j;
	double scalar = 1.0f;
	c5gai B[2], Bi, tmp, einv, A[2];

	if ((nbVectors <= 0) || (nbVectors > 7)) return 0;

	// build the blade which is the pseudoscalar for the frame 
	B[cb].copy(e[0]);
	for (i = 1; i < nbVectors; i++) {
		B[cb^1].op(B[cb], e[i]);
		cb ^= 1;
	}

	// computer the inverse of the frame
	if (err = Bi.versorInverse(B[cb])) return err;

	// compute the reciprocal vectors
	for (i = 0; i < nbVectors; i++) {
		ca = 0;

		// compute te right scalar factor
		scalar = (i & 1) ? -1.0f : 1.0f;
		A[ca].setScalar(&scalar);

		// compute the blade, with omission of vector e[i]
		for (j = 0; j < nbVectors; j++) {
			if (j == i) continue;
			A[ca^1].op(A[ca], e[j]);
			ca ^= 1;
		}

		// compute reciprocal vector f[i]
		f[i].lcont(A[ca], Bi);
	}

	return 0;
}

int c5gai::mvType(int *grade /*= NULL*/, double epsilon /* = 1e-14 */) const {
// this code fails on 'e1 + (e2 ^ e3)' (says it versor, while it isn't)
	// a = *this
	// compute versor inverse of input
	if (grade) *grade = 0;

	c5gai reverse, scalar, ai;
	reverse.reverse(*this);
	scalar.scpem(*this, reverse); 
	if ((scalar.c == NULL) || (scalar.c[0] == 0.0f)) return GA_MULTIVECTOR;
	scalar.c[0] = 1.0f / scalar.c[0];
	ai.op(scalar, reverse);

	// check if ai * a = 1
	c5gai mv1, mv2, mv3;
	mv1.gpem(ai, *this); 
	mv1.compress(epsilon);
	if (mv1.gradeUsage() > GRADE0) return GA_MULTIVECTOR;
	if ((mv1.gradeUsage() == 0) || (mv1.c[0] < 1.0f - epsilon) || (mv1.c[0] > 1.0f + epsilon)) 
		return GA_MULTIVECTOR;

	// check if a * ai = 1
	mv1.gpem(*this, ai); 
	mv1.compress(epsilon);
	if (mv1.gradeUsage() > GRADE0) return GA_MULTIVECTOR;
	if ((mv1.gradeUsage() == 0) || (mv1.c[0] < 1.0f - epsilon) || (mv1.c[0] > 1.0f + epsilon)) 
		return GA_MULTIVECTOR;

	// test if ai * x * a is of the same grade as 'x' for all basis vectors
	int i, j, g;
	for (i = 0; i < 7; i++) { 
		mv1.gpem(ai, *c5gai::bv[i]);  // todo: EUCLIDEAN?
		mv2.gpem(mv1, *this);  
		mv2.compress(epsilon);
		if (mv2.gradeUsage() & (0xffff ^ GRADE1)) return GA_MULTIVECTOR;
	}

	// normalize 'a' (this is to make sure we don't misqualify 'small' (<epsilon) versors as blades
	scalar.setScalar(sqrt(fabs(scalar.c[0])));
	ai.op(scalar, *this);

	// test if a is of a single grade
	ai.compress(epsilon);
	i = ai.gradeUsage(); j = 0;
	g = GRADE0;
	while (i) {
		if (grade && (i & 1)) *grade = g;
		j += i & 1;
		i >>= 1;
		g <<= 1;
	}
	return (j <= 1) ? GA_BLADE : GA_VERSOR;
}

static int memberOf(char c, const char *set) { 
	int i = 0;
	while (set[i]) {
		if (c == set[i]) return 1;
		i++;
	}
	return 0;
}

int c5gai::parseString(const char *str, const c5ga_ben *ben /*= NULL*/) {
	int idx = 0, pmCnt, beCnt = 0;
	const int strLength = 256;
	double scalar;
	int floatStart, floatEnd, bvStart, bvEnd, i;
	c5gai blade, bv, BE, tmp;
	int stage = 0;
	char floatStr[strLength], bvStr[strLength];

	c5ga_ben defaultBen;
	if (ben == NULL) ben = &defaultBen;

	null();

	if (ben->m_startDelimiter) {
		// the first character found must be equal to m_startDelimiter
		while (str[idx] <= ' ') { // skip space until something happens
			if (str[idx] == 0) return -1; // nothing read
			idx++;
		}
		if (str[idx] != ben->m_startDelimiter) return -1; // first character is not the m_startDelimiter
		idx++;
	}

	for (;;) {
		blade.setScalar((double)1.0);
		scalar = (double)1;

		while (str[idx] <= ' ') { // skip space until something happens
			if (str[idx] == 0) return (ben->m_endDelimiter) ? -1 : idx; // done or error
			idx ++;
		}

		i = idx;
		pmCnt = 0; // plus minus count
		for (;;) { // parse [+|-]+
			if (str[idx] == '+') {scalar *= (double)+1; pmCnt++;}
			else if (str[idx] == '-') {scalar *= (double)-1; pmCnt++;}
			else if (memberOf(str[idx], "0123456789.")) break; // start of the float
			else if ((str[idx] > 0) && (str[idx] <= ' ')); // skip space
			else break;
			idx++;
		}
		if (beCnt && (!pmCnt)) return -1;

		if (memberOf(str[idx], "0123456789.")) { // parse float and '*' or '^'
			// parse the float
			floatStart = idx;
			while (memberOf(str[idx],  "0123456789.eE") ||
				(idx && ((str[idx-1] == 'e') || (str[idx-1] == 'E')) && ((str[idx] == '-') || (str[idx] == '+'))))  idx++;
			floatEnd = idx;
			memcpy(floatStr, str + floatStart, floatEnd - floatStart);
			floatStr[floatEnd - floatStart] = 0;
			if (floatEnd - floatStart <= 0) return -1;
			scalar *= (double)atof(floatStr);

			while (str[idx] <= ' ') { // skip space until something happens
				if (str[idx] == 0) {
					tmp.copy(*this); add(scalar, tmp);
					return (ben->m_endDelimiter) ? -1 : idx; // done or error
				}
				idx++;
			}

			// check if next char is +,-,* or 'ben->m_endDelimiter'
			if ((str[idx] == '+') || (str[idx] == '-')) {
				tmp.copy(*this); add(scalar, tmp);
				beCnt++;
				continue;
			}
			else if (ben->m_endDelimiter && (str[idx] == ben->m_endDelimiter)) { // end delimiter
				tmp.copy(*this); add(scalar, tmp);
				return idx+1;
			}
			else if ((str[idx] != '*') && (str[idx] != '^')) return -1; // must be either +,-, ^ or *
			else idx++; // skip over '*' or '^'

			while (str[idx] <= ' ') { // skip space until something happens
				if (str[idx] == 0) return -1; // error
				idx++;
			}
		}

		for (;;) { // parse a basis element ex ^ ey ^ ez
			bvStart = idx; // find the start and end of the basis vector name
			while ((str[idx] > ' ') && (str[idx] != '-') && (str[idx] != '+') && (str[idx] != '^') && (str[idx] != ben->m_endDelimiter)) idx ++;
			bvEnd = idx;

			// copy name, parse it 
			if ((bvEnd - bvStart + 1) >= strLength) return -1; // error (string too long)
			memcpy(bvStr, str + bvStart, bvEnd - bvStart);
			bvStr[bvEnd - bvStart] = 0;
			if (ben->lookupName(bvStr, BE) < 0) return -1; // basis vector name is invalid

			tmp.copy(blade); blade.op(tmp, BE); // wedge the basis element to the blade

			while (str[idx] <= ' ') { // skip space until something happens
				if ((str[idx] == 0) || (str[idx] == ben->m_endDelimiter))  break;
				idx++;
			}
			
			// next char must be a wedge, or this is the end of the blade
			if (str[idx] != '^') break;
			idx++;
		}

		tmp.op(scalar, blade);
		blade.copy(*this);
		add(blade, tmp);
		beCnt++;

		if (str[idx] == ben->m_endDelimiter) return idx + 1;

	}
	return idx; // the function never arrives here?
}

void c5gai::om(const c5gai &a, const c5gai_om &om) {
	int ia = 0;
	setUsage(a.usage);

	if (gradeUsage() & 1) {
		c5gai_opt_om_01x01(om.c + 0, a.c + ia, c + ia);
		ia += 1;
	}

	if (gradeUsage() & 2) {
		c5gai_opt_om_07x07(om.c + 1, a.c + ia, c + ia);
		ia += 7;
	}

	if (gradeUsage() & 4) {
		c5gai_opt_om_15x15(om.c + 50, a.c + ia, c + ia);
		ia += 21;
	}

	if (gradeUsage() & 8) {
		c5gai_opt_om_23x23(om.c + 491, a.c + ia, c + ia);
		ia += 35;
	}

	if (gradeUsage() & 16) {
		c5gai_opt_om_23x23(om.c + 1716, a.c + ia, c + ia);
		ia += 35;
	}

	if (gradeUsage() & 32) {
		c5gai_opt_om_15x15(om.c + 2941, a.c + ia, c + ia);
		ia += 21;
	}

	if (gradeUsage() & 64) {
		c5gai_opt_om_07x07(om.c + 3382, a.c + ia, c + ia);
		ia += 7;
	}

	if (gradeUsage() & 128) {
		c5gai_opt_om_01x01(om.c + 3431, a.c + ia, c + ia);
		ia += 1;
	}

}

void c5gai::expand(const double *pa[8]) const {
	int ia = 0;
	int i, j = 1;
	for (i = 0; i < 8; i++) {
		if (gradeUsage() & j) {
			pa[i] = c + ia;
			ia += c5gai_gradeSize[i];
		}
		else pa[i] = NULL;
		j <<= 1;
	}
}

void c5gai::expand2i(const c5gai &b, double const *pa[8], double const *pb[8]) const {
	int ia = 0;
	int i, j = 1;
	for (i = 0; i < 8; i++) {
		if (gradeUsage() & j) {
			pa[i] = c + ia;
			pb[i] = b.c + ia;
			ia += c5gai_gradeSize[i];
		}
		else pa[i] = pb[i] = NULL;
		j <<= 1;
	}
}

void c5gai::expand(const c5gai &b, double const *pa[8], double const *pb[8]) const {
	int ia = 0, ib = 0;
	int i, j = 1;
	for (i = 0; i < 8; i++) {
		if (gradeUsage() & j) {
			pa[i] = c + ia;
			ia += c5gai_gradeSize[i];
		}
		else pa[i] = NULL;
		if (b.gradeUsage() & j) {
			pb[i] = b.c + ib;
			ib += c5gai_gradeSize[i];
		}
		else pb[i] = NULL;
		j <<= 1;
	}
}

void c5gai::compress(double coordinates[128]) {
	int i, j, k, l, s, u;
	double cc[128];
	l = k = u = 0;
	for (i = 0; i < 8; i++) {
		s = c5gai_gradeSize[i];
		for (j = 0; j < s; j++)
			if (coordinates[k + j] != 0.0f) {
				u |= (1 << i);
				c5gai_copy(cc + l, coordinates + k, s);
				l += s;
				break;
			}
		k += s;
	}
	setUsage(u | (l << 8));
	c5gai_copy(c, cc, l);
}

const double *c5gai::coordinates(int grade) const {
	int ia = 0;
	int i, j = 1, gu = gradeUsage();
	static const double null[128] = {0}; // temp test for Brian Bouta problem
	for (i = 0; i < 8; i++) {
		if (j == grade) return (gu & j) ? c + ia : null;
		if (gu & j) ia += c5gai_gradeSize[i];
		j <<= 1;
	}
	return null;
}

int c5gai::fastDual(const c5gai &a) {
	setUsage(a.usage);
	int gua = a.gradeUsage(), gud = 0;
	int ia = c5gai_mvSize[gua], id = 0;
	const double *ca = a.c;
	double *cd = c;
	if (gua & GRADE7) {
		gud |= GRADE0;
		ia -= c5gai_gradeSize[7];
		cd[id + 0] = ca[ia + 0];
		id += c5gai_gradeSize[0];
	}
	if (gua & GRADE6) {
		gud |= GRADE1;
		ia -= c5gai_gradeSize[6];
		cd[id + 5] = -ca[ia + 0];
		cd[id + 6] = ca[ia + 1];
		cd[id + 4] = ca[ia + 2];
		cd[id + 3] = -ca[ia + 3];
		cd[id + 2] = ca[ia + 4];
		cd[id + 1] = -ca[ia + 5];
		cd[id + 0] = ca[ia + 6];
		id += c5gai_gradeSize[1];
	}
	if (gua & GRADE5) {
		gud |= GRADE2;
		ia -= c5gai_gradeSize[5];
		cd[id + 20] = ca[ia + 0];
		cd[id + 14] = -ca[ia + 1];
		cd[id + 13] = ca[ia + 2];
		cd[id + 12] = -ca[ia + 3];
		cd[id + 11] = ca[ia + 4];
		cd[id + 10] = -ca[ia + 5];
		cd[id + 19] = ca[ia + 6];
		cd[id + 18] = -ca[ia + 7];
		cd[id + 17] = ca[ia + 8];
		cd[id + 16] = -ca[ia + 9];
		cd[id + 15] = ca[ia + 10];
		cd[id + 9] = -ca[ia + 11];
		cd[id + 8] = ca[ia + 12];
		cd[id + 7] = -ca[ia + 13];
		cd[id + 6] = ca[ia + 14];
		cd[id + 5] = -ca[ia + 15];
		cd[id + 4] = ca[ia + 16];
		cd[id + 3] = -ca[ia + 17];
		cd[id + 2] = -ca[ia + 18];
		cd[id + 1] = ca[ia + 19];
		cd[id + 0] = -ca[ia + 20];
		id += c5gai_gradeSize[2];
	}
	if (gua & GRADE4) {
		gud |= GRADE3;
		ia -= c5gai_gradeSize[4];
		cd[id + 34] = ca[ia + 0];
		cd[id + 33] = -ca[ia + 1];
		cd[id + 32] = ca[ia + 2];
		cd[id + 31] = -ca[ia + 3];
		cd[id + 30] = ca[ia + 4];
		cd[id + 19] = ca[ia + 5];
		cd[id + 18] = -ca[ia + 6];
		cd[id + 17] = ca[ia + 7];
		cd[id + 16] = -ca[ia + 8];
		cd[id + 15] = ca[ia + 9];
		cd[id + 14] = -ca[ia + 10];
		cd[id + 13] = ca[ia + 11];
		cd[id + 12] = ca[ia + 12];
		cd[id + 11] = -ca[ia + 13];
		cd[id + 10] = ca[ia + 14];
		cd[id + 29] = -ca[ia + 15];
		cd[id + 28] = ca[ia + 16];
		cd[id + 27] = -ca[ia + 17];
		cd[id + 26] = ca[ia + 18];
		cd[id + 25] = -ca[ia + 19];
		cd[id + 24] = ca[ia + 20];
		cd[id + 23] = -ca[ia + 21];
		cd[id + 22] = -ca[ia + 22];
		cd[id + 21] = ca[ia + 23];
		cd[id + 20] = -ca[ia + 24];
		cd[id + 9] = -ca[ia + 25];
		cd[id + 8] = ca[ia + 26];
		cd[id + 7] = -ca[ia + 27];
		cd[id + 6] = -ca[ia + 28];
		cd[id + 5] = ca[ia + 29];
		cd[id + 4] = -ca[ia + 30];
		cd[id + 3] = ca[ia + 31];
		cd[id + 2] = -ca[ia + 32];
		cd[id + 1] = ca[ia + 33];
		cd[id + 0] = -ca[ia + 34];
		id += c5gai_gradeSize[3];
	}
	if (gua & GRADE3) {
		gud |= GRADE4;
		ia -= c5gai_gradeSize[3];
		cd[id + 34] = -ca[ia + 0];
		cd[id + 33] = ca[ia + 1];
		cd[id + 32] = -ca[ia + 2];
		cd[id + 31] = ca[ia + 3];
		cd[id + 30] = -ca[ia + 4];
		cd[id + 29] = ca[ia + 5];
		cd[id + 28] = -ca[ia + 6];
		cd[id + 27] = -ca[ia + 7];
		cd[id + 26] = ca[ia + 8];
		cd[id + 25] = -ca[ia + 9];
		cd[id + 14] = ca[ia + 10];
		cd[id + 13] = -ca[ia + 11];
		cd[id + 12] = ca[ia + 12];
		cd[id + 11] = ca[ia + 13];
		cd[id + 10] = -ca[ia + 14];
		cd[id + 9] = ca[ia + 15];
		cd[id + 8] = -ca[ia + 16];
		cd[id + 7] = ca[ia + 17];
		cd[id + 6] = -ca[ia + 18];
		cd[id + 5] = ca[ia + 19];
		cd[id + 24] = -ca[ia + 20];
		cd[id + 23] = ca[ia + 21];
		cd[id + 22] = -ca[ia + 22];
		cd[id + 21] = -ca[ia + 23];
		cd[id + 20] = ca[ia + 24];
		cd[id + 19] = -ca[ia + 25];
		cd[id + 18] = ca[ia + 26];
		cd[id + 17] = -ca[ia + 27];
		cd[id + 16] = ca[ia + 28];
		cd[id + 15] = -ca[ia + 29];
		cd[id + 4] = ca[ia + 30];
		cd[id + 3] = -ca[ia + 31];
		cd[id + 2] = ca[ia + 32];
		cd[id + 1] = -ca[ia + 33];
		cd[id + 0] = ca[ia + 34];
		id += c5gai_gradeSize[4];
	}
	if (gua & GRADE2) {
		gud |= GRADE5;
		ia -= c5gai_gradeSize[2];
		cd[id + 20] = -ca[ia + 0];
		cd[id + 19] = ca[ia + 1];
		cd[id + 18] = -ca[ia + 2];
		cd[id + 17] = -ca[ia + 3];
		cd[id + 16] = ca[ia + 4];
		cd[id + 15] = -ca[ia + 5];
		cd[id + 14] = ca[ia + 6];
		cd[id + 13] = -ca[ia + 7];
		cd[id + 12] = ca[ia + 8];
		cd[id + 11] = -ca[ia + 9];
		cd[id + 5] = -ca[ia + 10];
		cd[id + 4] = ca[ia + 11];
		cd[id + 3] = -ca[ia + 12];
		cd[id + 2] = ca[ia + 13];
		cd[id + 1] = -ca[ia + 14];
		cd[id + 10] = ca[ia + 15];
		cd[id + 9] = -ca[ia + 16];
		cd[id + 8] = ca[ia + 17];
		cd[id + 7] = -ca[ia + 18];
		cd[id + 6] = ca[ia + 19];
		cd[id + 0] = ca[ia + 20];
		id += c5gai_gradeSize[5];
	}
	if (gua & GRADE1) {
		gud |= GRADE6;
		ia -= c5gai_gradeSize[1];
		cd[id + 6] = ca[ia + 0];
		cd[id + 5] = -ca[ia + 1];
		cd[id + 4] = ca[ia + 2];
		cd[id + 3] = -ca[ia + 3];
		cd[id + 2] = ca[ia + 4];
		cd[id + 0] = -ca[ia + 5];
		cd[id + 1] = ca[ia + 6];
		id += c5gai_gradeSize[6];
	}
	if (gua & GRADE0) {
		gud |= GRADE7;
		ia -= c5gai_gradeSize[0];
		cd[id + 0] = ca[ia + 0];
		id += c5gai_gradeSize[7];
	}

	usage = gud | (usage ^ gua);
	return 0;
}

void c5gai::gp(const c5gai &a, const c5gai &b) {

	double const *pa[8], *pb[8];
	double cc[128];
	a.expand(b, pa, pb);
	c5gai_general_gp(pa, pb, cc);
	compress(cc);
}

void c5gai::scp(const c5gai &a, const c5gai &b) {

	double const *pa[8], *pb[8];
	double cc[128];
	a.expand(b, pa, pb);
	c5gai_general_scp(pa, pb, cc);
	compress(cc);
}

void c5gai::op(const c5gai &a, const c5gai &b) {

	double const *pa[8], *pb[8];
	double cc[128];
	a.expand(b, pa, pb);
	c5gai_general_op(pa, pb, cc);
	compress(cc);
}

void c5gai::op(double a, const c5gai &b) {

	double const *pa[8], *pb[8];
	double cc[128];
	b.expand(pb);
	memset(pa + 1, 0, sizeof(double*) * 7);
	pa[0] = &a;
	c5gai_general_op(pa, pb, cc);
	compress(cc);
}

void c5gai::lcont(const c5gai &a, const c5gai &b) {

	double const *pa[8], *pb[8];
	double cc[128];
	a.expand(b, pa, pb);
	c5gai_general_lcont(pa, pb, cc);
	compress(cc);
}

void c5gai::rcont(const c5gai &a, const c5gai &b) {

	double const *pa[8], *pb[8];
	double cc[128];
	a.expand(b, pa, pb);
	c5gai_general_rcont(pa, pb, cc);
	compress(cc);
}

void c5gai::hip(const c5gai &a, const c5gai &b) {

	double const *pa[8], *pb[8];
	double cc[128];
	a.expand(b, pa, pb);
	c5gai_general_hip(pa, pb, cc);
	compress(cc);
}

void c5gai::mhip(const c5gai &a, const c5gai &b) {

	double const *pa[8], *pb[8];
	double cc[128];
	a.expand(b, pa, pb);
	c5gai_general_mhip(pa, pb, cc);
	compress(cc);
}

void c5gai::gpem(const c5gai &a, const c5gai &b) {

	double const *pa[8], *pb[8];
	double cc[128];
	a.expand(b, pa, pb);
	c5gai_general_gpem(pa, pb, cc);
	compress(cc);
}

void c5gai::lcem(const c5gai &a, const c5gai &b) {

	double const *pa[8], *pb[8];
	double cc[128];
	a.expand(b, pa, pb);
	c5gai_general_lcem(pa, pb, cc);
	compress(cc);
}

void c5gai::scpem(const c5gai &a, const c5gai &b) {

	double const *pa[8], *pb[8];
	double cc[128];
	a.expand(b, pa, pb);
	c5gai_general_scpem(pa, pb, cc);
	compress(cc);
}
void c5gai_opt_zero_result(const double *a, const double *b, double *c) {};

int c5gai::resetProfile() {
	return 0;
}
int c5gai::printProfile(float threshold /* = 2.0 */) {
	return 0;
}
int c5gai::saveProfile(const char *filename /*  = NULL */) {
	return 0;
}

c5gai_om::c5gai_om() {
	// modification for custom float (december 9 2002)
	c5gai_null(c, 3432);
}

c5gai_om::~c5gai_om() {
}

c5gai_om::c5gai_om(const c5gai vectorImages[7]) {
	initOuterMorphism(vectorImages);
}
c5gai_om::c5gai_om(const c5gai *vectorImages[7]) {
	initOuterMorphism(vectorImages);
}

int c5gai_om::initOuterMorphism(const c5gai vectorImages[7]) {
	const c5gai *vi[7];
	int i;
	for (i = 0; i < 7; i++)
		vi[i] = vectorImages + i;
	return initOuterMorphism(vi);
}

int c5gai_om::initOuterMorphism(const c5gai *vectorImages[7]) {
	int beComputed[128], i, j, k, ic, gs, bei;	// be = Basis Element
	c5gai be[128];
	double scalar = 1.0f;
	const double *bec;

	// set all vectors
	for (i = 1; i <= 7; i++) {
		be[i].takeGrade(*(vectorImages[i-1]), GRADE1);
		beComputed[i] = 1;
	}

	// compute all the other basis elements
	memset(beComputed + 7 + 1, 0, sizeof(int) * (128 - 7 - 1));
	for (i = 7 + 1; i < 128; i++)
		computeBE(be, beComputed, i);

	// insert all coordinates into the matrix
	ic = 1;
	bei = 1;
	for (i = 1; i <= 7; i++) {
		gs = c5gai_gradeSize[i];
		for (j = 0; j < gs; j++) {
			bec = be[bei].coordinates(1 << i);
			for (k = 0; k < gs; k++) {
				c[ic + k * gs] = bec[k];
			}
			ic++;
			bei++;
		}
		ic += gs * (gs-1);
	}
	return 0;
}

int c5gai_om::computeBE(c5gai be[128], int beComputed[128], int idx) {
	int i, j, err;
	c5gai tmp;

	if (!beComputed[i = c5gai_omct[idx * 3 + 0]])
		if (err = computeBE(be, beComputed, i)) return err;
	if (!beComputed[j = c5gai_omct[idx * 3 + 1]])
		if (err = computeBE(be, beComputed, j)) return err;

	if (c5gai_omct[idx * 3 + 2] < 0) {
		tmp.negate(be[i]);
		be[idx].op(tmp, be[j]);
	}
	else {
		be[idx].op(be[i], be[j]);
	}

	beComputed[idx] = 1;

	return 0;
}

int c5gai_om::initSpinor2(const c5gai &Sp) {
	int i;
	c5gai Spi, vectorImages[3], tmp, tmp2;
	Spi.versorInverse(Sp);

	for (i = 0; i < 7; i++) {
		tmp.gp(Sp, *(c5gai::bv[i]));
		tmp2.gp(tmp, Spi);
		vectorImages[i].takeGrade(tmp2, GRADE1);
	}
	
	return initOuterMorphism(vectorImages);
}

c5gai_be::c5gai_be(const char *name, const c5gai &mv) {
	initToNothing();

	if (name) m_name = strdup(name);
	m_mv.copy(mv);
}

c5gai_be::~c5gai_be() {
	if (m_name) free(m_name);
	initToNothing();
}

void c5gai_be::initToNothing() {
	m_name = NULL;
	m_mv.null();
}

int c5gai_be::compareName(const char *name)  const {
	if ((name == NULL) || (m_name == NULL)) return 0;
	return (!strcmp(name, m_name));
}

c5ga_ben::c5ga_ben() {
	initToNothing();
	setDefaults();
}

c5ga_ben::c5ga_ben(char startDelimiter, char endDelimiter) {
	initToNothing();
	setDefaults();
	setDelimiters(startDelimiter, endDelimiter);
}

c5ga_ben::~c5ga_ben() {
	removeAll();
	initToNothing();
}

void c5ga_ben::initToNothing() {
	m_ben = NULL;
	m_nbBen = 0;
	m_startDelimiter = m_endDelimiter = 0;
}

int c5ga_ben::removeAll() {
	int i;
	if (m_ben) {
		for (i = 0; i < m_nbBen; i++)
			if (m_ben[i]) delete m_ben[i];
		free(m_ben);
	}
	m_ben = NULL;
	m_nbBen = 0;
	return 0;
}

int c5ga_ben::addName(const char *name, const c5gai &mv) {
	c5gai tmpMv;
	if (lookupName(name, tmpMv) == 0) return -1; // already present in list
	
	if ( (m_ben = (c5gai_be**)realloc(m_ben, sizeof(c5gai_be*) * (m_nbBen + 1))) == NULL) {
		printf("c5ga_ben::addName(): memory allocation failure for '%d' bytes\n", sizeof(c5gai_be*) * (m_nbBen + 1));
		return -1;
	}

	if ( (m_ben[m_nbBen] = new c5gai_be(name, mv)) == NULL) {
		printf("c5ga_ben::addName(): memory allocation failure for '%d' bytes\n", sizeof(c5gai_be));
		return -1;
	}

	m_nbBen++;

	return 0;
}

int c5ga_ben::removeName(const char *name) {
	int i;

	for (i = 0; i < m_nbBen; i++)
		if (m_ben[i]->compareName(name)) {
			delete m_ben[i];
			m_ben[i] = m_ben[m_nbBen - 1];
			m_nbBen--;
			i--;
		}

	return 0;
}

int c5ga_ben::lookupName(const char *name, c5gai &mv) const {
	int i;

	for (i = 0; i < m_nbBen; i++)
		if (m_ben[i]->compareName(name)) {
			mv.copy(m_ben[i]->m_mv);
			return 0;
		}

	return -1;
}

int c5ga_ben::setDelimiters(char startDelimiter, char endDelimiter) {
	if ((startDelimiter < 0) || (endDelimiter < 0)) return -1;
	m_startDelimiter = startDelimiter;
	m_endDelimiter = endDelimiter;
	return 0;
}

int c5ga_ben::setDefaults() {
	int err;
	removeAll();
	m_startDelimiter = m_endDelimiter = 0;
	if (err = addName("e1", c5gai::e1)) return err;
	if (err = addName("e2", c5gai::e2)) return err;
	if (err = addName("e3", c5gai::e3)) return err;
	if (err = addName("e4", c5gai::e4)) return err;
	if (err = addName("e5", c5gai::e5)) return err;
	if (err = addName("no", c5gai::no)) return err;
	if (err = addName("ni", c5gai::ni)) return err;
	return 0;
}


//Merging /usr/local/include/gaigen/gaigenhl.cpp into generated code:

// DO NOT TRY TO COMPILE THIS FILE DIRECTLY.
// IT IS MEANT TO BE INCLUDED BY GENERATED CODE!

/*
 *
 * Gaigen, Copyright (c) 2001-2004, University of Amsterdam
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *      * Redistributions of source code must retain the above copyright
 *        notice, this list of conditions and the following disclaimer.
 *      * Redistributions in binary form must reproduce the above copyright
 *        notice, this list of conditions and the following disclaimer in
 *        the documentation and/or other materials provided with the
 *        distribution.
 *      * Neither the name of the University of Amsterdam nor the names of its
 *        contributors may be used to endorse or promote products derived
 *        from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#ifdef GAIM_NAMESPACE
namespace CLASSNAME_NS {
#endif // GAIM_NAMESPACE

CLASSNAME::CLASSNAME() {

}
/*
CLASSNAME::CLASSNAME(GAIM_CLASSNAME &a) {
	copy(a);
}
*/
CLASSNAME::~CLASSNAME() {

}

GAIM_RETURN_TYPE CLASSNAME::operator=(const CLASSNAME &a) {
	copy(a);
	return *this;
}

GAIM_RETURN_TYPE CLASSNAME::operator=(GAIM_FLOAT f) {
	set(GRADE0, &f);
	return *this;
}

#ifdef GAIM_FUNCTION_FASTTEMPVAR
GAIM_RETURN_TYPE CLASSNAME::getTemp() {
	// gets a temporary variable (based on Stroustup (heaven help you if you write an expression which requires more than MV_MAX_TEMP temporaries))
	static int idx = 0;
	static CLASSNAME *temp = NULL;
	if (!temp) {
		int i;
		temp = new CLASSNAME[MV_MAX_TEMP];
		for (i = 0; i < MV_MAX_TEMP; i++) {
			temp[i].setUsage(0xf | (0x7 << 4));
			temp[i].setUsage(0);
		}
	}
//	printf("Temp idx = %d\n", idx);
	if (idx == MV_MAX_TEMP) idx = 0;
	return temp[idx++];
}
#endif // GAIM_FUNCTION_FASTTEMPVAR

#ifdef GAIM_FUNCTION_TAKEGRADE
GAIM_RETURN_TYPE CLASSNAME::grade(int g) const {
	GAIM_RETURN_VAR(result);
//	GAIM_RETURN_VAR(result);
	result.takeGrade(*this, g);
	return result;
}
#endif // GAIM_FUNCTION_TAKEGRADE


#ifdef GAIM_FUNCTION_REVERSE
GAIM_RETURN_TYPE CLASSNAME::operator~() const {
	GAIM_RETURN_VAR(result);
	((GAIM_CLASSNAME&)result).reverse(*this);
	return result;
}
#endif // GAIM_FUNCTION_REVERSE

#ifdef GAIM_FUNCTION_CLIFFORDCONJUGATE
GAIM_RETURN_TYPE CLASSNAME::operator--() const {
	GAIM_RETURN_VAR(result);
	((GAIM_CLASSNAME&)result).cliffordConjugate(*this);
	return result;
}
#endif // GAIM_FUNCTION_CLIFFORDCONJUGATE

#ifdef GAIM_FUNCTION_GRADEINVOLUTION
GAIM_RETURN_TYPE CLASSNAME::operator++() const {
	GAIM_RETURN_VAR(result);
	((GAIM_CLASSNAME&)result).gradeInvolution(*this);
	return result;
}
#endif // GAIM_FUNCTION_GRADEINVOLUTION

#ifdef GAIM_PRODUCT_GP
GAIM_RETURN_TYPE CLASSNAME::operator*=(const CLASSNAME &a) {
	CLASSNAME tmp;
	tmp.gp(*this, a);
	this->copy(tmp);
	return *this;
}
GAIM_RETURN_TYPE CLASSNAME::operator*=(GAIM_FLOAT a) {
	CLASSNAME tmp;
	tmp.op(a, *this);
	this->copy(tmp);
	return *this;
}
GAIM_RETURN_TYPE gp(const CLASSNAME &a, const CLASSNAME &b) {
	GAIM_RETURN_VAR(result);
	result.gp(a, b);
	return result;
}
GAIM_RETURN_TYPE gp(GAIM_FLOAT a, const CLASSNAME &b) {
	GAIM_RETURN_VAR(result);
	result.op(a, b);
	return result;
}

#define USE_NEW_EXP

#ifdef USE_OLD_EXP
GAIM_RETURN_TYPE CLASSNAME::exp(int order /*= 9*/) const {
	int i, div = 1;
	GAIM_RETURN_VAR(result);

	result.setScalar(1.0);
	if (order == 0) return result;

	CLASSNAME tmp(*this);

	for (i = 1; i < order; i++) {
		result += tmp * (GAIM_FLOAT)(1.0 / (GAIM_FLOAT)div);

		if (i < order-1) {
			div *= (i+1);
			tmp *= *this;
		}
	}

	return result;
}
#endif /* USE_OLD_EXP */

#ifdef USE_NEW_EXP
GAIM_RETURN_TYPE CLASSNAME::exp(int order /*= 9*/) const {
	/*
	Improved version of exp thanks to Robert Valkenburg & students
	*/
    int i;
    CLASSNAME result;

    result.setScalar(1.0);
    if (order == 0) {
        GAIM_RETURN_VAR(r);
        r = result;
        return r;
    }

    // scale by power of 2 so that its norm is < 1
    unsigned long max = (unsigned long)largestCoordinate();
    unsigned long scale=1;
    if (max > 1) scale <<= 1;
    while (max)
    {
        max >>= 1;
        scale <<= 1;
    }

    CLASSNAME scaled = (*this) / (GAIM_FLOAT)(scale);

    // taylor approximation
    CLASSNAME tmp;

    tmp.setScalar(1.0);
    for (i = 1; i < order; i++) {
        tmp = tmp*scaled/(GAIM_FLOAT)(i);
        result += tmp;
    }

    // undo scaling
    while (scale > 1)
    {
        result *= result;
        scale >>= 1;
    }
    GAIM_RETURN_VAR(r);
    r = result;
    return r;
}
#endif /* USE_NEW_EXP */


#ifndef GAIM_FUNCTION_FASTDUAL
GAIM_RETURN_TYPE CLASSNAME::dual() const {
	GAIM_RETURN_VAR(result);
	result.gp(*this, Ii);
	return result;
}
#endif // GAIM_FUNCTION_FASTDUAL

#endif // GAIM_PRODUCT_GP

#ifdef GAIM_PRODUCT_GP_EM
GAIM_RETURN_TYPE gpem (const CLASSNAME &a, const CLASSNAME &b) {
	GAIM_RETURN_VAR(result);
	result. GAIM_PRODUCT_GP_EM (a, b);
	return result;
}
GAIM_RETURN_TYPE gpem (GAIM_FLOAT a, const CLASSNAME &b) {
	GAIM_RETURN_VAR(result);
	result.op(a, b);
	return result;
}
#endif // GAIM_PRODUCT_GP_EM


#ifdef GAIM_FUNCTION_FASTDUAL
GAIM_RETURN_TYPE CLASSNAME::fastDual() const {
	GAIM_RETURN_VAR(result);
	((GAIM_CLASSNAME&)result).fastDual(*this);
	return result;
}
#endif // GAIM_FUNCTION_FASTDUAL


#ifdef GAIM_FUNCTION_VERSORINVERSE
GAIM_RETURN_TYPE CLASSNAME::versorInverse() const {
	GAIM_RETURN_VAR(result);
	result.versorInverse(*this);
	return result;
}
#endif
#ifdef GAIM_FUNCTION_LOUNESTOINVERSE
GAIM_RETURN_TYPE CLASSNAME::lounestoInverse() const {
	GAIM_RETURN_VAR(result);
	result.lounestoInverse(*this);
	return result;
}
#endif
#ifdef GAIM_FUNCTION_GENERALINVERSE
GAIM_RETURN_TYPE CLASSNAME::generalInverse() const {
	GAIM_RETURN_VAR(result);
	result.generalInverse(*this);
	return result;
}
#endif

#ifdef GAIM_PRODUCT_IGP
GAIM_RETURN_TYPE CLASSNAME::inverse() const {
	GAIM_RETURN_VAR(result);
	result.inverse(*this);
	return result;
}

GAIM_RETURN_TYPE CLASSNAME::operator/=(const CLASSNAME &a) {
	CLASSNAME tmp, tmp2;
	tmp2.inverse(a);
	tmp.gp(*this, tmp2);
	this->copy(tmp);
	return *this;
}
GAIM_RETURN_TYPE CLASSNAME::operator/=(GAIM_FLOAT a) {
	CLASSNAME tmp;
	tmp.op(1.0f / a, *this);
	this->copy(tmp);
	return *this;
}
#endif // GAIM_PRODUCT_IGP

#ifdef GAIM_PRODUCT_SCP
GAIM_RETURN_TYPE CLASSNAME::operator%=(const CLASSNAME &a) {
	CLASSNAME tmp;
	tmp.scp(*this, a);
	this->copy(tmp);
	return *this;
}
GAIM_RETURN_TYPE CLASSNAME::operator%=(GAIM_FLOAT a) {
	GAIM_FLOAT f = scalar() * a;
	setScalar(&f);
	return *this;
}
GAIM_RETURN_TYPE scp(const CLASSNAME &a, const CLASSNAME &b) {
	GAIM_RETURN_VAR(result);
	result.scp(a, b);
	return result;
}
GAIM_RETURN_TYPE scp(GAIM_FLOAT a, const CLASSNAME &b) {
	GAIM_RETURN_VAR(result);
	result.set(GRADE0, mulScalar(a, b.scalar()));
	return result;
}
#endif // GAIM_PRODUCT_SCP

#ifdef GAIM_PRODUCT_LCONT
GAIM_RETURN_TYPE lcont(const CLASSNAME &a, const CLASSNAME &b) {
	GAIM_RETURN_VAR(result);
	result.lcont(a, b);
	return result;
}
GAIM_RETURN_TYPE CLASSNAME::operator<<=(const CLASSNAME &a) {
	CLASSNAME tmp;
	tmp.lcont(*this, a);
	this->copy(tmp);
	return *this;
}
#endif // GAIM_PRODUCT_LCONT

#ifdef GAIM_PRODUCT_LCONT_EM
GAIM_RETURN_TYPE lcem(const CLASSNAME &a, const CLASSNAME &b) {
	GAIM_RETURN_VAR(result);
	result. GAIM_PRODUCT_LCONT_EM (a, b);
	return result;
}
#endif // GAIM_PRODUCT_LCONT_EM

#ifdef GAIM_PRODUCT_RCONT
GAIM_RETURN_TYPE rcont(const CLASSNAME &a, const CLASSNAME &b) {
	GAIM_RETURN_VAR(result);
	result.rcont(a, b);
	return result;
}
GAIM_RETURN_TYPE CLASSNAME::operator>>=(const CLASSNAME &a) {
	CLASSNAME tmp;
	tmp.rcont(*this, a);
	this->copy(tmp);
	return *this;
}
#endif // GAIM_PRODUCT_RCONT

#ifdef GAIM_PRODUCT_HIP
GAIM_RETURN_TYPE hip(const CLASSNAME &a, const CLASSNAME &b) {
	GAIM_RETURN_VAR(result);
	result.hip(a, b);
	return result;
}
GAIM_RETURN_TYPE hip(GAIM_FLOAT a, const CLASSNAME &b) {
	GAIM_RETURN_VAR(result);
	CLASSNAME _a(a);
	result.hip(_a, b);
	return result;
}
GAIM_RETURN_TYPE hip(const CLASSNAME &a, GAIM_FLOAT b) {
	GAIM_RETURN_VAR(result);
	CLASSNAME _b(b);
	result.hip(a, _b);
	return result;
}
#endif // GAIM_PRODUCT_HIP

#ifdef GAIM_PRODUCT_MHIP
GAIM_RETURN_TYPE mhip(const CLASSNAME &a, const CLASSNAME &b) { // GAIM_RETURN_TYPE used to read CLASSNAME & (modified 10-10-2002)
	GAIM_RETURN_VAR(result);
	result.mhip(a, b);
	return result;
}
GAIM_RETURN_TYPE mhip(GAIM_FLOAT a, const CLASSNAME &b) {
	GAIM_RETURN_VAR(result);
	CLASSNAME _a(a);
	result.mhip(_a, b);
	return result;
}
GAIM_RETURN_TYPE mhip(const CLASSNAME &a, GAIM_FLOAT b) {
	GAIM_RETURN_VAR(result);
	CLASSNAME _b(b);
	result.mhip(a, _b);
	return result;
}
#endif // GAIM_PRODUCT_MHIP


#ifdef GAIM_PRODUCT_OP
GAIM_RETURN_TYPE op(GAIM_FLOAT a, const CLASSNAME &b) {
	GAIM_RETURN_VAR(result);
	result.op(a, b);
	return result;
}
GAIM_RETURN_TYPE op(const CLASSNAME &a, const CLASSNAME &b) {
	GAIM_RETURN_VAR(result);
	result.op(a, b);
	return result;
}
GAIM_RETURN_TYPE CLASSNAME::operator^=(const CLASSNAME &a) {
	CLASSNAME tmp;
	tmp.op(*this, a);
	this->copy(tmp);
	return *this;
}
GAIM_RETURN_TYPE CLASSNAME::operator^=(GAIM_FLOAT a) {
	CLASSNAME tmp;
	tmp.op(a, *this);
	this->copy(tmp);
	return *this;
}
#endif // GAIM_PRODUCT_OP

#ifdef GAIM_FUNCTION_MEETJOIN
GAIM_RETURN_TYPE meet(const CLASSNAME &a, const CLASSNAME &b) {
	GAIM_RETURN_VAR(result);
	result.meet(a, b);
	return result;
}

GAIM_RETURN_TYPE join(const CLASSNAME &a, const CLASSNAME &b) {
	GAIM_RETURN_VAR(result);
	result.join(a, b);
	return result;
}

#endif // GAIM_FUNCTION_MEETJOIN


#ifdef GAIM_FUNCTION_ADD
GAIM_RETURN_TYPE add(const CLASSNAME &a, const CLASSNAME &b) {
	GAIM_RETURN_VAR(result);
	result.add(a, b);
	return result;
}
GAIM_RETURN_TYPE add(GAIM_FLOAT a, const CLASSNAME &b) {
	GAIM_RETURN_VAR(result);
	result.add(a, b);
	return result;
}
GAIM_RETURN_TYPE CLASSNAME::operator+=(const CLASSNAME &a) {
	CLASSNAME tmp;
	tmp.add(*this, a);
	this->copy(tmp);
	return *this;
}
GAIM_RETURN_TYPE CLASSNAME::operator+=(GAIM_FLOAT a) {
	CLASSNAME tmp;
	tmp.add(a, *this);
	this->copy(tmp);
	return *this;
}
#endif // GAIM_FUNCTION_ADD

#ifdef GAIM_FUNCTION_SUBSTRACT
GAIM_RETURN_TYPE sub(const CLASSNAME &a, const CLASSNAME &b) {
	GAIM_RETURN_VAR(result);
	result.sub(a, b);
	return result;
}
GAIM_RETURN_TYPE sub(GAIM_FLOAT a, const CLASSNAME &b) {
	GAIM_RETURN_VAR(result);
	result.sub(a, b);
	return result;
}
GAIM_RETURN_TYPE CLASSNAME::operator-=(const CLASSNAME &a) {
	CLASSNAME tmp;
	tmp.sub(*this, a);
	this->copy(tmp);
	return *this;
}
GAIM_RETURN_TYPE CLASSNAME::operator-=(GAIM_FLOAT a) {
	CLASSNAME tmp;
	tmp.add(a, *this);
	this->copy(tmp);
	return *this;
}
#endif // GAIM_FUNCTION_SUBSTRACT

#ifdef GAIM_FUNCTION_NEGATE
GAIM_RETURN_TYPE negate(const CLASSNAME &a) {
	GAIM_RETURN_VAR(result);
	((GAIM_CLASSNAME&)result).negate(a);
	return result;
}
#endif //GAIM_FUNCTION_NEGATE



#ifdef GAIM_FUNCTION_NORMALIZE
GAIM_RETURN_TYPE CLASSNAME::normal(int norm /* = 1 */) const {
	GAIM_RETURN_VAR(result);
	result.normalize(*this, norm);
	return result;
}
#endif // GAIM_FUNCTION_NORMALIZE


#ifdef GAIM_PRODUCT_OM
CLASSNAME_OM::CLASSNAME_OM(const CLASSNAME *vectorImages[3]) {
	initVectorImages(vectorImages);
}

CLASSNAME_OM::CLASSNAME_OM(const CLASSNAME &spinor) {
	initSpinor(spinor);
}


int CLASSNAME_OM::initSpinor(const CLASSNAME &spinor) {
	CLASSNAME si(spinor.inverse()), v, vi[GA_MAX_DIM];
	GAIM_FLOAT coordinates[GA_MAX_DIM];
	int i;

	memset(coordinates, 0, sizeof(GAIM_FLOAT) * GA_MAX_DIM);

	for (i = 0; i < CLASSNAME::dim; i++) {
		coordinates[i] = 1.0;
		if (i > 0) coordinates[i-1] = 0.0;
		v.setVector(coordinates);
		vi[i] = ((spinor * v) * si)(GRADE1);

	}
	return initVectorImages(vi);
}


GAIM_RETURN_TYPE om(const CLASSNAME_OM &om, const CLASSNAME &a) {
	GAIM_RETURN_VAR(result);

	result.om(a, om);

	return result;
}


#ifdef GAIM_NAMESPACE
}
#endif // GAIM_NAMESPACE


#endif // GAIM_PRODUCT_OM


